{"ast":null,"code":"import \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport * as d3 from 'd3';\nimport axios from 'axios';\nimport { EditorState, EditorView, basicSetup } from '@codemirror/basic-setup';\nimport { javascript } from '@codemirror/lang-javascript';\nexport default {\n  name: \"D3Runner\",\n  data() {\n    return {\n      d3Code: this.$route.query.code || \"\",\n      // 存储用户输入的 D3.js 代码\n      pictureUrl: this.$route.query.picture || \"\",\n      // 存储图片URL\n      noteId: this.$route.query.id || null,\n      // 从路由获取 noteId，若无则为新建\n      editorView: null // 存储 codemirror 编辑器视图\n    };\n  },\n\n  created() {\n    if (this.noteId) {\n      this.fetchNoteDetails();\n    }\n  },\n  mounted() {\n    // 初始化 codemirror 编辑器\n    this.editorView = new EditorView({\n      state: EditorState.create({\n        doc: this.d3Code,\n        extensions: [basicSetup, javascript()]\n      }),\n      parent: this.$refs.codeEditor\n    });\n  },\n  methods: {\n    fetchNoteDetails() {\n      this.$request.get(`/notes/selectById/${this.noteId}`).then(res => {\n        if (res.code === '200' && res.data) {\n          this.d3Code = res.data.code || \"\";\n          this.pictureUrl = res.data.picture || \"\";\n          // 更新编辑器中的代码\n          this.editorView.dispatch({\n            changes: {\n              from: 0,\n              to: this.editorView.state.doc.length,\n              insert: this.d3Code\n            }\n          });\n        } else {\n          this.$message.error(res.msg || '无法加载Note详情');\n        }\n      }).catch(error => {\n        console.error(\"获取 Note 详情失败:\", error);\n        this.$message.error('获取 Note 详情失败');\n      });\n    },\n    runD3Code() {\n      // 获取编辑器中的代码\n      this.d3Code = this.editorView.state.doc.toString();\n      const svgContainer = this.$refs.d3Output;\n\n      // 清空以前的图像\n      while (svgContainer.firstChild) {\n        svgContainer.removeChild(svgContainer.firstChild);\n      }\n\n      // 运行 D3.js 代码\n      try {\n        const userFunc = new Function('d3', 'container', this.d3Code);\n        userFunc(d3, svgContainer);\n      } catch (error) {\n        console.error(\"D3.js 代码执行出错:\", error);\n        alert(\"D3.js 代码执行出错，请检查代码。\");\n      }\n    },\n    saveD3Output() {\n      const svgElement = this.$refs.d3Output.querySelector('svg');\n      if (!svgElement) {\n        alert(\"没有可保存的 D3.js 图形，请先运行代码。\");\n        return;\n      }\n      const svgData = new XMLSerializer().serializeToString(svgElement);\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d');\n      const img = new Image();\n      const svgBlob = new Blob([svgData], {\n        type: 'image/svg+xml;charset=utf-8'\n      });\n      const url = URL.createObjectURL(svgBlob);\n      img.onload = () => {\n        canvas.width = img.width;\n        canvas.height = img.height;\n        ctx.drawImage(img, 0, 0);\n        canvas.toBlob(blob => {\n          const formData = new FormData();\n          formData.append('file', blob, 'd3-output.png');\n          axios.post(this.$baseUrl + '/files/upload', formData).then(response => {\n            const pictureUrl = response.data.data;\n            const noteData = {\n              id: this.noteId,\n              comment: 'D3.js 图形',\n              code: this.d3Code,\n              picture: pictureUrl\n            };\n            this.$request({\n              method: this.noteId ? 'put' : 'post',\n              url: this.noteId ? '/notes/update' : '/notes/add',\n              data: noteData\n            }).then(res => {\n              if (res.code === '200') {\n                this.$message.success(this.noteId ? 'Note 更新成功' : 'Note 创建成功');\n              } else {\n                this.$message.error(res.msg || '操作失败');\n              }\n            }).catch(error => {\n              console.error(this.noteId ? '更新 Note 失败:' : '创建 Note 失败:', error);\n              this.$message.error('操作失败，请稍后再试');\n            });\n          }).catch(error => {\n            console.error(\"上传图片失败:\", error);\n          });\n        });\n      };\n      img.src = url;\n    }\n  }\n};","map":{"version":3,"names":["d3","axios","EditorState","EditorView","basicSetup","javascript","name","data","d3Code","$route","query","code","pictureUrl","picture","noteId","id","editorView","created","fetchNoteDetails","mounted","state","create","doc","extensions","parent","$refs","codeEditor","methods","$request","get","then","res","dispatch","changes","from","to","length","insert","$message","error","msg","catch","console","runD3Code","toString","svgContainer","d3Output","firstChild","removeChild","userFunc","Function","alert","saveD3Output","svgElement","querySelector","svgData","XMLSerializer","serializeToString","canvas","document","createElement","ctx","getContext","img","Image","svgBlob","Blob","type","url","URL","createObjectURL","onload","width","height","drawImage","toBlob","blob","formData","FormData","append","post","$baseUrl","response","noteData","comment","method","success","src"],"sources":["src/views/manager/D3Runner.vue"],"sourcesContent":["<template>\r\n  <div class=\"d3-runner-container\">\r\n    <h3>D3.js 绘图页面</h3>\r\n    <div ref=\"codeEditor\" class=\"code-editor\"></div>\r\n    <button @click=\"runD3Code\">运行代码</button>\r\n    <button @click=\"saveD3Output\">保存</button>\r\n    <div ref=\"d3Output\" class=\"d3-output\"></div>\r\n\r\n    <!-- 显示图片 -->\r\n    <div v-if=\"pictureUrl\" class=\"note-picture\">\r\n      <img :src=\"pictureUrl\" alt=\"D3 Output\" style=\"max-width: 100%; margin-top: 10px;\">\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as d3 from 'd3';\r\nimport axios from 'axios';\r\nimport { EditorState, EditorView, basicSetup } from '@codemirror/basic-setup';\r\nimport { javascript } from '@codemirror/lang-javascript';\r\n\r\nexport default {\r\n  name: \"D3Runner\",\r\n  data() {\r\n    return {\r\n      d3Code: this.$route.query.code ||\"\", // 存储用户输入的 D3.js 代码\r\n      pictureUrl: this.$route.query.picture ||\"\", // 存储图片URL\r\n      noteId: this.$route.query.id || null, // 从路由获取 noteId，若无则为新建\r\n      editorView: null, // 存储 codemirror 编辑器视图\r\n    };\r\n  },\r\n  created() {\r\n    if (this.noteId) {\r\n      this.fetchNoteDetails();\r\n    }\r\n  },\r\n  mounted() {\r\n    // 初始化 codemirror 编辑器\r\n    this.editorView = new EditorView({\r\n      state: EditorState.create({\r\n        doc: this.d3Code,\r\n        extensions: [basicSetup, javascript()],\r\n      }),\r\n      parent: this.$refs.codeEditor,\r\n    });\r\n  },\r\n  methods: {\r\n    fetchNoteDetails() {\r\n      this.$request.get(`/notes/selectById/${this.noteId}`)\r\n        .then(res => {\r\n          if (res.code === '200' && res.data) {\r\n            this.d3Code = res.data.code || \"\"; \r\n            this.pictureUrl = res.data.picture || \"\";\r\n            // 更新编辑器中的代码\r\n            this.editorView.dispatch({\r\n              changes: { from: 0, to: this.editorView.state.doc.length, insert: this.d3Code }\r\n            });\r\n          } else {\r\n            this.$message.error(res.msg || '无法加载Note详情');\r\n          }\r\n        })\r\n        .catch(error => {\r\n          console.error(\"获取 Note 详情失败:\", error);\r\n          this.$message.error('获取 Note 详情失败');\r\n        });\r\n    },\r\n    runD3Code() {\r\n      // 获取编辑器中的代码\r\n      this.d3Code = this.editorView.state.doc.toString();\r\n      const svgContainer = this.$refs.d3Output;\r\n\r\n      // 清空以前的图像\r\n      while (svgContainer.firstChild) {\r\n        svgContainer.removeChild(svgContainer.firstChild);\r\n      }\r\n\r\n      // 运行 D3.js 代码\r\n      try {\r\n        const userFunc = new Function('d3', 'container', this.d3Code);\r\n        userFunc(d3, svgContainer);\r\n      } catch (error) {\r\n        console.error(\"D3.js 代码执行出错:\", error);\r\n        alert(\"D3.js 代码执行出错，请检查代码。\");\r\n      }\r\n    },\r\n    saveD3Output() {\r\n      const svgElement = this.$refs.d3Output.querySelector('svg');\r\n\r\n      if (!svgElement) {\r\n        alert(\"没有可保存的 D3.js 图形，请先运行代码。\");\r\n        return;\r\n      }\r\n\r\n      const svgData = new XMLSerializer().serializeToString(svgElement);\r\n      const canvas = document.createElement('canvas');\r\n      const ctx = canvas.getContext('2d');\r\n      const img = new Image();\r\n\r\n      const svgBlob = new Blob([svgData], { type: 'image/svg+xml;charset=utf-8' });\r\n      const url = URL.createObjectURL(svgBlob);\r\n\r\n      img.onload = () => {\r\n        canvas.width = img.width;\r\n        canvas.height = img.height;\r\n        ctx.drawImage(img, 0, 0);\r\n\r\n        canvas.toBlob((blob) => {\r\n          const formData = new FormData();\r\n          formData.append('file', blob, 'd3-output.png');\r\n\r\n          axios.post(this.$baseUrl + '/files/upload', formData)\r\n            .then(response => {\r\n              const pictureUrl = response.data.data;\r\n              const noteData = {\r\n                id: this.noteId,\r\n                comment: 'D3.js 图形',\r\n                code: this.d3Code,\r\n                picture: pictureUrl\r\n              };\r\n\r\n              this.$request({\r\n                method: this.noteId ? 'put' : 'post',\r\n                url: this.noteId ? '/notes/update' : '/notes/add',\r\n                data: noteData\r\n              }).then(res => {\r\n                if (res.code === '200') {\r\n                  this.$message.success(this.noteId ? 'Note 更新成功' : 'Note 创建成功');\r\n                } else {\r\n                  this.$message.error(res.msg || '操作失败');\r\n                }\r\n              }).catch(error => {\r\n                console.error(this.noteId ? '更新 Note 失败:' : '创建 Note 失败:', error);\r\n                this.$message.error('操作失败，请稍后再试');\r\n              });\r\n            })\r\n            .catch(error => {\r\n              console.error(\"上传图片失败:\", error);\r\n            });\r\n        });\r\n      };\r\n\r\n      img.src = url;\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.code-editor {\r\n  width: 100%;\r\n  min-height: 200px;\r\n  border: 1px solid #ddd;\r\n  padding: 10px;\r\n  font-family: monospace;\r\n  font-size: 14px;\r\n}\r\n\r\n.d3-output {\r\n  border: 1px solid #ddd;\r\n  padding: 10px;\r\n  margin-top: 10px;\r\n  min-height: 300px;\r\n}\r\n\r\nbutton {\r\n  margin-right: 10px;\r\n}\r\n\r\n.note-picture img {\r\n  max-width: 100%;\r\n  margin-top: 10px;\r\n}\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}