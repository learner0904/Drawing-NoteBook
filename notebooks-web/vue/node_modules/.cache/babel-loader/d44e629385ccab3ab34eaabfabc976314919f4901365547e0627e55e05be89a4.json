{"ast":null,"code":"import \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport * as d3 from 'd3';\nimport axios from 'axios';\nimport * as Plot from '@observablehq/plot'; // 导入 Plot\nimport { h } from \"vue\"; // 确保在此处导入 h 函数\n\nexport default {\n  name: \"D3Runner\",\n  data() {\n    return {\n      d3Code: this.$route.query.code || \"\",\n      // 存储用户输入的 D3.js 代码\n      pictureUrl: this.$route.query.picture || \"\",\n      // 存储图片URL\n      noteId: this.$route.query.id || null // 从路由获取 noteId，若无则为新建\n    };\n  },\n\n  created() {\n    if (this.noteId) {\n      this.fetchNoteDetails();\n    }\n  },\n  methods: {\n    fetchNoteDetails() {\n      // 将请求 URL 修改为路径变量形式\n      this.$request.get(`/notes/selectById/${this.noteId}`).then(res => {\n        if (res.code === '200' && res.data) {\n          this.d3Code = res.data.code || \"\"; // 将 code 放入 d3Code\n          this.pictureUrl = res.data.picture || \"\"; // 将图片 URL 放入 pictureUrl\n        } else {\n          this.$message.error(res.msg || '无法加载Note详情');\n        }\n      }).catch(error => {\n        console.error(\"获取 Note 详情失败:\", error);\n        this.$message.error('获取 Note 详情失败');\n      });\n    },\n    methods: {\n      async runD3Code() {\n        const svgContainer = this.$refs.d3Output;\n\n        // 清空以前的图像\n        while (svgContainer.firstChild) {\n          svgContainer.removeChild(svgContainer.firstChild);\n        }\n        try {\n          let data;\n          if (this.d3Code.includes('FileAttachment')) {\n            // 模拟 FileAttachment 进行数据加载\n            const regex = /FileAttachment\\(\"(.+?)\"\\)\\.csv/;\n            const match = this.d3Code.match(regex);\n            if (match) {\n              const fileName = match[1];\n              const response = await axios.get(`/path/to/your/data/${fileName}`);\n              data = d3.csvParse(response.data);\n            } else {\n              alert(\"未找到有效的 FileAttachment 数据源，请检查代码。\");\n              return;\n            }\n          }\n          if (this.d3Code.includes('Plot')) {\n            // 处理 Plot 代码\n            const userFunc = new Function('Plot', 'data', 'container', 'Inputs', `\n          const bins = Inputs.range([3, 20], {step: 1, label: \"Bins\"});\n          const plot = Plot.plot({\n            marks: [\n              Plot.ruleY([0]),\n              Plot.rectY(data, Plot.binX({y: \"sum\"}, {x: \"flipper_length_mm\", thresholds: bins}))\n            ]\n          });\n          container.appendChild(plot);\n        `);\n            userFunc(Plot, data, svgContainer, Inputs); // 数据和阈值输入通过这里传入\n          } else {\n            // 处理普通的 d3.js 代码\n            const userFunc = new Function('d3', 'container', this.d3Code);\n            userFunc(d3, svgContainer);\n          }\n        } catch (error) {\n          console.error(\"代码执行出错:\", error);\n          alert(\"代码执行出错，请检查代码。\");\n        }\n      }\n    },\n    saveD3Output() {\n      const svgElement = this.$refs.d3Output.querySelector('svg');\n      if (!svgElement) {\n        alert(\"没有可保存的 D3.js 图形，请先运行代码。\");\n        return;\n      }\n\n      // 将 SVG 转换为 PNG 图片\n      const svgData = new XMLSerializer().serializeToString(svgElement);\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d');\n      const img = new Image();\n      const svgBlob = new Blob([svgData], {\n        type: 'image/svg+xml;charset=utf-8'\n      });\n      const url = URL.createObjectURL(svgBlob);\n      img.onload = () => {\n        // 设置 canvas 大小与 SVG 一致\n        canvas.width = img.width;\n        canvas.height = img.height;\n\n        // 将 SVG 绘制到 canvas 上\n        ctx.drawImage(img, 0, 0);\n\n        // 将 canvas 转换为 PNG\n        canvas.toBlob(blob => {\n          const formData = new FormData();\n          formData.append('file', blob, 'd3-output.png');\n\n          // 上传图片到服务器\n          axios.post(this.$baseUrl + '/files/upload', formData).then(response => {\n            const pictureUrl = response.data.data;\n            console.log('Picture URL:', pictureUrl); // 调试输出\n            // 保存或者更新 notes\n            const noteData = {\n              id: this.noteId,\n              comment: 'D3.js 图形',\n              code: this.d3Code,\n              picture: pictureUrl\n            };\n            this.$request({\n              method: this.noteId ? 'put' : 'post',\n              url: this.noteId ? '/notes/update' : '/notes/add',\n              data: noteData\n            }).then(res => {\n              if (res.code === '200') {\n                this.$message.success(this.noteId ? 'Note 更新成功' : 'Note 创建成功');\n              } else {\n                this.$message.error(res.msg || '操作失败');\n              }\n            }).catch(error => {\n              console.error(this.noteId ? '更新 Note 失败:' : '创建 Note 失败:', error);\n              this.$message.error('操作失败，请稍后再试');\n            });\n          }).catch(error => {\n            console.error(\"上传图片失败:\", error);\n          });\n        });\n      };\n      img.src = url; // 触发图像加载\n    }\n  }\n};","map":{"version":3,"names":["d3","axios","Plot","h","name","data","d3Code","$route","query","code","pictureUrl","picture","noteId","id","created","fetchNoteDetails","methods","$request","get","then","res","$message","error","msg","catch","console","runD3Code","svgContainer","$refs","d3Output","firstChild","removeChild","includes","regex","match","fileName","response","csvParse","alert","userFunc","Function","Inputs","saveD3Output","svgElement","querySelector","svgData","XMLSerializer","serializeToString","canvas","document","createElement","ctx","getContext","img","Image","svgBlob","Blob","type","url","URL","createObjectURL","onload","width","height","drawImage","toBlob","blob","formData","FormData","append","post","$baseUrl","log","noteData","comment","method","success","src"],"sources":["src/views/manager/D3Runner.vue"],"sourcesContent":["<template>\r\n  <div class=\"d3-runner-container\">\r\n    <h3>D3.js 绘图页面</h3>\r\n    <textarea v-model=\"d3Code\" rows=\"10\" placeholder=\"输入 D3.js 代码\"></textarea>\r\n    <button @click=\"runD3Code\">运行代码</button>\r\n    <button @click=\"saveD3Output\">保存</button>\r\n    <div ref=\"d3Output\" class=\"d3-output\"></div>\r\n\r\n    <!-- 显示图片 -->\r\n    <div v-if=\"pictureUrl\" class=\"note-picture\">\r\n      <img :src=\"pictureUrl\" alt=\"D3 Output\" style=\"max-width: 100%; margin-top: 10px;\">\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as d3 from 'd3';\r\nimport axios from 'axios';\r\nimport * as Plot from '@observablehq/plot'; // 导入 Plot\r\nimport { h } from \"vue\";  // 确保在此处导入 h 函数\r\n\r\nexport default {\r\n  name: \"D3Runner\",\r\n  data() {\r\n    return {\r\n      d3Code: this.$route.query.code ||\"\", // 存储用户输入的 D3.js 代码\r\n      pictureUrl: this.$route.query.picture ||\"\", // 存储图片URL\r\n      noteId: this.$route.query.id || null, // 从路由获取 noteId，若无则为新建\r\n    };\r\n  },\r\n  created() {\r\n    if (this.noteId) {\r\n      this.fetchNoteDetails();\r\n    }\r\n  },\r\n  methods: {\r\n    fetchNoteDetails() {\r\n  // 将请求 URL 修改为路径变量形式\r\n      this.$request.get(`/notes/selectById/${this.noteId}`)\r\n        .then(res => {\r\n          if (res.code === '200' && res.data) {\r\n            this.d3Code = res.data.code || \"\"; // 将 code 放入 d3Code\r\n            this.pictureUrl = res.data.picture || \"\"; // 将图片 URL 放入 pictureUrl\r\n          } else {\r\n            this.$message.error(res.msg || '无法加载Note详情');\r\n          }\r\n        })\r\n        .catch(error => {\r\n          console.error(\"获取 Note 详情失败:\", error);\r\n          this.$message.error('获取 Note 详情失败');\r\n        });\r\n    },\r\n    methods: {\r\n  async runD3Code() {\r\n    const svgContainer = this.$refs.d3Output;\r\n\r\n    // 清空以前的图像\r\n    while (svgContainer.firstChild) {\r\n      svgContainer.removeChild(svgContainer.firstChild);\r\n    }\r\n\r\n    try {\r\n      let data;\r\n      if (this.d3Code.includes('FileAttachment')) {\r\n        // 模拟 FileAttachment 进行数据加载\r\n        const regex = /FileAttachment\\(\"(.+?)\"\\)\\.csv/;\r\n        const match = this.d3Code.match(regex);\r\n        if (match) {\r\n          const fileName = match[1];\r\n          const response = await axios.get(`/path/to/your/data/${fileName}`);\r\n          data = d3.csvParse(response.data);\r\n        } else {\r\n          alert(\"未找到有效的 FileAttachment 数据源，请检查代码。\");\r\n          return;\r\n        }\r\n      }\r\n\r\n      if (this.d3Code.includes('Plot')) {\r\n        // 处理 Plot 代码\r\n        const userFunc = new Function('Plot', 'data', 'container', 'Inputs', `\r\n          const bins = Inputs.range([3, 20], {step: 1, label: \"Bins\"});\r\n          const plot = Plot.plot({\r\n            marks: [\r\n              Plot.ruleY([0]),\r\n              Plot.rectY(data, Plot.binX({y: \"sum\"}, {x: \"flipper_length_mm\", thresholds: bins}))\r\n            ]\r\n          });\r\n          container.appendChild(plot);\r\n        `);\r\n        userFunc(Plot, data, svgContainer, Inputs); // 数据和阈值输入通过这里传入\r\n      } else {\r\n        // 处理普通的 d3.js 代码\r\n        const userFunc = new Function('d3', 'container', this.d3Code);\r\n        userFunc(d3, svgContainer);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"代码执行出错:\", error);\r\n      alert(\"代码执行出错，请检查代码。\");\r\n    }\r\n  }\r\n}\r\n,\r\n\r\n    saveD3Output() {\r\n      const svgElement = this.$refs.d3Output.querySelector('svg');\r\n\r\n      if (!svgElement) {\r\n        alert(\"没有可保存的 D3.js 图形，请先运行代码。\");\r\n        return;\r\n      }\r\n\r\n      // 将 SVG 转换为 PNG 图片\r\n      const svgData = new XMLSerializer().serializeToString(svgElement);\r\n      const canvas = document.createElement('canvas');\r\n      const ctx = canvas.getContext('2d');\r\n      const img = new Image();\r\n\r\n      const svgBlob = new Blob([svgData], { type: 'image/svg+xml;charset=utf-8' });\r\n      const url = URL.createObjectURL(svgBlob);\r\n\r\n      img.onload = () => {\r\n        // 设置 canvas 大小与 SVG 一致\r\n        canvas.width = img.width;\r\n        canvas.height = img.height;\r\n\r\n        // 将 SVG 绘制到 canvas 上\r\n        ctx.drawImage(img, 0, 0);\r\n\r\n        // 将 canvas 转换为 PNG\r\n        canvas.toBlob((blob) => {\r\n          const formData = new FormData();\r\n          formData.append('file', blob, 'd3-output.png');\r\n\r\n          // 上传图片到服务器\r\n          axios.post(this.$baseUrl + '/files/upload', formData)\r\n            .then(response => {\r\n              const pictureUrl = response.data.data;\r\n              console.log('Picture URL:', pictureUrl); // 调试输出\r\n              // 保存或者更新 notes\r\n              const noteData = {\r\n                id: this.noteId,\r\n                comment: 'D3.js 图形',\r\n                code: this.d3Code,\r\n                picture: pictureUrl\r\n              };\r\n\r\n              this.$request({\r\n                method: this.noteId ? 'put' : 'post',\r\n                url: this.noteId ? '/notes/update' : '/notes/add',\r\n                data: noteData\r\n              }).then(res => {\r\n                if (res.code === '200') {\r\n                  this.$message.success(this.noteId ? 'Note 更新成功' : 'Note 创建成功');\r\n                } else {\r\n                  this.$message.error(res.msg || '操作失败');\r\n                }\r\n              }).catch(error => {\r\n                console.error(this.noteId ? '更新 Note 失败:' : '创建 Note 失败:', error);\r\n                this.$message.error('操作失败，请稍后再试');\r\n              });\r\n\r\n            })\r\n            .catch(error => {\r\n              console.error(\"上传图片失败:\", error);\r\n            });\r\n        });\r\n      };\r\n\r\n      img.src = url; // 触发图像加载\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\ntextarea {\r\n  width: 100%;\r\n  padding: 10px;\r\n  margin-bottom: 10px;\r\n  font-family: monospace;\r\n  font-size: 14px;\r\n}\r\n\r\n.d3-output {\r\n  border: 1px solid #ddd;\r\n  padding: 10px;\r\n  margin-top: 10px;\r\n  min-height: 300px;\r\n}\r\n\r\nbutton {\r\n  margin-right: 10px;\r\n}\r\n\r\n.note-picture img {\r\n  max-width: 100%;\r\n  margin-top: 10px;\r\n}\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}