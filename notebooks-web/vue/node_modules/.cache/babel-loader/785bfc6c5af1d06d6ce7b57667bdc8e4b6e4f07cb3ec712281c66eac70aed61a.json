{"ast":null,"code":"import \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport * as d3 from 'd3';\nimport axios from 'axios';\nimport * as Plot from '@observablehq/plot'; // 导入 Plot\nimport { h } from \"vue\"; // 确保在此处导入 h 函数\n\nexport default {\n  name: \"D3Runner\",\n  data() {\n    return {\n      d3Code: this.$route.query.code || \"\",\n      // 存储用户输入的 D3.js 代码\n      pictureUrl: this.$route.query.picture || \"\",\n      // 存储图片URL\n      noteId: this.$route.query.id || null // 从路由获取 noteId，若无则为新建\n    };\n  },\n\n  created() {\n    if (this.noteId) {\n      this.fetchNoteDetails();\n    }\n  },\n  methods: {\n    fetchNoteDetails() {\n      // 将请求 URL 修改为路径变量形式\n      this.$request.get(`/notes/selectById/${this.noteId}`).then(res => {\n        if (res.code === '200' && res.data) {\n          this.d3Code = res.data.code || \"\"; // 将 code 放入 d3Code\n          this.pictureUrl = res.data.picture || \"\"; // 将图片 URL 放入 pictureUrl\n        } else {\n          this.$message.error(res.msg || '无法加载Note详情');\n        }\n      }).catch(error => {\n        console.error(\"获取 Note 详情失败:\", error);\n        this.$message.error('获取 Note 详情失败');\n      });\n    },\n    runD3Code() {\n      const svgContainer = this.$refs.d3Output;\n\n      // 清空以前的图像\n      while (svgContainer.firstChild) {\n        svgContainer.removeChild(svgContainer.firstChild);\n      }\n\n      // 运行用户输入的代码\n      try {\n        if (this.d3Code.includes('Plot')) {\n          if (this.d3Code.includes('data')) {\n            function parseCSV(csvData, delimiter = ',') {\n              const rows = csvData.trim().split('\\n');\n              const headers = rows[0].split(delimiter).map(header => header.trim());\n              const data = rows.slice(1).map(row => {\n                const values = row.split(delimiter).map(value => value.trim());\n                const obj = {};\n                headers.forEach((header, index) => {\n                  obj[header] = isNaN(values[index]) ? values[index] : parseFloat(values[index]);\n                });\n                return obj;\n              });\n              return data;\n            }\n            const filenameMatch = this.d3Code.match(/data\\s*=\\s*\"([^\"]+)\"/);\n            const filename = filenameMatch ? filenameMatch[1] : null;\n            const code = this.d3Code.split('\\n').slice(1).join('\\n').trim();\n            console.log('filename:', filename); // 调试输出\n            console.log('code:', code); // 调试输出\n            // 确保在请求成功后再调用 userFunc\n\n            const fileUrl = 'http://localhost:9090' + '/files/' + filename;\n            console.log('fileUrl:', fileUrl); // 调试输出\n            axios.get(fileUrl).then(response => {\n              console.log('CSV data:', response.data); // 调试输出\n              const csvdata = parseCSV(response.data, ',');\n              console.log('CSV data:', csvdata); // 调试输出\n              console.log(`Generated function code: const plot = Plot.plot(${code});`);\n              const userFunc = new Function('Plot', 'container', 'data', `\n                  const plot = Plot.plot({${code}});\n                  container.appendChild(plot);\n                `);\n              userFunc(Plot, svgContainer, csvdata); // 在这里调用 userFunc，确保 csvdata 已赋值\n            }).catch(error => {\n              console.error('Error fetching CSV data:', error); // 错误处理\n            });\n          } else {\n            // 包装用户输入的代码\n            const userFunc = new Function('Plot', 'container', `const plot = Plot.plot(${this.d3Code});\n              container.appendChild(plot);`);\n            userFunc(Plot, svgContainer);\n          }\n        } else {\n          const userFunc = new Function('d3', 'container', this.d3Code);\n          userFunc(d3, svgContainer);\n        }\n      } catch (error) {\n        console.error(\"代码执行出错:\", error);\n        alert(\"代码执行出错，请检查代码。\");\n      }\n    },\n    saveD3Output() {\n      const svgElement = this.$refs.d3Output.querySelector('svg');\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d');\n\n      // 检查是否有可保存的 SVG\n      if (!svgElement) {\n        // 如果没有 SVG，则绘制“不存在”的图像\n        canvas.width = 200; // 可以根据需要调整大小\n        canvas.height = 100;\n\n        // 设置背景色和字体样式\n        ctx.fillStyle = 'white';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n        ctx.fillStyle = 'black';\n        ctx.font = '20px Arial';\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        ctx.fillText('图形为动态图，请在笔记内查看', canvas.width / 2, canvas.height / 2);\n      } else {\n        // 将 SVG 转换为 PNG 图片\n        const svgData = new XMLSerializer().serializeToString(svgElement);\n        const svgBlob = new Blob([svgData], {\n          type: 'image/svg+xml;charset=utf-8'\n        });\n        const url = URL.createObjectURL(svgBlob);\n        const img = new Image();\n        img.onload = () => {\n          // 设置 canvas 大小与 SVG 一致\n          canvas.width = img.width;\n          canvas.height = img.height;\n\n          // 将 SVG 绘制到 canvas 上\n          ctx.drawImage(img, 0, 0);\n        };\n        img.src = url; // 触发图像加载\n      }\n\n      // 将 canvas 转换为 PNG\n      canvas.toBlob(blob => {\n        const formData = new FormData();\n        formData.append('file', blob, 'd3-output.png');\n\n        // 上传图片到服务器\n        axios.post(this.$baseUrl + '/files/upload', formData).then(response => {\n          const pictureUrl = response.data.data;\n          console.log('Picture URL:', pictureUrl); // 调试输出\n          // 保存或者更新 notes\n          const noteData = {\n            id: this.noteId,\n            comment: 'D3.js 图形',\n            code: this.d3Code,\n            picture: pictureUrl\n          };\n          this.$request({\n            method: this.noteId ? 'put' : 'post',\n            url: this.noteId ? '/notes/update' : '/notes/add',\n            data: noteData\n          }).then(res => {\n            if (res.code === '200') {\n              this.$message.success(this.noteId ? 'Note 更新成功' : 'Note 创建成功');\n            } else {\n              this.$message.error(res.msg || '操作失败');\n            }\n          }).catch(error => {\n            console.error(this.noteId ? '更新 Note 失败:' : '创建 Note 失败:', error);\n            this.$message.error('操作失败，请稍后再试');\n          });\n        }).catch(error => {\n          console.error(\"上传图片失败:\", error);\n        });\n      });\n    },\n    openInteractiveChart() {\n      const newWindow = window.open(\"\", \"_blank\");\n      newWindow.document.write(this.d3Code); // 确保这一行有结束的反引号\n      newWindow.document.close(); // 关闭文档流\n    }\n  }\n};","map":{"version":3,"names":["d3","axios","Plot","h","name","data","d3Code","$route","query","code","pictureUrl","picture","noteId","id","created","fetchNoteDetails","methods","$request","get","then","res","$message","error","msg","catch","console","runD3Code","svgContainer","$refs","d3Output","firstChild","removeChild","includes","parseCSV","csvData","delimiter","rows","trim","split","headers","map","header","slice","row","values","value","obj","forEach","index","isNaN","parseFloat","filenameMatch","match","filename","join","log","fileUrl","response","csvdata","userFunc","Function","alert","saveD3Output","svgElement","querySelector","canvas","document","createElement","ctx","getContext","width","height","fillStyle","fillRect","font","textAlign","textBaseline","fillText","svgData","XMLSerializer","serializeToString","svgBlob","Blob","type","url","URL","createObjectURL","img","Image","onload","drawImage","src","toBlob","blob","formData","FormData","append","post","$baseUrl","noteData","comment","method","success","openInteractiveChart","newWindow","window","open","write","close"],"sources":["src/views/manager/D3Runner.vue"],"sourcesContent":["<template>\r\n  <div class=\"d3-runner-container\">\r\n    <h3>D3.js 绘图页面</h3>\r\n    <textarea v-model=\"d3Code\" rows=\"10\" placeholder=\"输入 D3.js 代码\"></textarea>\r\n    <button @click=\"runD3Code\">运行代码</button>\r\n    <button @click=\"openInteractiveChart\">查看互动图</button> <!-- 新增按钮 -->\r\n    <button @click=\"saveD3Output\">保存</button>\r\n    <div ref=\"d3Output\" class=\"d3-output\"></div>\r\n\r\n    <!-- 显示图片 -->\r\n    <div v-if=\"pictureUrl\" class=\"note-picture\">\r\n      <img :src=\"pictureUrl\" alt=\"D3 Output\" style=\"max-width: 100%; margin-top: 10px;\">\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as d3 from 'd3';\r\nimport axios from 'axios';\r\nimport * as Plot from '@observablehq/plot'; // 导入 Plot\r\nimport { h } from \"vue\";  // 确保在此处导入 h 函数\r\n\r\nexport default {\r\n  name: \"D3Runner\",\r\n  data() {\r\n    return {\r\n      d3Code: this.$route.query.code || \"\", // 存储用户输入的 D3.js 代码\r\n      pictureUrl: this.$route.query.picture || \"\", // 存储图片URL\r\n      noteId: this.$route.query.id || null, // 从路由获取 noteId，若无则为新建\r\n    };\r\n  },\r\n  created() {\r\n    if (this.noteId) {\r\n      this.fetchNoteDetails();\r\n    }\r\n  },\r\n  methods: {\r\n    fetchNoteDetails() {\r\n      // 将请求 URL 修改为路径变量形式\r\n      this.$request.get(`/notes/selectById/${this.noteId}`)\r\n        .then(res => {\r\n          if (res.code === '200' && res.data) {\r\n            this.d3Code = res.data.code || \"\"; // 将 code 放入 d3Code\r\n            this.pictureUrl = res.data.picture || \"\"; // 将图片 URL 放入 pictureUrl\r\n          } else {\r\n            this.$message.error(res.msg || '无法加载Note详情');\r\n          }\r\n        })\r\n        .catch(error => {\r\n          console.error(\"获取 Note 详情失败:\", error);\r\n          this.$message.error('获取 Note 详情失败');\r\n        });\r\n    },\r\n    runD3Code() {\r\n      const svgContainer = this.$refs.d3Output;\r\n\r\n      // 清空以前的图像\r\n      while (svgContainer.firstChild) {\r\n        svgContainer.removeChild(svgContainer.firstChild);\r\n      }\r\n\r\n      // 运行用户输入的代码\r\n      try {\r\n        if (this.d3Code.includes('Plot')) {\r\n          if (this.d3Code.includes('data')) {\r\n            function parseCSV(csvData, delimiter = ',') {\r\n              const rows = csvData.trim().split('\\n');\r\n              const headers = rows[0].split(delimiter).map(header => header.trim());\r\n\r\n              const data = rows.slice(1).map(row => {\r\n                const values = row.split(delimiter).map(value => value.trim());\r\n                const obj = {};\r\n\r\n                headers.forEach((header, index) => {\r\n                  obj[header] = isNaN(values[index]) ? values[index] : parseFloat(values[index]);\r\n                });\r\n\r\n                return obj;\r\n              });\r\n\r\n              return data;\r\n            }\r\n\r\n            const filenameMatch = this.d3Code.match(/data\\s*=\\s*\"([^\"]+)\"/);\r\n            const filename = filenameMatch ? filenameMatch[1] : null;\r\n            const code = this.d3Code.split('\\n').slice(1).join('\\n').trim();\r\n            console.log('filename:', filename); // 调试输出\r\n            console.log('code:', code); // 调试输出\r\n            // 确保在请求成功后再调用 userFunc\r\n\r\n            const fileUrl = 'http://localhost:9090' + '/files/' + filename;\r\n            console.log('fileUrl:', fileUrl); // 调试输出\r\n            axios.get(fileUrl)\r\n              .then(response => {\r\n                console.log('CSV data:', response.data); // 调试输出\r\n                const csvdata = parseCSV(response.data, ',');\r\n                console.log('CSV data:', csvdata); // 调试输出\r\n                console.log(`Generated function code: const plot = Plot.plot(${code});`);\r\n\r\n                const userFunc = new Function('Plot', 'container', 'data', `\r\n                  const plot = Plot.plot({${code}});\r\n                  container.appendChild(plot);\r\n                `);\r\n                userFunc(Plot, svgContainer, csvdata); // 在这里调用 userFunc，确保 csvdata 已赋值\r\n              })\r\n              .catch(error => {\r\n                console.error('Error fetching CSV data:', error); // 错误处理\r\n              });\r\n\r\n          } else {\r\n            // 包装用户输入的代码\r\n            const userFunc = new Function('Plot', 'container',\r\n              `const plot = Plot.plot(${this.d3Code});\r\n              container.appendChild(plot);`\r\n            );\r\n            userFunc(Plot, svgContainer);\r\n          }\r\n\r\n        } else {\r\n          const userFunc = new Function('d3', 'container', this.d3Code);\r\n          userFunc(d3, svgContainer);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"代码执行出错:\", error);\r\n        alert(\"代码执行出错，请检查代码。\");\r\n      }\r\n    },\r\n\r\n    saveD3Output() {\r\n  const svgElement = this.$refs.d3Output.querySelector('svg');\r\n  const canvas = document.createElement('canvas');\r\n  const ctx = canvas.getContext('2d');\r\n  \r\n  // 检查是否有可保存的 SVG\r\n  if (!svgElement) {\r\n    // 如果没有 SVG，则绘制“不存在”的图像\r\n    canvas.width = 200; // 可以根据需要调整大小\r\n    canvas.height = 100;\r\n\r\n    // 设置背景色和字体样式\r\n    ctx.fillStyle = 'white';\r\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n    ctx.fillStyle = 'black';\r\n    ctx.font = '20px Arial';\r\n    ctx.textAlign = 'center';\r\n    ctx.textBaseline = 'middle';\r\n    ctx.fillText('图形为动态图，请在笔记内查看', canvas.width / 2, canvas.height / 2);\r\n  } else {\r\n    // 将 SVG 转换为 PNG 图片\r\n    const svgData = new XMLSerializer().serializeToString(svgElement);\r\n    const svgBlob = new Blob([svgData], { type: 'image/svg+xml;charset=utf-8' });\r\n    const url = URL.createObjectURL(svgBlob);\r\n    const img = new Image();\r\n\r\n    img.onload = () => {\r\n      // 设置 canvas 大小与 SVG 一致\r\n      canvas.width = img.width;\r\n      canvas.height = img.height;\r\n\r\n      // 将 SVG 绘制到 canvas 上\r\n      ctx.drawImage(img, 0, 0);\r\n    };\r\n\r\n    img.src = url; // 触发图像加载\r\n  }\r\n\r\n  // 将 canvas 转换为 PNG\r\n  canvas.toBlob((blob) => {\r\n    const formData = new FormData();\r\n    formData.append('file', blob, 'd3-output.png');\r\n\r\n    // 上传图片到服务器\r\n    axios.post(this.$baseUrl + '/files/upload', formData)\r\n      .then(response => {\r\n        const pictureUrl = response.data.data;\r\n        console.log('Picture URL:', pictureUrl); // 调试输出\r\n        // 保存或者更新 notes\r\n        const noteData = {\r\n          id: this.noteId,\r\n          comment: 'D3.js 图形',\r\n          code: this.d3Code,\r\n          picture: pictureUrl\r\n        };\r\n\r\n        this.$request({\r\n          method: this.noteId ? 'put' : 'post',\r\n          url: this.noteId ? '/notes/update' : '/notes/add',\r\n          data: noteData\r\n        }).then(res => {\r\n          if (res.code === '200') {\r\n            this.$message.success(this.noteId ? 'Note 更新成功' : 'Note 创建成功');\r\n          } else {\r\n            this.$message.error(res.msg || '操作失败');\r\n          }\r\n        }).catch(error => {\r\n          console.error(this.noteId ? '更新 Note 失败:' : '创建 Note 失败:', error);\r\n          this.$message.error('操作失败，请稍后再试');\r\n        });\r\n      })\r\n      .catch(error => {\r\n        console.error(\"上传图片失败:\", error);\r\n      });\r\n  });\r\n}\r\n,\r\n    openInteractiveChart() {\r\n  const newWindow = window.open(\"\", \"_blank\");\r\n  newWindow.document.write(this.d3Code); // 确保这一行有结束的反引号\r\n  newWindow.document.close(); // 关闭文档流\r\n}\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\ntextarea {\r\n  width: 100%;\r\n  padding: 10px;\r\n  margin-bottom: 10px;\r\n  font-family: monospace;\r\n  font-size: 14px;\r\n}\r\n\r\n.d3-runner-container {\r\n  background-color: white; /* 设置背景颜色为白色 */\r\n  padding: 20px; /* 可选：添加一些内边距 */\r\n  border-radius: 8px; /* 可选：圆角 */\r\n}\r\n\r\n.d3-output {\r\n  border: 1px solid #ddd;\r\n  padding: 10px;\r\n  margin-top: 10px;\r\n  min-height: 300px;\r\n}\r\n\r\nbutton {\r\n  margin-right: 10px;\r\n}\r\n\r\n.note-picture img {\r\n  max-width: 100%;\r\n  margin-top: 10px;\r\n}\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}