{"ast":null,"code":"import { cluster as Cluster, tree as Tree } from \"d3\";\nimport { marks } from \"../mark.js\";\nimport { isNoneish } from \"../options.js\";\nimport { maybeTreeAnchor, treeLink, treeNode } from \"../transforms/tree.js\";\nimport { dot } from \"./dot.js\";\nimport { link } from \"./link.js\";\nimport { text } from \"./text.js\";\nimport { keyword } from \"../options.js\";\nexport function tree(data, {\n  fill,\n  stroke,\n  strokeWidth,\n  strokeOpacity,\n  strokeLinejoin,\n  strokeLinecap,\n  strokeMiterlimit,\n  strokeDasharray,\n  strokeDashoffset,\n  marker,\n  markerStart = marker,\n  markerEnd = marker,\n  dot: dotDot = isNoneish(markerStart) && isNoneish(markerEnd),\n  text: textText = \"node:name\",\n  textStroke = \"var(--plot-background)\",\n  title = \"node:path\",\n  dx,\n  dy,\n  textAnchor,\n  treeLayout = Tree,\n  textLayout = treeLayout === Tree || treeLayout === Cluster ? \"mirrored\" : \"normal\",\n  tip,\n  ...options\n} = {}) {\n  if (dx === undefined) dx = maybeTreeAnchor(options.treeAnchor).dx;\n  if (textAnchor !== undefined) throw new Error(\"textAnchor is not a configurable tree option\");\n  textLayout = keyword(textLayout, \"textLayout\", [\"mirrored\", \"normal\"]);\n  function treeText(textOptions) {\n    return text(data, treeNode({\n      treeLayout,\n      text: textText,\n      fill: fill === undefined ? \"currentColor\" : fill,\n      stroke: textStroke,\n      dx,\n      dy,\n      title,\n      ...textOptions,\n      ...options\n    }));\n  }\n  return marks(link(data, treeLink({\n    treeLayout,\n    markerStart,\n    markerEnd,\n    stroke: stroke !== undefined ? stroke : fill === undefined ? \"node:internal\" : fill,\n    strokeWidth,\n    strokeOpacity,\n    strokeLinejoin,\n    strokeLinecap,\n    strokeMiterlimit,\n    strokeDasharray,\n    strokeDashoffset,\n    ...options\n  })), dotDot ? dot(data, treeNode({\n    treeLayout,\n    fill: fill === undefined ? \"node:internal\" : fill,\n    title,\n    tip,\n    ...options\n  })) : null, textText != null ? textLayout === \"mirrored\" ? [treeText({\n    textAnchor: \"start\",\n    treeFilter: \"node:external\"\n  }), treeText({\n    textAnchor: \"end\",\n    treeFilter: \"node:internal\",\n    dx: -dx\n  })] : treeText() : null);\n}\nexport function cluster(data, options) {\n  return tree(data, {\n    ...options,\n    treeLayout: Cluster\n  });\n}","map":{"version":3,"names":["cluster","Cluster","tree","Tree","marks","isNoneish","maybeTreeAnchor","treeLink","treeNode","dot","link","text","keyword","data","fill","stroke","strokeWidth","strokeOpacity","strokeLinejoin","strokeLinecap","strokeMiterlimit","strokeDasharray","strokeDashoffset","marker","markerStart","markerEnd","dotDot","textText","textStroke","title","dx","dy","textAnchor","treeLayout","textLayout","tip","options","undefined","treeAnchor","Error","treeText","textOptions","treeFilter"],"sources":["D:/Notebooks/notebooks-web/vue/node_modules/@observablehq/plot/src/marks/tree.js"],"sourcesContent":["import {cluster as Cluster, tree as Tree} from \"d3\";\nimport {marks} from \"../mark.js\";\nimport {isNoneish} from \"../options.js\";\nimport {maybeTreeAnchor, treeLink, treeNode} from \"../transforms/tree.js\";\nimport {dot} from \"./dot.js\";\nimport {link} from \"./link.js\";\nimport {text} from \"./text.js\";\nimport {keyword} from \"../options.js\";\n\nexport function tree(\n  data,\n  {\n    fill,\n    stroke,\n    strokeWidth,\n    strokeOpacity,\n    strokeLinejoin,\n    strokeLinecap,\n    strokeMiterlimit,\n    strokeDasharray,\n    strokeDashoffset,\n    marker,\n    markerStart = marker,\n    markerEnd = marker,\n    dot: dotDot = isNoneish(markerStart) && isNoneish(markerEnd),\n    text: textText = \"node:name\",\n    textStroke = \"var(--plot-background)\",\n    title = \"node:path\",\n    dx,\n    dy,\n    textAnchor,\n    treeLayout = Tree,\n    textLayout = treeLayout === Tree || treeLayout === Cluster ? \"mirrored\" : \"normal\",\n    tip,\n    ...options\n  } = {}\n) {\n  if (dx === undefined) dx = maybeTreeAnchor(options.treeAnchor).dx;\n  if (textAnchor !== undefined) throw new Error(\"textAnchor is not a configurable tree option\");\n  textLayout = keyword(textLayout, \"textLayout\", [\"mirrored\", \"normal\"]);\n\n  function treeText(textOptions) {\n    return text(\n      data,\n      treeNode({\n        treeLayout,\n        text: textText,\n        fill: fill === undefined ? \"currentColor\" : fill,\n        stroke: textStroke,\n        dx,\n        dy,\n        title,\n        ...textOptions,\n        ...options\n      })\n    );\n  }\n\n  return marks(\n    link(\n      data,\n      treeLink({\n        treeLayout,\n        markerStart,\n        markerEnd,\n        stroke: stroke !== undefined ? stroke : fill === undefined ? \"node:internal\" : fill,\n        strokeWidth,\n        strokeOpacity,\n        strokeLinejoin,\n        strokeLinecap,\n        strokeMiterlimit,\n        strokeDasharray,\n        strokeDashoffset,\n        ...options\n      })\n    ),\n    dotDot\n      ? dot(data, treeNode({treeLayout, fill: fill === undefined ? \"node:internal\" : fill, title, tip, ...options}))\n      : null,\n    textText != null\n      ? textLayout === \"mirrored\"\n        ? [\n            treeText({textAnchor: \"start\", treeFilter: \"node:external\"}),\n            treeText({textAnchor: \"end\", treeFilter: \"node:internal\", dx: -dx})\n          ]\n        : treeText()\n      : null\n  );\n}\n\nexport function cluster(data, options) {\n  return tree(data, {...options, treeLayout: Cluster});\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}