{"ast":null,"code":"// Positional scales have associated axes, and for ordinal data, a point or band\n// scale is used instead of an ordinal scale.\nexport const position = Symbol(\"position\");\n\n// Color scales default to the turbo interpolator for quantitative data, and to\n// the Tableau10 scheme for ordinal data. Color scales may also have an\n// associated legend.\nexport const color = Symbol(\"color\");\n\n// Radius scales default to the sqrt type, have a default range of [0, 3], and a\n// default domain from 0 to the median first quartile of associated channels.\nexport const radius = Symbol(\"radius\");\n\n// Length scales default to the linear type, have a default range of [0, 12],\n// and a default domain from 0 to the median median of associated channels.\nexport const length = Symbol(\"length\");\n\n// Opacity scales have a default range of [0, 1], and a default domain from 0 to\n// the maximum value of associated channels.\nexport const opacity = Symbol(\"opacity\");\n\n// Symbol scales have a default range of categorical symbols.\nexport const symbol = Symbol(\"symbol\");\n\n// There isn’t really a projection scale; this represents x and y for geometry.\n// This is used to denote channels that should be projected.\nexport const projection = Symbol(\"projection\");\n\n// TODO Rather than hard-coding the list of known scale names, collect the names\n// and categories for each plot specification, so that custom marks can register\n// custom scales.\nexport const registry = new Map([[\"x\", position], [\"y\", position], [\"fx\", position], [\"fy\", position], [\"r\", radius], [\"color\", color], [\"opacity\", opacity], [\"symbol\", symbol], [\"length\", length], [\"projection\", projection]]);\nexport function isPosition(kind) {\n  return kind === position || kind === projection;\n}\nexport function hasNumericRange(kind) {\n  return kind === position || kind === radius || kind === length || kind === opacity;\n}","map":{"version":3,"names":["position","Symbol","color","radius","length","opacity","symbol","projection","registry","Map","isPosition","kind","hasNumericRange"],"sources":["D:/Notebooks/notebooks-web/vue/node_modules/@observablehq/plot/src/scales/index.js"],"sourcesContent":["// Positional scales have associated axes, and for ordinal data, a point or band\n// scale is used instead of an ordinal scale.\nexport const position = Symbol(\"position\");\n\n// Color scales default to the turbo interpolator for quantitative data, and to\n// the Tableau10 scheme for ordinal data. Color scales may also have an\n// associated legend.\nexport const color = Symbol(\"color\");\n\n// Radius scales default to the sqrt type, have a default range of [0, 3], and a\n// default domain from 0 to the median first quartile of associated channels.\nexport const radius = Symbol(\"radius\");\n\n// Length scales default to the linear type, have a default range of [0, 12],\n// and a default domain from 0 to the median median of associated channels.\nexport const length = Symbol(\"length\");\n\n// Opacity scales have a default range of [0, 1], and a default domain from 0 to\n// the maximum value of associated channels.\nexport const opacity = Symbol(\"opacity\");\n\n// Symbol scales have a default range of categorical symbols.\nexport const symbol = Symbol(\"symbol\");\n\n// There isn’t really a projection scale; this represents x and y for geometry.\n// This is used to denote channels that should be projected.\nexport const projection = Symbol(\"projection\");\n\n// TODO Rather than hard-coding the list of known scale names, collect the names\n// and categories for each plot specification, so that custom marks can register\n// custom scales.\nexport const registry = new Map([\n  [\"x\", position],\n  [\"y\", position],\n  [\"fx\", position],\n  [\"fy\", position],\n  [\"r\", radius],\n  [\"color\", color],\n  [\"opacity\", opacity],\n  [\"symbol\", symbol],\n  [\"length\", length],\n  [\"projection\", projection]\n]);\n\nexport function isPosition(kind) {\n  return kind === position || kind === projection;\n}\n\nexport function hasNumericRange(kind) {\n  return kind === position || kind === radius || kind === length || kind === opacity;\n}\n"],"mappings":"AAAA;AACA;AACA,OAAO,MAAMA,QAAQ,GAAGC,MAAM,CAAC,UAAU,CAAC;;AAE1C;AACA;AACA;AACA,OAAO,MAAMC,KAAK,GAAGD,MAAM,CAAC,OAAO,CAAC;;AAEpC;AACA;AACA,OAAO,MAAME,MAAM,GAAGF,MAAM,CAAC,QAAQ,CAAC;;AAEtC;AACA;AACA,OAAO,MAAMG,MAAM,GAAGH,MAAM,CAAC,QAAQ,CAAC;;AAEtC;AACA;AACA,OAAO,MAAMI,OAAO,GAAGJ,MAAM,CAAC,SAAS,CAAC;;AAExC;AACA,OAAO,MAAMK,MAAM,GAAGL,MAAM,CAAC,QAAQ,CAAC;;AAEtC;AACA;AACA,OAAO,MAAMM,UAAU,GAAGN,MAAM,CAAC,YAAY,CAAC;;AAE9C;AACA;AACA;AACA,OAAO,MAAMO,QAAQ,GAAG,IAAIC,GAAG,CAAC,CAC9B,CAAC,GAAG,EAAET,QAAQ,CAAC,EACf,CAAC,GAAG,EAAEA,QAAQ,CAAC,EACf,CAAC,IAAI,EAAEA,QAAQ,CAAC,EAChB,CAAC,IAAI,EAAEA,QAAQ,CAAC,EAChB,CAAC,GAAG,EAAEG,MAAM,CAAC,EACb,CAAC,OAAO,EAAED,KAAK,CAAC,EAChB,CAAC,SAAS,EAAEG,OAAO,CAAC,EACpB,CAAC,QAAQ,EAAEC,MAAM,CAAC,EAClB,CAAC,QAAQ,EAAEF,MAAM,CAAC,EAClB,CAAC,YAAY,EAAEG,UAAU,CAAC,CAC3B,CAAC;AAEF,OAAO,SAASG,UAAUA,CAACC,IAAI,EAAE;EAC/B,OAAOA,IAAI,KAAKX,QAAQ,IAAIW,IAAI,KAAKJ,UAAU;AACjD;AAEA,OAAO,SAASK,eAAeA,CAACD,IAAI,EAAE;EACpC,OAAOA,IAAI,KAAKX,QAAQ,IAAIW,IAAI,KAAKR,MAAM,IAAIQ,IAAI,KAAKP,MAAM,IAAIO,IAAI,KAAKN,OAAO;AACpF"},"metadata":{},"sourceType":"module","externalDependencies":[]}