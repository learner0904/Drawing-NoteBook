{"ast":null,"code":"// 在这里写你的 D3.js 代码\nconst data = {\n  name: \"root\",\n  children: [{\n    name: \"child1\",\n    value: 10\n  }, {\n    name: \"child2\",\n    children: [{\n      name: \"grandchild1\",\n      value: 5\n    }, {\n      name: \"grandchild2\",\n      value: 7\n    }]\n  }]\n};\nfunction runInteractiveD3(data) {\n  const width = 928;\n  const height = width;\n  const radius = width / 6;\n  const color = d3.scaleOrdinal(d3.quantize(d3.interpolateRainbow, data.children.length + 1));\n  const hierarchy = d3.hierarchy(data).sum(d => d.value).sort((a, b) => b.value - a.value);\n  const root = d3.partition().size([2 * Math.PI, hierarchy.height + 1])(hierarchy);\n  root.each(d => d.current = d);\n  const arc = d3.arc().startAngle(d => d.x0).endAngle(d => d.x1).padAngle(d => Math.min((d.x1 - d.x0) / 2, 0.005)).padRadius(radius * 1.5).innerRadius(d => d.y0 * radius).outerRadius(d => Math.max(d.y0 * radius, d.y1 * radius - 1));\n  const svg = d3.create(\"svg\").attr(\"viewBox\", [-width / 2, -height / 2, width, width]).style(\"font\", \"10px sans-serif\");\n  const path = svg.append(\"g\").selectAll(\"path\").data(root.descendants().slice(1)).join(\"path\").attr(\"fill\", d => {\n    while (d.depth > 1) d = d.parent;\n    return color(d.data.name);\n  }).attr(\"fill-opacity\", d => arcVisible(d.current) ? d.children ? 0.6 : 0.4 : 0).attr(\"pointer-events\", d => arcVisible(d.current) ? \"auto\" : \"none\").attr(\"d\", d => arc(d.current));\n  path.filter(d => d.children).style(\"cursor\", \"pointer\").on(\"click\", clicked);\n  const format = d3.format(\",d\");\n  path.append(\"title\").text(d => `${d.ancestors().map(d => d.data.name).reverse().join(\"/\")}\\n${format(d.value)}`);\n  const label = svg.append(\"g\").attr(\"pointer-events\", \"none\").attr(\"text-anchor\", \"middle\").style(\"user-select\", \"none\").selectAll(\"text\").data(root.descendants().slice(1)).join(\"text\").attr(\"dy\", \"0.35em\").attr(\"fill-opacity\", d => +labelVisible(d.current)).attr(\"transform\", d => labelTransform(d.current)).text(d => d.data.name);\n  const parent = svg.append(\"circle\").datum(root).attr(\"r\", radius).attr(\"fill\", \"none\").attr(\"pointer-events\", \"all\").on(\"click\", clicked);\n  function clicked(event, p) {\n    parent.datum(p.parent || root);\n    root.each(d => {\n      d.target = {\n        x0: Math.max(0, Math.min(1, (d.x0 - p.x0) / (p.x1 - p.x0))) * 2 * Math.PI,\n        x1: Math.max(0, Math.min(1, (d.x1 - p.x0) / (p.x1 - p.x0))) * 2 * Math.PI,\n        y0: Math.max(0, d.y0 - p.depth),\n        y1: Math.max(0, d.y1 - p.depth)\n      };\n    });\n    const t = svg.transition().duration(750);\n    path.transition(t).tween(\"data\", d => {\n      const i = d3.interpolate(d.current, d.target);\n      return t => d.current = i(t);\n    }).filter(function (d) {\n      return +this.getAttribute(\"fill-opacity\") || arcVisible(d.target);\n    }).attr(\"fill-opacity\", d => arcVisible(d.target) ? d.children ? 0.6 : 0.4 : 0).attr(\"pointer-events\", d => arcVisible(d.target) ? \"auto\" : \"none\").attrTween(\"d\", d => () => arc(d.current));\n    label.filter(function (d) {\n      return +this.getAttribute(\"fill-opacity\") || labelVisible(d.target);\n    }).transition(t).attr(\"fill-opacity\", d => +labelVisible(d.target)).attrTween(\"transform\", d => () => labelTransform(d.current));\n  }\n  function arcVisible(d) {\n    return d.y1 <= 3 && d.y0 >= 1 && d.x1 > d.x0;\n  }\n  function labelVisible(d) {\n    return d.y1 <= 3 && d.y0 >= 1 && (d.y1 - d.y0) * (d.x1 - d.x0) > 0.03;\n  }\n  function labelTransform(d) {\n    const x = (d.x0 + d.x1) / 2 * 180 / Math.PI;\n    const y = (d.y0 + d.y1) / 2 * radius;\n    return `rotate(${x - 90}) translate(${y},0) rotate(${x < 180 ? 0 : 180})`;\n  }\n  document.getElementById(\"chart\").appendChild(svg.node());\n}\nrunInteractiveD3(data);","map":{"version":3,"names":["data","name","children","value","runInteractiveD3","width","height","radius","color","d3","scaleOrdinal","quantize","interpolateRainbow","length","hierarchy","sum","d","sort","a","b","root","partition","size","Math","PI","each","current","arc","startAngle","x0","endAngle","x1","padAngle","min","padRadius","innerRadius","y0","outerRadius","max","y1","svg","create","attr","style","path","append","selectAll","descendants","slice","join","depth","parent","arcVisible","filter","on","clicked","format","text","ancestors","map","reverse","label","labelVisible","labelTransform","datum","event","p","target","t","transition","duration","tween","i","interpolate","getAttribute","attrTween","x","y","document","getElementById","appendChild","node"],"sources":["src/views/manager/D3Runner.vue"],"sourcesContent":["<template>\r\n  <div class=\"d3-runner-container\">\r\n    <h3>D3.js 绘图页面</h3>\r\n    <textarea v-model=\"d3Code\" rows=\"10\" placeholder=\"输入 D3.js 代码\"></textarea>\r\n    <button @click=\"runD3Code\">运行代码</button>\r\n    <button @click=\"openInteractiveChart\">查看互动图</button> <!-- 新增按钮 -->\r\n    <button @click=\"saveD3Output\">保存</button>\r\n    <div ref=\"d3Output\" class=\"d3-output\"></div>\r\n\r\n    <!-- 显示图片 -->\r\n    <div v-if=\"pictureUrl\" class=\"note-picture\">\r\n      <img :src=\"pictureUrl\" alt=\"D3 Output\" style=\"max-width: 100%; margin-top: 10px;\">\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as d3 from 'd3';\r\nimport axios from 'axios';\r\nimport * as Plot from '@observablehq/plot'; // 导入 Plot\r\nimport { h } from \"vue\";  // 确保在此处导入 h 函数\r\n\r\nexport default {\r\n  name: \"D3Runner\",\r\n  data() {\r\n    return {\r\n      d3Code: this.$route.query.code || \"\", // 存储用户输入的 D3.js 代码\r\n      pictureUrl: this.$route.query.picture || \"\", // 存储图片URL\r\n      noteId: this.$route.query.id || null, // 从路由获取 noteId，若无则为新建\r\n    };\r\n  },\r\n  created() {\r\n    if (this.noteId) {\r\n      this.fetchNoteDetails();\r\n    }\r\n  },\r\n  methods: {\r\n    fetchNoteDetails() {\r\n      // 将请求 URL 修改为路径变量形式\r\n      this.$request.get(`/notes/selectById/${this.noteId}`)\r\n        .then(res => {\r\n          if (res.code === '200' && res.data) {\r\n            this.d3Code = res.data.code || \"\"; // 将 code 放入 d3Code\r\n            this.pictureUrl = res.data.picture || \"\"; // 将图片 URL 放入 pictureUrl\r\n          } else {\r\n            this.$message.error(res.msg || '无法加载Note详情');\r\n          }\r\n        })\r\n        .catch(error => {\r\n          console.error(\"获取 Note 详情失败:\", error);\r\n          this.$message.error('获取 Note 详情失败');\r\n        });\r\n    },\r\n    runD3Code() {\r\n      const svgContainer = this.$refs.d3Output;\r\n\r\n      // 清空以前的图像\r\n      while (svgContainer.firstChild) {\r\n        svgContainer.removeChild(svgContainer.firstChild);\r\n      }\r\n\r\n      // 运行用户输入的代码\r\n      try {\r\n        if (this.d3Code.includes('Plot')) {\r\n          if (this.d3Code.includes('data')) {\r\n            function parseCSV(csvData, delimiter = ',') {\r\n              const rows = csvData.trim().split('\\n');\r\n              const headers = rows[0].split(delimiter).map(header => header.trim());\r\n\r\n              const data = rows.slice(1).map(row => {\r\n                const values = row.split(delimiter).map(value => value.trim());\r\n                const obj = {};\r\n\r\n                headers.forEach((header, index) => {\r\n                  obj[header] = isNaN(values[index]) ? values[index] : parseFloat(values[index]);\r\n                });\r\n\r\n                return obj;\r\n              });\r\n\r\n              return data;\r\n            }\r\n\r\n            const filenameMatch = this.d3Code.match(/data\\s*=\\s*\"([^\"]+)\"/);\r\n            const filename = filenameMatch ? filenameMatch[1] : null;\r\n            const code = this.d3Code.split('\\n').slice(1).join('\\n').trim();\r\n            console.log('filename:', filename); // 调试输出\r\n            console.log('code:', code); // 调试输出\r\n            // 确保在请求成功后再调用 userFunc\r\n\r\n            const fileUrl = 'http://localhost:9090' + '/files/' + filename;\r\n            console.log('fileUrl:', fileUrl); // 调试输出\r\n            axios.get(fileUrl)\r\n              .then(response => {\r\n                console.log('CSV data:', response.data); // 调试输出\r\n                const csvdata = parseCSV(response.data, ',');\r\n                console.log('CSV data:', csvdata); // 调试输出\r\n                console.log(`Generated function code: const plot = Plot.plot(${code});`);\r\n\r\n                const userFunc = new Function('Plot', 'container', 'data', `\r\n                  const plot = Plot.plot({${code}});\r\n                  container.appendChild(plot);\r\n                `);\r\n                userFunc(Plot, svgContainer, csvdata); // 在这里调用 userFunc，确保 csvdata 已赋值\r\n              })\r\n              .catch(error => {\r\n                console.error('Error fetching CSV data:', error); // 错误处理\r\n              });\r\n\r\n          } else {\r\n            // 包装用户输入的代码\r\n            const userFunc = new Function('Plot', 'container',\r\n              `const plot = Plot.plot(${this.d3Code});\r\n              container.appendChild(plot);`\r\n            );\r\n            userFunc(Plot, svgContainer);\r\n          }\r\n\r\n        } else {\r\n          const userFunc = new Function('d3', 'container', this.d3Code);\r\n          userFunc(d3, svgContainer);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"代码执行出错:\", error);\r\n        alert(\"代码执行出错，请检查代码。\");\r\n      }\r\n    },\r\n\r\n    saveD3Output() {\r\n      const svgElement = this.$refs.d3Output.querySelector('svg');\r\n\r\n      if (!svgElement) {\r\n        alert(\"没有可保存的 D3.js 图形，请先运行代码。\");\r\n        return;\r\n      }\r\n\r\n      // 将 SVG 转换为 PNG 图片\r\n      const svgData = new XMLSerializer().serializeToString(svgElement);\r\n      const canvas = document.createElement('canvas');\r\n      const ctx = canvas.getContext('2d');\r\n      const img = new Image();\r\n\r\n      const svgBlob = new Blob([svgData], { type: 'image/svg+xml;charset=utf-8' });\r\n      const url = URL.createObjectURL(svgBlob);\r\n\r\n      img.onload = () => {\r\n        // 设置 canvas 大小与 SVG 一致\r\n        canvas.width = img.width;\r\n        canvas.height = img.height;\r\n\r\n        // 将 SVG 绘制到 canvas 上\r\n        ctx.drawImage(img, 0, 0);\r\n\r\n        // 将 canvas 转换为 PNG\r\n        canvas.toBlob((blob) => {\r\n          const formData = new FormData();\r\n          formData.append('file', blob, 'd3-output.png');\r\n\r\n          // 上传图片到服务器\r\n          axios.post(this.$baseUrl + '/files/upload', formData)\r\n            .then(response => {\r\n              const pictureUrl = response.data.data;\r\n              console.log('Picture URL:', pictureUrl); // 调试输出\r\n              // 保存或者更新 notes\r\n              const noteData = {\r\n                id: this.noteId,\r\n                comment: 'D3.js 图形',\r\n                code: this.d3Code,\r\n                picture: pictureUrl\r\n              };\r\n\r\n              this.$request({\r\n                method: this.noteId ? 'put' : 'post',\r\n                url: this.noteId ? '/notes/update' : '/notes/add',\r\n                data: noteData\r\n              }).then(res => {\r\n                if (res.code === '200') {\r\n                  this.$message.success(this.noteId ? 'Note 更新成功' : 'Note 创建成功');\r\n                } else {\r\n                  this.$message.error(res.msg || '操作失败');\r\n                }\r\n              }).catch(error => {\r\n                console.error(this.noteId ? '更新 Note 失败:' : '创建 Note 失败:', error);\r\n                this.$message.error('操作失败，请稍后再试');\r\n              });\r\n\r\n            })\r\n            .catch(error => {\r\n              console.error(\"上传图片失败:\", error);\r\n            });\r\n        });\r\n      };\r\n\r\n      img.src = url; // 触发图像加载\r\n    },\r\n    openInteractiveChart() {\r\n  const newWindow = window.open(\"\", \"_blank\");\r\n  newWindow.document.write(`\r\n    <!DOCTYPE html>\r\n    <html lang=\"en\">\r\n    <head>\r\n      <meta charset=\"UTF-8\">\r\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n      <title>Interactive Chart</title>\r\n    </head>\r\n    <body>\r\n      <div id=\"chart\"></div>\r\n      <script src=\"https://d3js.org/d3.v6.min.js\"></script>\r\n      <script>\r\n        // 在这里写你的 D3.js 代码\r\n           const data = {\r\n      name: \"root\",\r\n      children: [\r\n        { name: \"child1\", value: 10 },\r\n        {\r\n          name: \"child2\",\r\n          children: [\r\n            { name: \"grandchild1\", value: 5 },\r\n            { name: \"grandchild2\", value: 7 }\r\n          ]\r\n        }\r\n      ]\r\n    };\r\n\r\n    function runInteractiveD3(data) {\r\n      const width = 928;\r\n      const height = width;\r\n      const radius = width / 6;\r\n\r\n      const color = d3.scaleOrdinal(d3.quantize(d3.interpolateRainbow, data.children.length + 1));\r\n\r\n      const hierarchy = d3.hierarchy(data).sum(d => d.value).sort((a, b) => b.value - a.value);\r\n      const root = d3.partition().size([2 * Math.PI, hierarchy.height + 1])(hierarchy);\r\n      root.each(d => (d.current = d));\r\n\r\n      const arc = d3\r\n        .arc()\r\n        .startAngle(d => d.x0)\r\n        .endAngle(d => d.x1)\r\n        .padAngle(d => Math.min((d.x1 - d.x0) / 2, 0.005))\r\n        .padRadius(radius * 1.5)\r\n        .innerRadius(d => d.y0 * radius)\r\n        .outerRadius(d => Math.max(d.y0 * radius, d.y1 * radius - 1));\r\n\r\n      const svg = d3\r\n        .create(\"svg\")\r\n        .attr(\"viewBox\", [-width / 2, -height / 2, width, width])\r\n        .style(\"font\", \"10px sans-serif\");\r\n\r\n      const path = svg\r\n        .append(\"g\")\r\n        .selectAll(\"path\")\r\n        .data(root.descendants().slice(1))\r\n        .join(\"path\")\r\n        .attr(\"fill\", d => {\r\n          while (d.depth > 1) d = d.parent;\r\n          return color(d.data.name);\r\n        })\r\n        .attr(\"fill-opacity\", d => (arcVisible(d.current) ? (d.children ? 0.6 : 0.4) : 0))\r\n        .attr(\"pointer-events\", d => (arcVisible(d.current) ? \"auto\" : \"none\"))\r\n        .attr(\"d\", d => arc(d.current));\r\n\r\n      path.filter(d => d.children).style(\"cursor\", \"pointer\").on(\"click\", clicked);\r\n\r\n      const format = d3.format(\",d\");\r\n      path.append(\"title\").text(d => `${d.ancestors().map(d => d.data.name).reverse().join(\"/\")}\\n${format(d.value)}`);\r\n\r\n      const label = svg\r\n        .append(\"g\")\r\n        .attr(\"pointer-events\", \"none\")\r\n        .attr(\"text-anchor\", \"middle\")\r\n        .style(\"user-select\", \"none\")\r\n        .selectAll(\"text\")\r\n        .data(root.descendants().slice(1))\r\n        .join(\"text\")\r\n        .attr(\"dy\", \"0.35em\")\r\n        .attr(\"fill-opacity\", d => +labelVisible(d.current))\r\n        .attr(\"transform\", d => labelTransform(d.current))\r\n        .text(d => d.data.name);\r\n\r\n      const parent = svg\r\n        .append(\"circle\")\r\n        .datum(root)\r\n        .attr(\"r\", radius)\r\n        .attr(\"fill\", \"none\")\r\n        .attr(\"pointer-events\", \"all\")\r\n        .on(\"click\", clicked);\r\n\r\n      function clicked(event, p) {\r\n        parent.datum(p.parent || root);\r\n        root.each(d => {\r\n          d.target = {\r\n            x0: Math.max(0, Math.min(1, (d.x0 - p.x0) / (p.x1 - p.x0))) * 2 * Math.PI,\r\n            x1: Math.max(0, Math.min(1, (d.x1 - p.x0) / (p.x1 - p.x0))) * 2 * Math.PI,\r\n            y0: Math.max(0, d.y0 - p.depth),\r\n            y1: Math.max(0, d.y1 - p.depth)\r\n          };\r\n        });\r\n\r\n        const t = svg.transition().duration(750);\r\n        path\r\n          .transition(t)\r\n          .tween(\"data\", d => {\r\n            const i = d3.interpolate(d.current, d.target);\r\n            return t => (d.current = i(t));\r\n          })\r\n          .filter(function(d) {\r\n            return +this.getAttribute(\"fill-opacity\") || arcVisible(d.target);\r\n          })\r\n          .attr(\"fill-opacity\", d => (arcVisible(d.target) ? (d.children ? 0.6 : 0.4) : 0))\r\n          .attr(\"pointer-events\", d => (arcVisible(d.target) ? \"auto\" : \"none\"))\r\n          .attrTween(\"d\", d => () => arc(d.current));\r\n\r\n        label\r\n          .filter(function(d) {\r\n            return +this.getAttribute(\"fill-opacity\") || labelVisible(d.target);\r\n          })\r\n          .transition(t)\r\n          .attr(\"fill-opacity\", d => +labelVisible(d.target))\r\n          .attrTween(\"transform\", d => () => labelTransform(d.current));\r\n      }\r\n\r\n      function arcVisible(d) {\r\n        return d.y1 <= 3 && d.y0 >= 1 && d.x1 > d.x0;\r\n      }\r\n\r\n      function labelVisible(d) {\r\n        return d.y1 <= 3 && d.y0 >= 1 && (d.y1 - d.y0) * (d.x1 - d.x0) > 0.03;\r\n      }\r\n\r\n      function labelTransform(d) {\r\n        const x = ((d.x0 + d.x1) / 2) * 180 / Math.PI;\r\n        const y = ((d.y0 + d.y1) / 2) * radius;\r\n        return `rotate(${x - 90}) translate(${y},0) rotate(${x < 180 ? 0 : 180})`;\r\n      }\r\n\r\n      document.getElementById(\"chart\").appendChild(svg.node());\r\n    }\r\n\r\n    runInteractiveD3(data);\r\n      </script>\r\n    </body>\r\n    </html>\r\n  `); // 确保这一行有结束的反引号\r\n  newWindow.document.close(); // 关闭文档流\r\n}\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\ntextarea {\r\n  width: 100%;\r\n  padding: 10px;\r\n  margin-bottom: 10px;\r\n  font-family: monospace;\r\n  font-size: 14px;\r\n}\r\n\r\n.d3-runner-container {\r\n  background-color: white; /* 设置背景颜色为白色 */\r\n  padding: 20px; /* 可选：添加一些内边距 */\r\n  border-radius: 8px; /* 可选：圆角 */\r\n}\r\n\r\n.d3-output {\r\n  border: 1px solid #ddd;\r\n  padding: 10px;\r\n  margin-top: 10px;\r\n  min-height: 300px;\r\n}\r\n\r\nbutton {\r\n  margin-right: 10px;\r\n}\r\n\r\n.note-picture img {\r\n  max-width: 100%;\r\n  margin-top: 10px;\r\n}\r\n</style>\r\n"],"mappings":"AAiNA;AACA,MAAAA,IAAA;EACAC,IAAA;EACAC,QAAA,GACA;IAAAD,IAAA;IAAAE,KAAA;EAAA,GACA;IACAF,IAAA;IACAC,QAAA,GACA;MAAAD,IAAA;MAAAE,KAAA;IAAA,GACA;MAAAF,IAAA;MAAAE,KAAA;IAAA;EAEA;AAEA;AAEA,SAAAC,iBAAAJ,IAAA;EACA,MAAAK,KAAA;EACA,MAAAC,MAAA,GAAAD,KAAA;EACA,MAAAE,MAAA,GAAAF,KAAA;EAEA,MAAAG,KAAA,GAAAC,EAAA,CAAAC,YAAA,CAAAD,EAAA,CAAAE,QAAA,CAAAF,EAAA,CAAAG,kBAAA,EAAAZ,IAAA,CAAAE,QAAA,CAAAW,MAAA;EAEA,MAAAC,SAAA,GAAAL,EAAA,CAAAK,SAAA,CAAAd,IAAA,EAAAe,GAAA,CAAAC,CAAA,IAAAA,CAAA,CAAAb,KAAA,EAAAc,IAAA,EAAAC,CAAA,EAAAC,CAAA,KAAAA,CAAA,CAAAhB,KAAA,GAAAe,CAAA,CAAAf,KAAA;EACA,MAAAiB,IAAA,GAAAX,EAAA,CAAAY,SAAA,GAAAC,IAAA,MAAAC,IAAA,CAAAC,EAAA,EAAAV,SAAA,CAAAR,MAAA,OAAAQ,SAAA;EACAM,IAAA,CAAAK,IAAA,CAAAT,CAAA,IAAAA,CAAA,CAAAU,OAAA,GAAAV,CAAA;EAEA,MAAAW,GAAA,GAAAlB,EAAA,CACAkB,GAAA,GACAC,UAAA,CAAAZ,CAAA,IAAAA,CAAA,CAAAa,EAAA,EACAC,QAAA,CAAAd,CAAA,IAAAA,CAAA,CAAAe,EAAA,EACAC,QAAA,CAAAhB,CAAA,IAAAO,IAAA,CAAAU,GAAA,EAAAjB,CAAA,CAAAe,EAAA,GAAAf,CAAA,CAAAa,EAAA,eACAK,SAAA,CAAA3B,MAAA,QACA4B,WAAA,CAAAnB,CAAA,IAAAA,CAAA,CAAAoB,EAAA,GAAA7B,MAAA,EACA8B,WAAA,CAAArB,CAAA,IAAAO,IAAA,CAAAe,GAAA,CAAAtB,CAAA,CAAAoB,EAAA,GAAA7B,MAAA,EAAAS,CAAA,CAAAuB,EAAA,GAAAhC,MAAA;EAEA,MAAAiC,GAAA,GAAA/B,EAAA,CACAgC,MAAA,QACAC,IAAA,cAAArC,KAAA,OAAAC,MAAA,MAAAD,KAAA,EAAAA,KAAA,GACAsC,KAAA;EAEA,MAAAC,IAAA,GAAAJ,GAAA,CACAK,MAAA,MACAC,SAAA,SACA9C,IAAA,CAAAoB,IAAA,CAAA2B,WAAA,GAAAC,KAAA,KACAC,IAAA,SACAP,IAAA,SAAA1B,CAAA;IACA,OAAAA,CAAA,CAAAkC,KAAA,MAAAlC,CAAA,GAAAA,CAAA,CAAAmC,MAAA;IACA,OAAA3C,KAAA,CAAAQ,CAAA,CAAAhB,IAAA,CAAAC,IAAA;EACA,GACAyC,IAAA,iBAAA1B,CAAA,IAAAoC,UAAA,CAAApC,CAAA,CAAAU,OAAA,IAAAV,CAAA,CAAAd,QAAA,kBACAwC,IAAA,mBAAA1B,CAAA,IAAAoC,UAAA,CAAApC,CAAA,CAAAU,OAAA,qBACAgB,IAAA,MAAA1B,CAAA,IAAAW,GAAA,CAAAX,CAAA,CAAAU,OAAA;EAEAkB,IAAA,CAAAS,MAAA,CAAArC,CAAA,IAAAA,CAAA,CAAAd,QAAA,EAAAyC,KAAA,sBAAAW,EAAA,UAAAC,OAAA;EAEA,MAAAC,MAAA,GAAA/C,EAAA,CAAA+C,MAAA;EACAZ,IAAA,CAAAC,MAAA,UAAAY,IAAA,CAAAzC,CAAA,OAAAA,CAAA,CAAA0C,SAAA,GAAAC,GAAA,CAAA3C,CAAA,IAAAA,CAAA,CAAAhB,IAAA,CAAAC,IAAA,EAAA2D,OAAA,GAAAX,IAAA,UAAAO,MAAA,CAAAxC,CAAA,CAAAb,KAAA;EAEA,MAAA0D,KAAA,GAAArB,GAAA,CACAK,MAAA,MACAH,IAAA,2BACAA,IAAA,0BACAC,KAAA,wBACAG,SAAA,SACA9C,IAAA,CAAAoB,IAAA,CAAA2B,WAAA,GAAAC,KAAA,KACAC,IAAA,SACAP,IAAA,iBACAA,IAAA,iBAAA1B,CAAA,KAAA8C,YAAA,CAAA9C,CAAA,CAAAU,OAAA,GACAgB,IAAA,cAAA1B,CAAA,IAAA+C,cAAA,CAAA/C,CAAA,CAAAU,OAAA,GACA+B,IAAA,CAAAzC,CAAA,IAAAA,CAAA,CAAAhB,IAAA,CAAAC,IAAA;EAEA,MAAAkD,MAAA,GAAAX,GAAA,CACAK,MAAA,WACAmB,KAAA,CAAA5C,IAAA,EACAsB,IAAA,MAAAnC,MAAA,EACAmC,IAAA,iBACAA,IAAA,0BACAY,EAAA,UAAAC,OAAA;EAEA,SAAAA,QAAAU,KAAA,EAAAC,CAAA;IACAf,MAAA,CAAAa,KAAA,CAAAE,CAAA,CAAAf,MAAA,IAAA/B,IAAA;IACAA,IAAA,CAAAK,IAAA,CAAAT,CAAA;MACAA,CAAA,CAAAmD,MAAA;QACAtC,EAAA,EAAAN,IAAA,CAAAe,GAAA,IAAAf,IAAA,CAAAU,GAAA,KAAAjB,CAAA,CAAAa,EAAA,GAAAqC,CAAA,CAAArC,EAAA,KAAAqC,CAAA,CAAAnC,EAAA,GAAAmC,CAAA,CAAArC,EAAA,UAAAN,IAAA,CAAAC,EAAA;QACAO,EAAA,EAAAR,IAAA,CAAAe,GAAA,IAAAf,IAAA,CAAAU,GAAA,KAAAjB,CAAA,CAAAe,EAAA,GAAAmC,CAAA,CAAArC,EAAA,KAAAqC,CAAA,CAAAnC,EAAA,GAAAmC,CAAA,CAAArC,EAAA,UAAAN,IAAA,CAAAC,EAAA;QACAY,EAAA,EAAAb,IAAA,CAAAe,GAAA,IAAAtB,CAAA,CAAAoB,EAAA,GAAA8B,CAAA,CAAAhB,KAAA;QACAX,EAAA,EAAAhB,IAAA,CAAAe,GAAA,IAAAtB,CAAA,CAAAuB,EAAA,GAAA2B,CAAA,CAAAhB,KAAA;MACA;IACA;IAEA,MAAAkB,CAAA,GAAA5B,GAAA,CAAA6B,UAAA,GAAAC,QAAA;IACA1B,IAAA,CACAyB,UAAA,CAAAD,CAAA,EACAG,KAAA,SAAAvD,CAAA;MACA,MAAAwD,CAAA,GAAA/D,EAAA,CAAAgE,WAAA,CAAAzD,CAAA,CAAAU,OAAA,EAAAV,CAAA,CAAAmD,MAAA;MACA,OAAAC,CAAA,IAAApD,CAAA,CAAAU,OAAA,GAAA8C,CAAA,CAAAJ,CAAA;IACA,GACAf,MAAA,WAAArC,CAAA;MACA,aAAA0D,YAAA,oBAAAtB,UAAA,CAAApC,CAAA,CAAAmD,MAAA;IACA,GACAzB,IAAA,iBAAA1B,CAAA,IAAAoC,UAAA,CAAApC,CAAA,CAAAmD,MAAA,IAAAnD,CAAA,CAAAd,QAAA,kBACAwC,IAAA,mBAAA1B,CAAA,IAAAoC,UAAA,CAAApC,CAAA,CAAAmD,MAAA,qBACAQ,SAAA,MAAA3D,CAAA,UAAAW,GAAA,CAAAX,CAAA,CAAAU,OAAA;IAEAmC,KAAA,CACAR,MAAA,WAAArC,CAAA;MACA,aAAA0D,YAAA,oBAAAZ,YAAA,CAAA9C,CAAA,CAAAmD,MAAA;IACA,GACAE,UAAA,CAAAD,CAAA,EACA1B,IAAA,iBAAA1B,CAAA,KAAA8C,YAAA,CAAA9C,CAAA,CAAAmD,MAAA,GACAQ,SAAA,cAAA3D,CAAA,UAAA+C,cAAA,CAAA/C,CAAA,CAAAU,OAAA;EACA;EAEA,SAAA0B,WAAApC,CAAA;IACA,OAAAA,CAAA,CAAAuB,EAAA,SAAAvB,CAAA,CAAAoB,EAAA,SAAApB,CAAA,CAAAe,EAAA,GAAAf,CAAA,CAAAa,EAAA;EACA;EAEA,SAAAiC,aAAA9C,CAAA;IACA,OAAAA,CAAA,CAAAuB,EAAA,SAAAvB,CAAA,CAAAoB,EAAA,UAAApB,CAAA,CAAAuB,EAAA,GAAAvB,CAAA,CAAAoB,EAAA,KAAApB,CAAA,CAAAe,EAAA,GAAAf,CAAA,CAAAa,EAAA;EACA;EAEA,SAAAkC,eAAA/C,CAAA;IACA,MAAA4D,CAAA,IAAA5D,CAAA,CAAAa,EAAA,GAAAb,CAAA,CAAAe,EAAA,cAAAR,IAAA,CAAAC,EAAA;IACA,MAAAqD,CAAA,IAAA7D,CAAA,CAAAoB,EAAA,GAAApB,CAAA,CAAAuB,EAAA,QAAAhC,MAAA;IACA,iBAAAqE,CAAA,oBAAAC,CAAA,cAAAD,CAAA;EACA;EAEAE,QAAA,CAAAC,cAAA,UAAAC,WAAA,CAAAxC,GAAA,CAAAyC,IAAA;AACA;AAEA7E,gBAAA,CAAAJ,IAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}