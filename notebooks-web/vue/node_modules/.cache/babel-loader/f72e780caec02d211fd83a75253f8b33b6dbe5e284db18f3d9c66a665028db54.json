{"ast":null,"code":"import \"core-js/modules/web.dom-exception.stack.js\";\nimport * as d3 from 'd3';\nimport axios from 'axios';\nimport * as Plot from '@observablehq/plot';\nexport default {\n  name: \"D3Runner\",\n  data() {\n    return {\n      d3Code: this.$route.query.code || \"\",\n      pictureUrl: this.$route.query.picture || \"\",\n      noteId: this.$route.query.id || null\n    };\n  },\n  created() {\n    if (this.noteId) {\n      this.fetchNoteDetails();\n    }\n  },\n  methods: {\n    fetchNoteDetails() {\n      this.$request.get(`/notes/selectById/${this.noteId}`).then(res => {\n        if (res.code === '200' && res.data) {\n          this.d3Code = res.data.code || \"\";\n          this.pictureUrl = res.data.picture || \"\";\n        } else {\n          this.$message.error(res.msg || '无法加载Note详情');\n        }\n      }).catch(error => {\n        console.error(\"获取 Note 详情失败:\", error);\n        this.$message.error('获取 Note 详情失败');\n      });\n    },\n    runD3Code() {\n      const svgContainer = this.$refs.d3Output;\n\n      // 清空以前的图像\n      while (svgContainer.firstChild) {\n        svgContainer.removeChild(svgContainer.firstChild);\n      }\n\n      // 运行用户输入的代码\n      try {\n        const userFunc = new Function('d3', 'container', this.d3Code);\n        userFunc(d3, svgContainer);\n      } catch (error) {\n        console.error(\"代码执行出错:\", error);\n        alert(\"代码执行出错，请检查代码。\");\n      }\n    },\n    runInteractiveD3() {\n      const svgContainer = this.$refs.d3Output;\n\n      // 清空以前的图像\n      while (svgContainer.firstChild) {\n        svgContainer.removeChild(svgContainer.firstChild);\n      }\n\n      // 互动图的数据，这里你可以使用用户输入的数据\n      const data = {\n        name: \"root\",\n        children: [{\n          name: \"child1\",\n          value: 10\n        }, {\n          name: \"child2\",\n          children: [{\n            name: \"grandchild1\",\n            value: 5\n          }, {\n            name: \"grandchild2\",\n            value: 7\n          }]\n        }]\n      };\n      try {\n        // 调用 D3 的互动图函数\n        const runInteractiveD3 = new Function('d3', 'data', `\n          const width = 928;\n          const height = width;\n          const radius = width / 6;\n\n          const color = d3.scaleOrdinal(d3.quantize(d3.interpolateRainbow, data.children.length + 1));\n\n          const hierarchy = d3.hierarchy(data).sum(d => d.value).sort((a, b) => b.value - a.value);\n          const root = d3.partition().size([2 * Math.PI, hierarchy.height + 1])(hierarchy);\n          root.each(d => (d.current = d));\n\n          const arc = d3.arc()\n            .startAngle(d => d.x0)\n            .endAngle(d => d.x1)\n            .padAngle(d => Math.min((d.x1 - d.x0) / 2, 0.005))\n            .padRadius(radius * 1.5)\n            .innerRadius(d => d.y0 * radius)\n            .outerRadius(d => Math.max(d.y0 * radius, d.y1 * radius - 1));\n\n          const svg = d3.create(\"svg\")\n            .attr(\"viewBox\", [-width / 2, -height / 2, width, width])\n            .style(\"font\", \"10px sans-serif\");\n\n          const path = svg.append(\"g\")\n            .selectAll(\"path\")\n            .data(root.descendants().slice(1))\n            .join(\"path\")\n            .attr(\"fill\", d => {\n              while (d.depth > 1) d = d.parent;\n              return color(d.data.name);\n            })\n            .attr(\"fill-opacity\", d => (arcVisible(d.current) ? (d.children ? 0.6 : 0.4) : 0))\n            .attr(\"pointer-events\", d => (arcVisible(d.current) ? \"auto\" : \"none\"))\n            .attr(\"d\", d => arc(d.current));\n\n          path.filter(d => d.children).style(\"cursor\", \"pointer\").on(\"click\", clicked);\n\n          const format = d3.format(\",d\");\n          path.append(\"title\").text(d => \\`\\${d.ancestors().map(d => d.data.name).reverse().join(\"/\")}\\n\\${format(d.value)}\\`);\n\n          const label = svg.append(\"g\")\n            .attr(\"pointer-events\", \"none\")\n            .attr(\"text-anchor\", \"middle\")\n            .style(\"user-select\", \"none\")\n            .selectAll(\"text\")\n            .data(root.descendants().slice(1))\n            .join(\"text\")\n            .attr(\"dy\", \"0.35em\")\n            .attr(\"fill-opacity\", d => +labelVisible(d.current))\n            .attr(\"transform\", d => labelTransform(d.current))\n            .text(d => d.data.name);\n\n          const parent = svg.append(\"circle\")\n            .datum(root)\n            .attr(\"r\", radius)\n            .attr(\"fill\", \"none\")\n            .attr(\"pointer-events\", \"all\")\n            .on(\"click\", clicked);\n\n          function clicked(event, p) {\n            parent.datum(p.parent || root);\n            root.each(d => {\n              d.target = {\n                x0: Math.max(0, Math.min(1, (d.x0 - p.x0) / (p.x1 - p.x0))) * 2 * Math.PI,\n                x1: Math.max(0, Math.min(1, (d.x1 - p.x0) / (p.x1 - p.x0))) * 2 * Math.PI,\n                y0: Math.max(0, d.y0 - p.depth),\n                y1: Math.max(0, d.y1 - p.depth)\n              };\n            });\n\n            const t = svg.transition().duration(750);\n            path.transition(t)\n              .tween(\"data\", d => {\n                const i = d3.interpolate(d.current, d.target);\n                return t => (d.current = i(t));\n              })\n              .filter(function(d) {\n                return +this.getAttribute(\"fill-opacity\") || arcVisible(d.target);\n              })\n              .attr(\"fill-opacity\", d => (arcVisible(d.target) ? (d.children ? 0.6 : 0.4) : 0))\n              .attr(\"pointer-events\", d => (arcVisible(d.target) ? \"auto\" : \"none\"))\n              .attrTween(\"d\", d => () => arc(d.current));\n\n            label.filter(function(d) {\n              return +this.getAttribute(\"fill-opacity\") || labelVisible(d.target);\n            })\n              .transition(t)\n              .attr(\"fill-opacity\", d => +labelVisible(d.target))\n              .attrTween(\"transform\", d => () => labelTransform(d.current));\n          }\n\n          function arcVisible(d) {\n            return d.y1 <= 3 && d.y0 >= 1 && d.x1 > d.x0;\n          }\n\n          function labelVisible(d) {\n            return d.y1 <= 3 && d.y0 >= 1 && (d.y1 - d.y0) * (d.x1 - d.x0) > 0.03;\n          }\n\n          function labelTransform(d) {\n            const x = ((d.x0 + d.x1) / 2) * 180 / Math.PI;\n            const y = ((d.y0 + d.y1) / 2) * radius;\n            return \\`rotate(\\${x - 90}) translate(\\${y},0) rotate(\\${x < 180 ? 0 : 180})\\`;\n          }\n\n          document.getElementById(\"d3Output\").appendChild(svg.node());\n        `);\n        runInteractiveD3(d3, data);\n      } catch (error) {\n        console.error(\"互动图代码执行出错:\", error);\n        alert(\"互动图代码执行出错，请检查代码。\");\n      }\n    },\n    saveD3Output() {\n      const svgElement = this.$refs.d3Output.querySelector('svg');\n      if (!svgElement) {\n        alert(\"没有可保存的图像。\");\n        return;\n      }\n      const serializer = new XMLSerializer();\n      const svgString = serializer.serializeToString(svgElement);\n      const base64Data = btoa(svgString);\n      axios.post('/upload', {\n        fileName: 'd3-output.svg',\n        data: base64Data\n      }).then(response => {\n        if (response.data.success) {\n          this.pictureUrl = response.data.filePath;\n          alert(\"保存成功！\");\n        } else {\n          alert(\"保存失败，请重试。\");\n        }\n      }).catch(error => {\n        console.error(\"保存失败:\", error);\n        alert(\"保存失败，请重试。\");\n      });\n    }\n  }\n};","map":{"version":3,"names":["d3","axios","Plot","name","data","d3Code","$route","query","code","pictureUrl","picture","noteId","id","created","fetchNoteDetails","methods","$request","get","then","res","$message","error","msg","catch","console","runD3Code","svgContainer","$refs","d3Output","firstChild","removeChild","userFunc","Function","alert","runInteractiveD3","children","value","saveD3Output","svgElement","querySelector","serializer","XMLSerializer","svgString","serializeToString","base64Data","btoa","post","fileName","response","success","filePath"],"sources":["src/views/manager/D3Runner.vue"],"sourcesContent":["<template>\r\n  <div class=\"d3-runner-container\">\r\n    <h3>D3.js 绘图页面</h3>\r\n    <textarea v-model=\"d3Code\" rows=\"10\" placeholder=\"输入 D3.js 代码\"></textarea>\r\n    <button @click=\"runD3Code\">运行代码</button>\r\n    <button @click=\"runInteractiveD3\">运行互动图</button> <!-- 添加互动图按钮 -->\r\n    <button @click=\"saveD3Output\">保存</button>\r\n    <div ref=\"d3Output\" class=\"d3-output\"></div>\r\n\r\n    <!-- 显示图片 -->\r\n    <div v-if=\"pictureUrl\" class=\"note-picture\">\r\n      <img :src=\"pictureUrl\" alt=\"D3 Output\" style=\"max-width: 100%; margin-top: 10px;\">\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as d3 from 'd3';\r\nimport axios from 'axios';\r\nimport * as Plot from '@observablehq/plot';\r\n\r\nexport default {\r\n  name: \"D3Runner\",\r\n  data() {\r\n    return {\r\n      d3Code: this.$route.query.code || \"\",\r\n      pictureUrl: this.$route.query.picture || \"\",\r\n      noteId: this.$route.query.id || null,\r\n    };\r\n  },\r\n  created() {\r\n    if (this.noteId) {\r\n      this.fetchNoteDetails();\r\n    }\r\n  },\r\n  methods: {\r\n    fetchNoteDetails() {\r\n      this.$request.get(`/notes/selectById/${this.noteId}`)\r\n        .then(res => {\r\n          if (res.code === '200' && res.data) {\r\n            this.d3Code = res.data.code || \"\";\r\n            this.pictureUrl = res.data.picture || \"\";\r\n          } else {\r\n            this.$message.error(res.msg || '无法加载Note详情');\r\n          }\r\n        })\r\n        .catch(error => {\r\n          console.error(\"获取 Note 详情失败:\", error);\r\n          this.$message.error('获取 Note 详情失败');\r\n        });\r\n    },\r\n\r\n    runD3Code() {\r\n      const svgContainer = this.$refs.d3Output;\r\n\r\n      // 清空以前的图像\r\n      while (svgContainer.firstChild) {\r\n        svgContainer.removeChild(svgContainer.firstChild);\r\n      }\r\n\r\n      // 运行用户输入的代码\r\n      try {\r\n        const userFunc = new Function('d3', 'container', this.d3Code);\r\n        userFunc(d3, svgContainer);\r\n      } catch (error) {\r\n        console.error(\"代码执行出错:\", error);\r\n        alert(\"代码执行出错，请检查代码。\");\r\n      }\r\n    },\r\n\r\n    runInteractiveD3() {\r\n      const svgContainer = this.$refs.d3Output;\r\n\r\n      // 清空以前的图像\r\n      while (svgContainer.firstChild) {\r\n        svgContainer.removeChild(svgContainer.firstChild);\r\n      }\r\n\r\n      // 互动图的数据，这里你可以使用用户输入的数据\r\n      const data = {\r\n        name: \"root\",\r\n        children: [\r\n          { name: \"child1\", value: 10 },\r\n          {\r\n            name: \"child2\",\r\n            children: [\r\n              { name: \"grandchild1\", value: 5 },\r\n              { name: \"grandchild2\", value: 7 }\r\n            ]\r\n          }\r\n        ]\r\n      };\r\n\r\n      try {\r\n        // 调用 D3 的互动图函数\r\n        const runInteractiveD3 = new Function('d3', 'data', `\r\n          const width = 928;\r\n          const height = width;\r\n          const radius = width / 6;\r\n\r\n          const color = d3.scaleOrdinal(d3.quantize(d3.interpolateRainbow, data.children.length + 1));\r\n\r\n          const hierarchy = d3.hierarchy(data).sum(d => d.value).sort((a, b) => b.value - a.value);\r\n          const root = d3.partition().size([2 * Math.PI, hierarchy.height + 1])(hierarchy);\r\n          root.each(d => (d.current = d));\r\n\r\n          const arc = d3.arc()\r\n            .startAngle(d => d.x0)\r\n            .endAngle(d => d.x1)\r\n            .padAngle(d => Math.min((d.x1 - d.x0) / 2, 0.005))\r\n            .padRadius(radius * 1.5)\r\n            .innerRadius(d => d.y0 * radius)\r\n            .outerRadius(d => Math.max(d.y0 * radius, d.y1 * radius - 1));\r\n\r\n          const svg = d3.create(\"svg\")\r\n            .attr(\"viewBox\", [-width / 2, -height / 2, width, width])\r\n            .style(\"font\", \"10px sans-serif\");\r\n\r\n          const path = svg.append(\"g\")\r\n            .selectAll(\"path\")\r\n            .data(root.descendants().slice(1))\r\n            .join(\"path\")\r\n            .attr(\"fill\", d => {\r\n              while (d.depth > 1) d = d.parent;\r\n              return color(d.data.name);\r\n            })\r\n            .attr(\"fill-opacity\", d => (arcVisible(d.current) ? (d.children ? 0.6 : 0.4) : 0))\r\n            .attr(\"pointer-events\", d => (arcVisible(d.current) ? \"auto\" : \"none\"))\r\n            .attr(\"d\", d => arc(d.current));\r\n\r\n          path.filter(d => d.children).style(\"cursor\", \"pointer\").on(\"click\", clicked);\r\n\r\n          const format = d3.format(\",d\");\r\n          path.append(\"title\").text(d => \\`\\${d.ancestors().map(d => d.data.name).reverse().join(\"/\")}\\n\\${format(d.value)}\\`);\r\n\r\n          const label = svg.append(\"g\")\r\n            .attr(\"pointer-events\", \"none\")\r\n            .attr(\"text-anchor\", \"middle\")\r\n            .style(\"user-select\", \"none\")\r\n            .selectAll(\"text\")\r\n            .data(root.descendants().slice(1))\r\n            .join(\"text\")\r\n            .attr(\"dy\", \"0.35em\")\r\n            .attr(\"fill-opacity\", d => +labelVisible(d.current))\r\n            .attr(\"transform\", d => labelTransform(d.current))\r\n            .text(d => d.data.name);\r\n\r\n          const parent = svg.append(\"circle\")\r\n            .datum(root)\r\n            .attr(\"r\", radius)\r\n            .attr(\"fill\", \"none\")\r\n            .attr(\"pointer-events\", \"all\")\r\n            .on(\"click\", clicked);\r\n\r\n          function clicked(event, p) {\r\n            parent.datum(p.parent || root);\r\n            root.each(d => {\r\n              d.target = {\r\n                x0: Math.max(0, Math.min(1, (d.x0 - p.x0) / (p.x1 - p.x0))) * 2 * Math.PI,\r\n                x1: Math.max(0, Math.min(1, (d.x1 - p.x0) / (p.x1 - p.x0))) * 2 * Math.PI,\r\n                y0: Math.max(0, d.y0 - p.depth),\r\n                y1: Math.max(0, d.y1 - p.depth)\r\n              };\r\n            });\r\n\r\n            const t = svg.transition().duration(750);\r\n            path.transition(t)\r\n              .tween(\"data\", d => {\r\n                const i = d3.interpolate(d.current, d.target);\r\n                return t => (d.current = i(t));\r\n              })\r\n              .filter(function(d) {\r\n                return +this.getAttribute(\"fill-opacity\") || arcVisible(d.target);\r\n              })\r\n              .attr(\"fill-opacity\", d => (arcVisible(d.target) ? (d.children ? 0.6 : 0.4) : 0))\r\n              .attr(\"pointer-events\", d => (arcVisible(d.target) ? \"auto\" : \"none\"))\r\n              .attrTween(\"d\", d => () => arc(d.current));\r\n\r\n            label.filter(function(d) {\r\n              return +this.getAttribute(\"fill-opacity\") || labelVisible(d.target);\r\n            })\r\n              .transition(t)\r\n              .attr(\"fill-opacity\", d => +labelVisible(d.target))\r\n              .attrTween(\"transform\", d => () => labelTransform(d.current));\r\n          }\r\n\r\n          function arcVisible(d) {\r\n            return d.y1 <= 3 && d.y0 >= 1 && d.x1 > d.x0;\r\n          }\r\n\r\n          function labelVisible(d) {\r\n            return d.y1 <= 3 && d.y0 >= 1 && (d.y1 - d.y0) * (d.x1 - d.x0) > 0.03;\r\n          }\r\n\r\n          function labelTransform(d) {\r\n            const x = ((d.x0 + d.x1) / 2) * 180 / Math.PI;\r\n            const y = ((d.y0 + d.y1) / 2) * radius;\r\n            return \\`rotate(\\${x - 90}) translate(\\${y},0) rotate(\\${x < 180 ? 0 : 180})\\`;\r\n          }\r\n\r\n          document.getElementById(\"d3Output\").appendChild(svg.node());\r\n        `);\r\n        \r\n        runInteractiveD3(d3, data);\r\n      } catch (error) {\r\n        console.error(\"互动图代码执行出错:\", error);\r\n        alert(\"互动图代码执行出错，请检查代码。\");\r\n      }\r\n    },\r\n\r\n    saveD3Output() {\r\n      const svgElement = this.$refs.d3Output.querySelector('svg');\r\n\r\n      if (!svgElement) {\r\n        alert(\"没有可保存的图像。\");\r\n        return;\r\n      }\r\n\r\n      const serializer = new XMLSerializer();\r\n      const svgString = serializer.serializeToString(svgElement);\r\n      const base64Data = btoa(svgString);\r\n\r\n      axios.post('/upload', {\r\n        fileName: 'd3-output.svg',\r\n        data: base64Data\r\n      })\r\n      .then(response => {\r\n        if (response.data.success) {\r\n          this.pictureUrl = response.data.filePath;\r\n          alert(\"保存成功！\");\r\n        } else {\r\n          alert(\"保存失败，请重试。\");\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.error(\"保存失败:\", error);\r\n        alert(\"保存失败，请重试。\");\r\n      });\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.d3-runner-container {\r\n  padding: 20px;\r\n}\r\n\r\n.d3-output {\r\n  margin-top: 20px;\r\n}\r\n\r\n.note-picture img {\r\n  max-width: 100%;\r\n}\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}