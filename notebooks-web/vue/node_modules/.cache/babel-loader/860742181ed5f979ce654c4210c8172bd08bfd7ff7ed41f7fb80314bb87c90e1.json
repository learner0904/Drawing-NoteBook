{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.regexp.flags.js\";\nimport { Annotation, EditorSelection, codePointAt, codePointSize, fromCodePoint, Facet, combineConfig, StateEffect, StateField, Prec, Text, MapMode, RangeValue, RangeSet, CharCategory } from '@codemirror/state';\nimport { logException, Direction, showTooltip, EditorView, ViewPlugin, getTooltip, Decoration, WidgetType, keymap } from '@codemirror/view';\nimport { syntaxTree, indentUnit } from '@codemirror/language';\n\n/**\nAn instance of this is passed to completion source functions.\n*/\nclass CompletionContext {\n  /**\n  Create a new completion context. (Mostly useful for testing\n  completion sources—in the editor, the extension will create\n  these for you.)\n  */\n  constructor(\n  /**\n  The editor state that the completion happens in.\n  */\n  state,\n  /**\n  The position at which the completion is happening.\n  */\n  pos,\n  /**\n  Indicates whether completion was activated explicitly, or\n  implicitly by typing. The usual way to respond to this is to\n  only return completions when either there is part of a\n  completable entity before the cursor, or `explicit` is true.\n  */\n  explicit) {\n    this.state = state;\n    this.pos = pos;\n    this.explicit = explicit;\n    /**\n    @internal\n    */\n    this.abortListeners = [];\n  }\n  /**\n  Get the extent, content, and (if there is a token) type of the\n  token before `this.pos`.\n  */\n  tokenBefore(types) {\n    let token = syntaxTree(this.state).resolveInner(this.pos, -1);\n    while (token && types.indexOf(token.name) < 0) token = token.parent;\n    return token ? {\n      from: token.from,\n      to: this.pos,\n      text: this.state.sliceDoc(token.from, this.pos),\n      type: token.type\n    } : null;\n  }\n  /**\n  Get the match of the given expression directly before the\n  cursor.\n  */\n  matchBefore(expr) {\n    let line = this.state.doc.lineAt(this.pos);\n    let start = Math.max(line.from, this.pos - 250);\n    let str = line.text.slice(start - line.from, this.pos - line.from);\n    let found = str.search(ensureAnchor(expr, false));\n    return found < 0 ? null : {\n      from: start + found,\n      to: this.pos,\n      text: str.slice(found)\n    };\n  }\n  /**\n  Yields true when the query has been aborted. Can be useful in\n  asynchronous queries to avoid doing work that will be ignored.\n  */\n  get aborted() {\n    return this.abortListeners == null;\n  }\n  /**\n  Allows you to register abort handlers, which will be called when\n  the query is\n  [aborted](https://codemirror.net/6/docs/ref/#autocomplete.CompletionContext.aborted).\n  */\n  addEventListener(type, listener) {\n    if (type == \"abort\" && this.abortListeners) this.abortListeners.push(listener);\n  }\n}\nfunction toSet(chars) {\n  let flat = Object.keys(chars).join(\"\");\n  let words = /\\w/.test(flat);\n  if (words) flat = flat.replace(/\\w/g, \"\");\n  return `[${words ? \"\\\\w\" : \"\"}${flat.replace(/[^\\w\\s]/g, \"\\\\$&\")}]`;\n}\nfunction prefixMatch(options) {\n  let first = Object.create(null),\n    rest = Object.create(null);\n  for (let {\n    label\n  } of options) {\n    first[label[0]] = true;\n    for (let i = 1; i < label.length; i++) rest[label[i]] = true;\n  }\n  let source = toSet(first) + toSet(rest) + \"*$\";\n  return [new RegExp(\"^\" + source), new RegExp(source)];\n}\n/**\nGiven a a fixed array of options, return an autocompleter that\ncompletes them.\n*/\nfunction completeFromList(list) {\n  let options = list.map(o => typeof o == \"string\" ? {\n    label: o\n  } : o);\n  let [validFor, match] = options.every(o => /^\\w+$/.test(o.label)) ? [/\\w*$/, /\\w+$/] : prefixMatch(options);\n  return context => {\n    let token = context.matchBefore(match);\n    return token || context.explicit ? {\n      from: token ? token.from : context.pos,\n      options,\n      validFor\n    } : null;\n  };\n}\n/**\nWrap the given completion source so that it will only fire when the\ncursor is in a syntax node with one of the given names.\n*/\nfunction ifIn(nodes, source) {\n  return context => {\n    for (let pos = syntaxTree(context.state).resolveInner(context.pos, -1); pos; pos = pos.parent) if (nodes.indexOf(pos.name) > -1) return source(context);\n    return null;\n  };\n}\n/**\nWrap the given completion source so that it will not fire when the\ncursor is in a syntax node with one of the given names.\n*/\nfunction ifNotIn(nodes, source) {\n  return context => {\n    for (let pos = syntaxTree(context.state).resolveInner(context.pos, -1); pos; pos = pos.parent) if (nodes.indexOf(pos.name) > -1) return null;\n    return source(context);\n  };\n}\nclass Option {\n  constructor(completion, source, match) {\n    this.completion = completion;\n    this.source = source;\n    this.match = match;\n  }\n}\nfunction cur(state) {\n  return state.selection.main.head;\n}\n// Make sure the given regexp has a $ at its end and, if `start` is\n// true, a ^ at its start.\nfunction ensureAnchor(expr, start) {\n  var _a;\n  let {\n    source\n  } = expr;\n  let addStart = start && source[0] != \"^\",\n    addEnd = source[source.length - 1] != \"$\";\n  if (!addStart && !addEnd) return expr;\n  return new RegExp(`${addStart ? \"^\" : \"\"}(?:${source})${addEnd ? \"$\" : \"\"}`, (_a = expr.flags) !== null && _a !== void 0 ? _a : expr.ignoreCase ? \"i\" : \"\");\n}\n/**\nThis annotation is added to transactions that are produced by\npicking a completion.\n*/\nconst pickedCompletion = /*@__PURE__*/Annotation.define();\n/**\nHelper function that returns a transaction spec which inserts a\ncompletion's text in the main selection range, and any other\nselection range that has the same text in front of it.\n*/\nfunction insertCompletionText(state, text, from, to) {\n  return Object.assign(Object.assign({}, state.changeByRange(range => {\n    if (range == state.selection.main) return {\n      changes: {\n        from: from,\n        to: to,\n        insert: text\n      },\n      range: EditorSelection.cursor(from + text.length)\n    };\n    let len = to - from;\n    if (!range.empty || len && state.sliceDoc(range.from - len, range.from) != state.sliceDoc(from, to)) return {\n      range\n    };\n    return {\n      changes: {\n        from: range.from - len,\n        to: range.from,\n        insert: text\n      },\n      range: EditorSelection.cursor(range.from - len + text.length)\n    };\n  })), {\n    userEvent: \"input.complete\"\n  });\n}\nfunction applyCompletion(view, option) {\n  const apply = option.completion.apply || option.completion.label;\n  let result = option.source;\n  if (typeof apply == \"string\") view.dispatch(insertCompletionText(view.state, apply, result.from, result.to));else apply(view, option.completion, result.from, result.to);\n}\nconst SourceCache = /*@__PURE__*/new WeakMap();\nfunction asSource(source) {\n  if (!Array.isArray(source)) return source;\n  let known = SourceCache.get(source);\n  if (!known) SourceCache.set(source, known = completeFromList(source));\n  return known;\n}\n\n// A pattern matcher for fuzzy completion matching. Create an instance\n// once for a pattern, and then use that to match any number of\n// completions.\nclass FuzzyMatcher {\n  constructor(pattern) {\n    this.pattern = pattern;\n    this.chars = [];\n    this.folded = [];\n    // Buffers reused by calls to `match` to track matched character\n    // positions.\n    this.any = [];\n    this.precise = [];\n    this.byWord = [];\n    for (let p = 0; p < pattern.length;) {\n      let char = codePointAt(pattern, p),\n        size = codePointSize(char);\n      this.chars.push(char);\n      let part = pattern.slice(p, p + size),\n        upper = part.toUpperCase();\n      this.folded.push(codePointAt(upper == part ? part.toLowerCase() : upper, 0));\n      p += size;\n    }\n    this.astral = pattern.length != this.chars.length;\n  }\n  // Matches a given word (completion) against the pattern (input).\n  // Will return null for no match, and otherwise an array that starts\n  // with the match score, followed by any number of `from, to` pairs\n  // indicating the matched parts of `word`.\n  //\n  // The score is a number that is more negative the worse the match\n  // is. See `Penalty` above.\n  match(word) {\n    if (this.pattern.length == 0) return [0];\n    if (word.length < this.pattern.length) return null;\n    let {\n      chars,\n      folded,\n      any,\n      precise,\n      byWord\n    } = this;\n    // For single-character queries, only match when they occur right\n    // at the start\n    if (chars.length == 1) {\n      let first = codePointAt(word, 0);\n      return first == chars[0] ? [0, 0, codePointSize(first)] : first == folded[0] ? [-200 /* CaseFold */, 0, codePointSize(first)] : null;\n    }\n    let direct = word.indexOf(this.pattern);\n    if (direct == 0) return [0, 0, this.pattern.length];\n    let len = chars.length,\n      anyTo = 0;\n    if (direct < 0) {\n      for (let i = 0, e = Math.min(word.length, 200); i < e && anyTo < len;) {\n        let next = codePointAt(word, i);\n        if (next == chars[anyTo] || next == folded[anyTo]) any[anyTo++] = i;\n        i += codePointSize(next);\n      }\n      // No match, exit immediately\n      if (anyTo < len) return null;\n    }\n    // This tracks the extent of the precise (non-folded, not\n    // necessarily adjacent) match\n    let preciseTo = 0;\n    // Tracks whether there is a match that hits only characters that\n    // appear to be starting words. `byWordFolded` is set to true when\n    // a case folded character is encountered in such a match\n    let byWordTo = 0,\n      byWordFolded = false;\n    // If we've found a partial adjacent match, these track its state\n    let adjacentTo = 0,\n      adjacentStart = -1,\n      adjacentEnd = -1;\n    let hasLower = /[a-z]/.test(word),\n      wordAdjacent = true;\n    // Go over the option's text, scanning for the various kinds of matches\n    for (let i = 0, e = Math.min(word.length, 200), prevType = 0 /* NonWord */; i < e && byWordTo < len;) {\n      let next = codePointAt(word, i);\n      if (direct < 0) {\n        if (preciseTo < len && next == chars[preciseTo]) precise[preciseTo++] = i;\n        if (adjacentTo < len) {\n          if (next == chars[adjacentTo] || next == folded[adjacentTo]) {\n            if (adjacentTo == 0) adjacentStart = i;\n            adjacentEnd = i + 1;\n            adjacentTo++;\n          } else {\n            adjacentTo = 0;\n          }\n        }\n      }\n      let ch,\n        type = next < 0xff ? next >= 48 && next <= 57 || next >= 97 && next <= 122 ? 2 /* Lower */ : next >= 65 && next <= 90 ? 1 /* Upper */ : 0 /* NonWord */ : (ch = fromCodePoint(next)) != ch.toLowerCase() ? 1 /* Upper */ : ch != ch.toUpperCase() ? 2 /* Lower */ : 0 /* NonWord */;\n      if (!i || type == 1 /* Upper */ && hasLower || prevType == 0 /* NonWord */ && type != 0 /* NonWord */) {\n        if (chars[byWordTo] == next || folded[byWordTo] == next && (byWordFolded = true)) byWord[byWordTo++] = i;else if (byWord.length) wordAdjacent = false;\n      }\n      prevType = type;\n      i += codePointSize(next);\n    }\n    if (byWordTo == len && byWord[0] == 0 && wordAdjacent) return this.result(-100 /* ByWord */ + (byWordFolded ? -200 /* CaseFold */ : 0), byWord, word);\n    if (adjacentTo == len && adjacentStart == 0) return [-200 /* CaseFold */ - word.length, 0, adjacentEnd];\n    if (direct > -1) return [-700 /* NotStart */ - word.length, direct, direct + this.pattern.length];\n    if (adjacentTo == len) return [-200 /* CaseFold */ + -700 /* NotStart */ - word.length, adjacentStart, adjacentEnd];\n    if (byWordTo == len) return this.result(-100 /* ByWord */ + (byWordFolded ? -200 /* CaseFold */ : 0) + -700 /* NotStart */ + (wordAdjacent ? 0 : -1100 /* Gap */), byWord, word);\n    return chars.length == 2 ? null : this.result((any[0] ? -700 /* NotStart */ : 0) + -200 /* CaseFold */ + -1100 /* Gap */, any, word);\n  }\n  result(score, positions, word) {\n    let result = [score - word.length],\n      i = 1;\n    for (let pos of positions) {\n      let to = pos + (this.astral ? codePointSize(codePointAt(word, pos)) : 1);\n      if (i > 1 && result[i - 1] == pos) result[i - 1] = to;else {\n        result[i++] = pos;\n        result[i++] = to;\n      }\n    }\n    return result;\n  }\n}\nconst completionConfig = /*@__PURE__*/Facet.define({\n  combine(configs) {\n    return combineConfig(configs, {\n      activateOnTyping: true,\n      override: null,\n      closeOnBlur: true,\n      maxRenderedOptions: 100,\n      defaultKeymap: true,\n      optionClass: () => \"\",\n      aboveCursor: false,\n      icons: true,\n      addToOptions: []\n    }, {\n      defaultKeymap: (a, b) => a && b,\n      closeOnBlur: (a, b) => a && b,\n      icons: (a, b) => a && b,\n      optionClass: (a, b) => c => joinClass(a(c), b(c)),\n      addToOptions: (a, b) => a.concat(b)\n    });\n  }\n});\nfunction joinClass(a, b) {\n  return a ? b ? a + \" \" + b : a : b;\n}\nfunction optionContent(config) {\n  let content = config.addToOptions.slice();\n  if (config.icons) content.push({\n    render(completion) {\n      let icon = document.createElement(\"div\");\n      icon.classList.add(\"cm-completionIcon\");\n      if (completion.type) icon.classList.add(...completion.type.split(/\\s+/g).map(cls => \"cm-completionIcon-\" + cls));\n      icon.setAttribute(\"aria-hidden\", \"true\");\n      return icon;\n    },\n    position: 20\n  });\n  content.push({\n    render(completion, _s, match) {\n      let labelElt = document.createElement(\"span\");\n      labelElt.className = \"cm-completionLabel\";\n      let {\n          label\n        } = completion,\n        off = 0;\n      for (let j = 1; j < match.length;) {\n        let from = match[j++],\n          to = match[j++];\n        if (from > off) labelElt.appendChild(document.createTextNode(label.slice(off, from)));\n        let span = labelElt.appendChild(document.createElement(\"span\"));\n        span.appendChild(document.createTextNode(label.slice(from, to)));\n        span.className = \"cm-completionMatchedText\";\n        off = to;\n      }\n      if (off < label.length) labelElt.appendChild(document.createTextNode(label.slice(off)));\n      return labelElt;\n    },\n    position: 50\n  }, {\n    render(completion) {\n      if (!completion.detail) return null;\n      let detailElt = document.createElement(\"span\");\n      detailElt.className = \"cm-completionDetail\";\n      detailElt.textContent = completion.detail;\n      return detailElt;\n    },\n    position: 80\n  });\n  return content.sort((a, b) => a.position - b.position).map(a => a.render);\n}\nfunction rangeAroundSelected(total, selected, max) {\n  if (total <= max) return {\n    from: 0,\n    to: total\n  };\n  if (selected <= total >> 1) {\n    let off = Math.floor(selected / max);\n    return {\n      from: off * max,\n      to: (off + 1) * max\n    };\n  }\n  let off = Math.floor((total - selected) / max);\n  return {\n    from: total - (off + 1) * max,\n    to: total - off * max\n  };\n}\nclass CompletionTooltip {\n  constructor(view, stateField) {\n    this.view = view;\n    this.stateField = stateField;\n    this.info = null;\n    this.placeInfo = {\n      read: () => this.measureInfo(),\n      write: pos => this.positionInfo(pos),\n      key: this\n    };\n    let cState = view.state.field(stateField);\n    let {\n      options,\n      selected\n    } = cState.open;\n    let config = view.state.facet(completionConfig);\n    this.optionContent = optionContent(config);\n    this.optionClass = config.optionClass;\n    this.range = rangeAroundSelected(options.length, selected, config.maxRenderedOptions);\n    this.dom = document.createElement(\"div\");\n    this.dom.className = \"cm-tooltip-autocomplete\";\n    this.dom.addEventListener(\"mousedown\", e => {\n      for (let dom = e.target, match; dom && dom != this.dom; dom = dom.parentNode) {\n        if (dom.nodeName == \"LI\" && (match = /-(\\d+)$/.exec(dom.id)) && +match[1] < options.length) {\n          applyCompletion(view, options[+match[1]]);\n          e.preventDefault();\n          return;\n        }\n      }\n    });\n    this.list = this.dom.appendChild(this.createListBox(options, cState.id, this.range));\n    this.list.addEventListener(\"scroll\", () => {\n      if (this.info) this.view.requestMeasure(this.placeInfo);\n    });\n  }\n  mount() {\n    this.updateSel();\n  }\n  update(update) {\n    if (update.state.field(this.stateField) != update.startState.field(this.stateField)) this.updateSel();\n  }\n  positioned() {\n    if (this.info) this.view.requestMeasure(this.placeInfo);\n  }\n  updateSel() {\n    let cState = this.view.state.field(this.stateField),\n      open = cState.open;\n    if (open.selected < this.range.from || open.selected >= this.range.to) {\n      this.range = rangeAroundSelected(open.options.length, open.selected, this.view.state.facet(completionConfig).maxRenderedOptions);\n      this.list.remove();\n      this.list = this.dom.appendChild(this.createListBox(open.options, cState.id, this.range));\n      this.list.addEventListener(\"scroll\", () => {\n        if (this.info) this.view.requestMeasure(this.placeInfo);\n      });\n    }\n    if (this.updateSelectedOption(open.selected)) {\n      if (this.info) {\n        this.info.remove();\n        this.info = null;\n      }\n      let {\n        completion\n      } = open.options[open.selected];\n      let {\n        info\n      } = completion;\n      if (!info) return;\n      let infoResult = typeof info === 'string' ? document.createTextNode(info) : info(completion);\n      if (!infoResult) return;\n      if ('then' in infoResult) {\n        infoResult.then(node => {\n          if (node && this.view.state.field(this.stateField, false) == cState) this.addInfoPane(node);\n        }).catch(e => logException(this.view.state, e, \"completion info\"));\n      } else {\n        this.addInfoPane(infoResult);\n      }\n    }\n  }\n  addInfoPane(content) {\n    let dom = this.info = document.createElement(\"div\");\n    dom.className = \"cm-tooltip cm-completionInfo\";\n    dom.appendChild(content);\n    this.dom.appendChild(dom);\n    this.view.requestMeasure(this.placeInfo);\n  }\n  updateSelectedOption(selected) {\n    let set = null;\n    for (let opt = this.list.firstChild, i = this.range.from; opt; opt = opt.nextSibling, i++) {\n      if (i == selected) {\n        if (!opt.hasAttribute(\"aria-selected\")) {\n          opt.setAttribute(\"aria-selected\", \"true\");\n          set = opt;\n        }\n      } else {\n        if (opt.hasAttribute(\"aria-selected\")) opt.removeAttribute(\"aria-selected\");\n      }\n    }\n    if (set) scrollIntoView(this.list, set);\n    return set;\n  }\n  measureInfo() {\n    let sel = this.dom.querySelector(\"[aria-selected]\");\n    if (!sel || !this.info) return null;\n    let listRect = this.dom.getBoundingClientRect();\n    let infoRect = this.info.getBoundingClientRect();\n    let selRect = sel.getBoundingClientRect();\n    if (selRect.top > Math.min(innerHeight, listRect.bottom) - 10 || selRect.bottom < Math.max(0, listRect.top) + 10) return null;\n    let top = Math.max(0, Math.min(selRect.top, innerHeight - infoRect.height)) - listRect.top;\n    let left = this.view.textDirection == Direction.RTL;\n    let spaceLeft = listRect.left,\n      spaceRight = innerWidth - listRect.right;\n    if (left && spaceLeft < Math.min(infoRect.width, spaceRight)) left = false;else if (!left && spaceRight < Math.min(infoRect.width, spaceLeft)) left = true;\n    return {\n      top,\n      left\n    };\n  }\n  positionInfo(pos) {\n    if (this.info) {\n      this.info.style.top = (pos ? pos.top : -1e6) + \"px\";\n      if (pos) {\n        this.info.classList.toggle(\"cm-completionInfo-left\", pos.left);\n        this.info.classList.toggle(\"cm-completionInfo-right\", !pos.left);\n      }\n    }\n  }\n  createListBox(options, id, range) {\n    const ul = document.createElement(\"ul\");\n    ul.id = id;\n    ul.setAttribute(\"role\", \"listbox\");\n    ul.setAttribute(\"aria-expanded\", \"true\");\n    ul.setAttribute(\"aria-label\", this.view.state.phrase(\"Completions\"));\n    for (let i = range.from; i < range.to; i++) {\n      let {\n        completion,\n        match\n      } = options[i];\n      const li = ul.appendChild(document.createElement(\"li\"));\n      li.id = id + \"-\" + i;\n      li.setAttribute(\"role\", \"option\");\n      let cls = this.optionClass(completion);\n      if (cls) li.className = cls;\n      for (let source of this.optionContent) {\n        let node = source(completion, this.view.state, match);\n        if (node) li.appendChild(node);\n      }\n    }\n    if (range.from) ul.classList.add(\"cm-completionListIncompleteTop\");\n    if (range.to < options.length) ul.classList.add(\"cm-completionListIncompleteBottom\");\n    return ul;\n  }\n}\n// We allocate a new function instance every time the completion\n// changes to force redrawing/repositioning of the tooltip\nfunction completionTooltip(stateField) {\n  return view => new CompletionTooltip(view, stateField);\n}\nfunction scrollIntoView(container, element) {\n  let parent = container.getBoundingClientRect();\n  let self = element.getBoundingClientRect();\n  if (self.top < parent.top) container.scrollTop -= parent.top - self.top;else if (self.bottom > parent.bottom) container.scrollTop += self.bottom - parent.bottom;\n}\n\n// Used to pick a preferred option when two options with the same\n// label occur in the result.\nfunction score(option) {\n  return (option.boost || 0) * 100 + (option.apply ? 10 : 0) + (option.info ? 5 : 0) + (option.type ? 1 : 0);\n}\nfunction sortOptions(active, state) {\n  let options = [],\n    i = 0;\n  for (let a of active) if (a.hasResult()) {\n    if (a.result.filter === false) {\n      let getMatch = a.result.getMatch;\n      for (let option of a.result.options) {\n        let match = [1e9 - i++];\n        if (getMatch) for (let n of getMatch(option)) match.push(n);\n        options.push(new Option(option, a, match));\n      }\n    } else {\n      let matcher = new FuzzyMatcher(state.sliceDoc(a.from, a.to)),\n        match;\n      for (let option of a.result.options) if (match = matcher.match(option.label)) {\n        if (option.boost != null) match[0] += option.boost;\n        options.push(new Option(option, a, match));\n      }\n    }\n  }\n  let result = [],\n    prev = null;\n  for (let opt of options.sort(cmpOption)) {\n    if (!prev || prev.label != opt.completion.label || prev.detail != opt.completion.detail || prev.type != null && opt.completion.type != null && prev.type != opt.completion.type || prev.apply != opt.completion.apply) result.push(opt);else if (score(opt.completion) > score(prev)) result[result.length - 1] = opt;\n    prev = opt.completion;\n  }\n  return result;\n}\nclass CompletionDialog {\n  constructor(options, attrs, tooltip, timestamp, selected) {\n    this.options = options;\n    this.attrs = attrs;\n    this.tooltip = tooltip;\n    this.timestamp = timestamp;\n    this.selected = selected;\n  }\n  setSelected(selected, id) {\n    return selected == this.selected || selected >= this.options.length ? this : new CompletionDialog(this.options, makeAttrs(id, selected), this.tooltip, this.timestamp, selected);\n  }\n  static build(active, state, id, prev, conf) {\n    let options = sortOptions(active, state);\n    if (!options.length) return null;\n    let selected = 0;\n    if (prev && prev.selected) {\n      let selectedValue = prev.options[prev.selected].completion;\n      for (let i = 0; i < options.length; i++) if (options[i].completion == selectedValue) {\n        selected = i;\n        break;\n      }\n    }\n    return new CompletionDialog(options, makeAttrs(id, selected), {\n      pos: active.reduce((a, b) => b.hasResult() ? Math.min(a, b.from) : a, 1e8),\n      create: completionTooltip(completionState),\n      above: conf.aboveCursor\n    }, prev ? prev.timestamp : Date.now(), selected);\n  }\n  map(changes) {\n    return new CompletionDialog(this.options, this.attrs, Object.assign(Object.assign({}, this.tooltip), {\n      pos: changes.mapPos(this.tooltip.pos)\n    }), this.timestamp, this.selected);\n  }\n}\nclass CompletionState {\n  constructor(active, id, open) {\n    this.active = active;\n    this.id = id;\n    this.open = open;\n  }\n  static start() {\n    return new CompletionState(none, \"cm-ac-\" + Math.floor(Math.random() * 2e6).toString(36), null);\n  }\n  update(tr) {\n    let {\n        state\n      } = tr,\n      conf = state.facet(completionConfig);\n    let sources = conf.override || state.languageDataAt(\"autocomplete\", cur(state)).map(asSource);\n    let active = sources.map(source => {\n      let value = this.active.find(s => s.source == source) || new ActiveSource(source, this.active.some(a => a.state != 0 /* Inactive */) ? 1 /* Pending */ : 0 /* Inactive */);\n      return value.update(tr, conf);\n    });\n    if (active.length == this.active.length && active.every((a, i) => a == this.active[i])) active = this.active;\n    let open = tr.selection || active.some(a => a.hasResult() && tr.changes.touchesRange(a.from, a.to)) || !sameResults(active, this.active) ? CompletionDialog.build(active, state, this.id, this.open, conf) : this.open && tr.docChanged ? this.open.map(tr.changes) : this.open;\n    if (!open && active.every(a => a.state != 1 /* Pending */) && active.some(a => a.hasResult())) active = active.map(a => a.hasResult() ? new ActiveSource(a.source, 0 /* Inactive */) : a);\n    for (let effect of tr.effects) if (effect.is(setSelectedEffect)) open = open && open.setSelected(effect.value, this.id);\n    return active == this.active && open == this.open ? this : new CompletionState(active, this.id, open);\n  }\n  get tooltip() {\n    return this.open ? this.open.tooltip : null;\n  }\n  get attrs() {\n    return this.open ? this.open.attrs : baseAttrs;\n  }\n}\nfunction sameResults(a, b) {\n  if (a == b) return true;\n  for (let iA = 0, iB = 0;;) {\n    while (iA < a.length && !a[iA].hasResult) iA++;\n    while (iB < b.length && !b[iB].hasResult) iB++;\n    let endA = iA == a.length,\n      endB = iB == b.length;\n    if (endA || endB) return endA == endB;\n    if (a[iA++].result != b[iB++].result) return false;\n  }\n}\nconst baseAttrs = {\n  \"aria-autocomplete\": \"list\"\n};\nfunction makeAttrs(id, selected) {\n  return {\n    \"aria-autocomplete\": \"list\",\n    \"aria-haspopup\": \"listbox\",\n    \"aria-activedescendant\": id + \"-\" + selected,\n    \"aria-controls\": id\n  };\n}\nconst none = [];\nfunction cmpOption(a, b) {\n  let dScore = b.match[0] - a.match[0];\n  if (dScore) return dScore;\n  return a.completion.label.localeCompare(b.completion.label);\n}\nfunction getUserEvent(tr) {\n  return tr.isUserEvent(\"input.type\") ? \"input\" : tr.isUserEvent(\"delete.backward\") ? \"delete\" : null;\n}\nclass ActiveSource {\n  constructor(source, state, explicitPos = -1) {\n    this.source = source;\n    this.state = state;\n    this.explicitPos = explicitPos;\n  }\n  hasResult() {\n    return false;\n  }\n  update(tr, conf) {\n    let event = getUserEvent(tr),\n      value = this;\n    if (event) value = value.handleUserEvent(tr, event, conf);else if (tr.docChanged) value = value.handleChange(tr);else if (tr.selection && value.state != 0 /* Inactive */) value = new ActiveSource(value.source, 0 /* Inactive */);\n    for (let effect of tr.effects) {\n      if (effect.is(startCompletionEffect)) value = new ActiveSource(value.source, 1 /* Pending */, effect.value ? cur(tr.state) : -1);else if (effect.is(closeCompletionEffect)) value = new ActiveSource(value.source, 0 /* Inactive */);else if (effect.is(setActiveEffect)) for (let active of effect.value) if (active.source == value.source) value = active;\n    }\n    return value;\n  }\n  handleUserEvent(tr, type, conf) {\n    return type == \"delete\" || !conf.activateOnTyping ? this.map(tr.changes) : new ActiveSource(this.source, 1 /* Pending */);\n  }\n\n  handleChange(tr) {\n    return tr.changes.touchesRange(cur(tr.startState)) ? new ActiveSource(this.source, 0 /* Inactive */) : this.map(tr.changes);\n  }\n  map(changes) {\n    return changes.empty || this.explicitPos < 0 ? this : new ActiveSource(this.source, this.state, changes.mapPos(this.explicitPos));\n  }\n}\nclass ActiveResult extends ActiveSource {\n  constructor(source, explicitPos, result, from, to) {\n    super(source, 2 /* Result */, explicitPos);\n    this.result = result;\n    this.from = from;\n    this.to = to;\n  }\n  hasResult() {\n    return true;\n  }\n  handleUserEvent(tr, type, conf) {\n    var _a;\n    let from = tr.changes.mapPos(this.from),\n      to = tr.changes.mapPos(this.to, 1);\n    let pos = cur(tr.state);\n    if ((this.explicitPos < 0 ? pos <= from : pos < this.from) || pos > to || type == \"delete\" && cur(tr.startState) == this.from) return new ActiveSource(this.source, type == \"input\" && conf.activateOnTyping ? 1 /* Pending */ : 0 /* Inactive */);\n    let explicitPos = this.explicitPos < 0 ? -1 : tr.changes.mapPos(this.explicitPos),\n      updated;\n    if (checkValid(this.result.validFor, tr.state, from, to)) return new ActiveResult(this.source, explicitPos, this.result, from, to);\n    if (this.result.update && (updated = this.result.update(this.result, from, to, new CompletionContext(tr.state, pos, explicitPos >= 0)))) return new ActiveResult(this.source, explicitPos, updated, updated.from, (_a = updated.to) !== null && _a !== void 0 ? _a : cur(tr.state));\n    return new ActiveSource(this.source, 1 /* Pending */, explicitPos);\n  }\n  handleChange(tr) {\n    return tr.changes.touchesRange(this.from, this.to) ? new ActiveSource(this.source, 0 /* Inactive */) : this.map(tr.changes);\n  }\n  map(mapping) {\n    return mapping.empty ? this : new ActiveResult(this.source, this.explicitPos < 0 ? -1 : mapping.mapPos(this.explicitPos), this.result, mapping.mapPos(this.from), mapping.mapPos(this.to, 1));\n  }\n}\nfunction checkValid(validFor, state, from, to) {\n  if (!validFor) return false;\n  let text = state.sliceDoc(from, to);\n  return typeof validFor == \"function\" ? validFor(text, from, to, state) : ensureAnchor(validFor, true).test(text);\n}\nconst startCompletionEffect = /*@__PURE__*/StateEffect.define();\nconst closeCompletionEffect = /*@__PURE__*/StateEffect.define();\nconst setActiveEffect = /*@__PURE__*/StateEffect.define({\n  map(sources, mapping) {\n    return sources.map(s => s.map(mapping));\n  }\n});\nconst setSelectedEffect = /*@__PURE__*/StateEffect.define();\nconst completionState = /*@__PURE__*/StateField.define({\n  create() {\n    return CompletionState.start();\n  },\n  update(value, tr) {\n    return value.update(tr);\n  },\n  provide: f => [showTooltip.from(f, val => val.tooltip), EditorView.contentAttributes.from(f, state => state.attrs)]\n});\nconst CompletionInteractMargin = 75;\n/**\nReturns a command that moves the completion selection forward or\nbackward by the given amount.\n*/\nfunction moveCompletionSelection(forward, by = \"option\") {\n  return view => {\n    let cState = view.state.field(completionState, false);\n    if (!cState || !cState.open || Date.now() - cState.open.timestamp < CompletionInteractMargin) return false;\n    let step = 1,\n      tooltip;\n    if (by == \"page\" && (tooltip = getTooltip(view, cState.open.tooltip))) step = Math.max(2, Math.floor(tooltip.dom.offsetHeight / tooltip.dom.querySelector(\"li\").offsetHeight) - 1);\n    let selected = cState.open.selected + step * (forward ? 1 : -1),\n      {\n        length\n      } = cState.open.options;\n    if (selected < 0) selected = by == \"page\" ? 0 : length - 1;else if (selected >= length) selected = by == \"page\" ? length - 1 : 0;\n    view.dispatch({\n      effects: setSelectedEffect.of(selected)\n    });\n    return true;\n  };\n}\n/**\nAccept the current completion.\n*/\nconst acceptCompletion = view => {\n  let cState = view.state.field(completionState, false);\n  if (view.state.readOnly || !cState || !cState.open || Date.now() - cState.open.timestamp < CompletionInteractMargin) return false;\n  applyCompletion(view, cState.open.options[cState.open.selected]);\n  return true;\n};\n/**\nExplicitly start autocompletion.\n*/\nconst startCompletion = view => {\n  let cState = view.state.field(completionState, false);\n  if (!cState) return false;\n  view.dispatch({\n    effects: startCompletionEffect.of(true)\n  });\n  return true;\n};\n/**\nClose the currently active completion.\n*/\nconst closeCompletion = view => {\n  let cState = view.state.field(completionState, false);\n  if (!cState || !cState.active.some(a => a.state != 0 /* Inactive */)) return false;\n  view.dispatch({\n    effects: closeCompletionEffect.of(null)\n  });\n  return true;\n};\nclass RunningQuery {\n  constructor(active, context) {\n    this.active = active;\n    this.context = context;\n    this.time = Date.now();\n    this.updates = [];\n    // Note that 'undefined' means 'not done yet', whereas 'null' means\n    // 'query returned null'.\n    this.done = undefined;\n  }\n}\nconst DebounceTime = 50,\n  MaxUpdateCount = 50,\n  MinAbortTime = 1000;\nconst completionPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {\n  constructor(view) {\n    this.view = view;\n    this.debounceUpdate = -1;\n    this.running = [];\n    this.debounceAccept = -1;\n    this.composing = 0 /* None */;\n    for (let active of view.state.field(completionState).active) if (active.state == 1 /* Pending */) this.startQuery(active);\n  }\n  update(update) {\n    let cState = update.state.field(completionState);\n    if (!update.selectionSet && !update.docChanged && update.startState.field(completionState) == cState) return;\n    let doesReset = update.transactions.some(tr => {\n      return (tr.selection || tr.docChanged) && !getUserEvent(tr);\n    });\n    for (let i = 0; i < this.running.length; i++) {\n      let query = this.running[i];\n      if (doesReset || query.updates.length + update.transactions.length > MaxUpdateCount && Date.now() - query.time > MinAbortTime) {\n        for (let handler of query.context.abortListeners) {\n          try {\n            handler();\n          } catch (e) {\n            logException(this.view.state, e);\n          }\n        }\n        query.context.abortListeners = null;\n        this.running.splice(i--, 1);\n      } else {\n        query.updates.push(...update.transactions);\n      }\n    }\n    if (this.debounceUpdate > -1) clearTimeout(this.debounceUpdate);\n    this.debounceUpdate = cState.active.some(a => a.state == 1 /* Pending */ && !this.running.some(q => q.active.source == a.source)) ? setTimeout(() => this.startUpdate(), DebounceTime) : -1;\n    if (this.composing != 0 /* None */) for (let tr of update.transactions) {\n      if (getUserEvent(tr) == \"input\") this.composing = 2 /* Changed */;else if (this.composing == 2 /* Changed */ && tr.selection) this.composing = 3 /* ChangedAndMoved */;\n    }\n  }\n\n  startUpdate() {\n    this.debounceUpdate = -1;\n    let {\n        state\n      } = this.view,\n      cState = state.field(completionState);\n    for (let active of cState.active) {\n      if (active.state == 1 /* Pending */ && !this.running.some(r => r.active.source == active.source)) this.startQuery(active);\n    }\n  }\n  startQuery(active) {\n    let {\n        state\n      } = this.view,\n      pos = cur(state);\n    let context = new CompletionContext(state, pos, active.explicitPos == pos);\n    let pending = new RunningQuery(active, context);\n    this.running.push(pending);\n    Promise.resolve(active.source(context)).then(result => {\n      if (!pending.context.aborted) {\n        pending.done = result || null;\n        this.scheduleAccept();\n      }\n    }, err => {\n      this.view.dispatch({\n        effects: closeCompletionEffect.of(null)\n      });\n      logException(this.view.state, err);\n    });\n  }\n  scheduleAccept() {\n    if (this.running.every(q => q.done !== undefined)) this.accept();else if (this.debounceAccept < 0) this.debounceAccept = setTimeout(() => this.accept(), DebounceTime);\n  }\n  // For each finished query in this.running, try to create a result\n  // or, if appropriate, restart the query.\n  accept() {\n    var _a;\n    if (this.debounceAccept > -1) clearTimeout(this.debounceAccept);\n    this.debounceAccept = -1;\n    let updated = [];\n    let conf = this.view.state.facet(completionConfig);\n    for (let i = 0; i < this.running.length; i++) {\n      let query = this.running[i];\n      if (query.done === undefined) continue;\n      this.running.splice(i--, 1);\n      if (query.done) {\n        let active = new ActiveResult(query.active.source, query.active.explicitPos, query.done, query.done.from, (_a = query.done.to) !== null && _a !== void 0 ? _a : cur(query.updates.length ? query.updates[0].startState : this.view.state));\n        // Replay the transactions that happened since the start of\n        // the request and see if that preserves the result\n        for (let tr of query.updates) active = active.update(tr, conf);\n        if (active.hasResult()) {\n          updated.push(active);\n          continue;\n        }\n      }\n      let current = this.view.state.field(completionState).active.find(a => a.source == query.active.source);\n      if (current && current.state == 1 /* Pending */) {\n        if (query.done == null) {\n          // Explicitly failed. Should clear the pending status if it\n          // hasn't been re-set in the meantime.\n          let active = new ActiveSource(query.active.source, 0 /* Inactive */);\n          for (let tr of query.updates) active = active.update(tr, conf);\n          if (active.state != 1 /* Pending */) updated.push(active);\n        } else {\n          // Cleared by subsequent transactions. Restart.\n          this.startQuery(current);\n        }\n      }\n    }\n    if (updated.length) this.view.dispatch({\n      effects: setActiveEffect.of(updated)\n    });\n  }\n}, {\n  eventHandlers: {\n    blur() {\n      let state = this.view.state.field(completionState, false);\n      if (state && state.tooltip && this.view.state.facet(completionConfig).closeOnBlur) this.view.dispatch({\n        effects: closeCompletionEffect.of(null)\n      });\n    },\n    compositionstart() {\n      this.composing = 1 /* Started */;\n    },\n\n    compositionend() {\n      if (this.composing == 3 /* ChangedAndMoved */) {\n        // Safari fires compositionend events synchronously, possibly\n        // from inside an update, so dispatch asynchronously to avoid reentrancy\n        setTimeout(() => this.view.dispatch({\n          effects: startCompletionEffect.of(false)\n        }), 20);\n      }\n      this.composing = 0 /* None */;\n    }\n  }\n});\n\nconst baseTheme = /*@__PURE__*/EditorView.baseTheme({\n  \".cm-tooltip.cm-tooltip-autocomplete\": {\n    \"& > ul\": {\n      fontFamily: \"monospace\",\n      whiteSpace: \"nowrap\",\n      overflow: \"hidden auto\",\n      maxWidth_fallback: \"700px\",\n      maxWidth: \"min(700px, 95vw)\",\n      minWidth: \"250px\",\n      maxHeight: \"10em\",\n      listStyle: \"none\",\n      margin: 0,\n      padding: 0,\n      \"& > li\": {\n        overflowX: \"hidden\",\n        textOverflow: \"ellipsis\",\n        cursor: \"pointer\",\n        padding: \"1px 3px\",\n        lineHeight: 1.2\n      }\n    }\n  },\n  \"&light .cm-tooltip-autocomplete ul li[aria-selected]\": {\n    background: \"#17c\",\n    color: \"white\"\n  },\n  \"&dark .cm-tooltip-autocomplete ul li[aria-selected]\": {\n    background: \"#347\",\n    color: \"white\"\n  },\n  \".cm-completionListIncompleteTop:before, .cm-completionListIncompleteBottom:after\": {\n    content: '\"···\"',\n    opacity: 0.5,\n    display: \"block\",\n    textAlign: \"center\"\n  },\n  \".cm-tooltip.cm-completionInfo\": {\n    position: \"absolute\",\n    padding: \"3px 9px\",\n    width: \"max-content\",\n    maxWidth: \"300px\"\n  },\n  \".cm-completionInfo.cm-completionInfo-left\": {\n    right: \"100%\"\n  },\n  \".cm-completionInfo.cm-completionInfo-right\": {\n    left: \"100%\"\n  },\n  \"&light .cm-snippetField\": {\n    backgroundColor: \"#00000022\"\n  },\n  \"&dark .cm-snippetField\": {\n    backgroundColor: \"#ffffff22\"\n  },\n  \".cm-snippetFieldPosition\": {\n    verticalAlign: \"text-top\",\n    width: 0,\n    height: \"1.15em\",\n    margin: \"0 -0.7px -.7em\",\n    borderLeft: \"1.4px dotted #888\"\n  },\n  \".cm-completionMatchedText\": {\n    textDecoration: \"underline\"\n  },\n  \".cm-completionDetail\": {\n    marginLeft: \"0.5em\",\n    fontStyle: \"italic\"\n  },\n  \".cm-completionIcon\": {\n    fontSize: \"90%\",\n    width: \".8em\",\n    display: \"inline-block\",\n    textAlign: \"center\",\n    paddingRight: \".6em\",\n    opacity: \"0.6\"\n  },\n  \".cm-completionIcon-function, .cm-completionIcon-method\": {\n    \"&:after\": {\n      content: \"'ƒ'\"\n    }\n  },\n  \".cm-completionIcon-class\": {\n    \"&:after\": {\n      content: \"'○'\"\n    }\n  },\n  \".cm-completionIcon-interface\": {\n    \"&:after\": {\n      content: \"'◌'\"\n    }\n  },\n  \".cm-completionIcon-variable\": {\n    \"&:after\": {\n      content: \"'𝑥'\"\n    }\n  },\n  \".cm-completionIcon-constant\": {\n    \"&:after\": {\n      content: \"'𝐶'\"\n    }\n  },\n  \".cm-completionIcon-type\": {\n    \"&:after\": {\n      content: \"'𝑡'\"\n    }\n  },\n  \".cm-completionIcon-enum\": {\n    \"&:after\": {\n      content: \"'∪'\"\n    }\n  },\n  \".cm-completionIcon-property\": {\n    \"&:after\": {\n      content: \"'□'\"\n    }\n  },\n  \".cm-completionIcon-keyword\": {\n    \"&:after\": {\n      content: \"'🔑\\uFE0E'\"\n    } // Disable emoji rendering\n  },\n\n  \".cm-completionIcon-namespace\": {\n    \"&:after\": {\n      content: \"'▢'\"\n    }\n  },\n  \".cm-completionIcon-text\": {\n    \"&:after\": {\n      content: \"'abc'\",\n      fontSize: \"50%\",\n      verticalAlign: \"middle\"\n    }\n  }\n});\nclass FieldPos {\n  constructor(field, line, from, to) {\n    this.field = field;\n    this.line = line;\n    this.from = from;\n    this.to = to;\n  }\n}\nclass FieldRange {\n  constructor(field, from, to) {\n    this.field = field;\n    this.from = from;\n    this.to = to;\n  }\n  map(changes) {\n    let from = changes.mapPos(this.from, -1, MapMode.TrackDel);\n    let to = changes.mapPos(this.to, 1, MapMode.TrackDel);\n    return from == null || to == null ? null : new FieldRange(this.field, from, to);\n  }\n}\nclass Snippet {\n  constructor(lines, fieldPositions) {\n    this.lines = lines;\n    this.fieldPositions = fieldPositions;\n  }\n  instantiate(state, pos) {\n    let text = [],\n      lineStart = [pos];\n    let lineObj = state.doc.lineAt(pos),\n      baseIndent = /^\\s*/.exec(lineObj.text)[0];\n    for (let line of this.lines) {\n      if (text.length) {\n        let indent = baseIndent,\n          tabs = /^\\t*/.exec(line)[0].length;\n        for (let i = 0; i < tabs; i++) indent += state.facet(indentUnit);\n        lineStart.push(pos + indent.length - tabs);\n        line = indent + line.slice(tabs);\n      }\n      text.push(line);\n      pos += line.length + 1;\n    }\n    let ranges = this.fieldPositions.map(pos => new FieldRange(pos.field, lineStart[pos.line] + pos.from, lineStart[pos.line] + pos.to));\n    return {\n      text,\n      ranges\n    };\n  }\n  static parse(template) {\n    let fields = [];\n    let lines = [],\n      positions = [],\n      m;\n    for (let line of template.split(/\\r\\n?|\\n/)) {\n      while (m = /[#$]\\{(?:(\\d+)(?::([^}]*))?|([^}]*))\\}/.exec(line)) {\n        let seq = m[1] ? +m[1] : null,\n          name = m[2] || m[3] || \"\",\n          found = -1;\n        for (let i = 0; i < fields.length; i++) {\n          if (seq != null ? fields[i].seq == seq : name ? fields[i].name == name : false) found = i;\n        }\n        if (found < 0) {\n          let i = 0;\n          while (i < fields.length && (seq == null || fields[i].seq != null && fields[i].seq < seq)) i++;\n          fields.splice(i, 0, {\n            seq,\n            name\n          });\n          found = i;\n          for (let pos of positions) if (pos.field >= found) pos.field++;\n        }\n        positions.push(new FieldPos(found, lines.length, m.index, m.index + name.length));\n        line = line.slice(0, m.index) + name + line.slice(m.index + m[0].length);\n      }\n      lines.push(line);\n    }\n    return new Snippet(lines, positions);\n  }\n}\nlet fieldMarker = /*@__PURE__*/Decoration.widget({\n  widget: /*@__PURE__*/new class extends WidgetType {\n    toDOM() {\n      let span = document.createElement(\"span\");\n      span.className = \"cm-snippetFieldPosition\";\n      return span;\n    }\n    ignoreEvent() {\n      return false;\n    }\n  }()\n});\nlet fieldRange = /*@__PURE__*/Decoration.mark({\n  class: \"cm-snippetField\"\n});\nclass ActiveSnippet {\n  constructor(ranges, active) {\n    this.ranges = ranges;\n    this.active = active;\n    this.deco = Decoration.set(ranges.map(r => (r.from == r.to ? fieldMarker : fieldRange).range(r.from, r.to)));\n  }\n  map(changes) {\n    let ranges = [];\n    for (let r of this.ranges) {\n      let mapped = r.map(changes);\n      if (!mapped) return null;\n      ranges.push(mapped);\n    }\n    return new ActiveSnippet(ranges, this.active);\n  }\n  selectionInsideField(sel) {\n    return sel.ranges.every(range => this.ranges.some(r => r.field == this.active && r.from <= range.from && r.to >= range.to));\n  }\n}\nconst setActive = /*@__PURE__*/StateEffect.define({\n  map(value, changes) {\n    return value && value.map(changes);\n  }\n});\nconst moveToField = /*@__PURE__*/StateEffect.define();\nconst snippetState = /*@__PURE__*/StateField.define({\n  create() {\n    return null;\n  },\n  update(value, tr) {\n    for (let effect of tr.effects) {\n      if (effect.is(setActive)) return effect.value;\n      if (effect.is(moveToField) && value) return new ActiveSnippet(value.ranges, effect.value);\n    }\n    if (value && tr.docChanged) value = value.map(tr.changes);\n    if (value && tr.selection && !value.selectionInsideField(tr.selection)) value = null;\n    return value;\n  },\n  provide: f => EditorView.decorations.from(f, val => val ? val.deco : Decoration.none)\n});\nfunction fieldSelection(ranges, field) {\n  return EditorSelection.create(ranges.filter(r => r.field == field).map(r => EditorSelection.range(r.from, r.to)));\n}\n/**\nConvert a snippet template to a function that can\n[apply](https://codemirror.net/6/docs/ref/#autocomplete.Completion.apply) it. Snippets are written\nusing syntax like this:\n\n    \"for (let ${index} = 0; ${index} < ${end}; ${index}++) {\\n\\t${}\\n}\"\n\nEach `${}` placeholder (you may also use `#{}`) indicates a field\nthat the user can fill in. Its name, if any, will be the default\ncontent for the field.\n\nWhen the snippet is activated by calling the returned function,\nthe code is inserted at the given position. Newlines in the\ntemplate are indented by the indentation of the start line, plus\none [indent unit](https://codemirror.net/6/docs/ref/#language.indentUnit) per tab character after\nthe newline.\n\nOn activation, (all instances of) the first field are selected.\nThe user can move between fields with Tab and Shift-Tab as long as\nthe fields are active. Moving to the last field or moving the\ncursor out of the current field deactivates the fields.\n\nThe order of fields defaults to textual order, but you can add\nnumbers to placeholders (`${1}` or `${1:defaultText}`) to provide\na custom order.\n*/\nfunction snippet(template) {\n  let snippet = Snippet.parse(template);\n  return (editor, _completion, from, to) => {\n    let {\n      text,\n      ranges\n    } = snippet.instantiate(editor.state, from);\n    let spec = {\n      changes: {\n        from,\n        to,\n        insert: Text.of(text)\n      }\n    };\n    if (ranges.length) spec.selection = fieldSelection(ranges, 0);\n    if (ranges.length > 1) {\n      let active = new ActiveSnippet(ranges, 0);\n      let effects = spec.effects = [setActive.of(active)];\n      if (editor.state.field(snippetState, false) === undefined) effects.push(StateEffect.appendConfig.of([snippetState, addSnippetKeymap, snippetPointerHandler, baseTheme]));\n    }\n    editor.dispatch(editor.state.update(spec));\n  };\n}\nfunction moveField(dir) {\n  return ({\n    state,\n    dispatch\n  }) => {\n    let active = state.field(snippetState, false);\n    if (!active || dir < 0 && active.active == 0) return false;\n    let next = active.active + dir,\n      last = dir > 0 && !active.ranges.some(r => r.field == next + dir);\n    dispatch(state.update({\n      selection: fieldSelection(active.ranges, next),\n      effects: setActive.of(last ? null : new ActiveSnippet(active.ranges, next))\n    }));\n    return true;\n  };\n}\n/**\nA command that clears the active snippet, if any.\n*/\nconst clearSnippet = ({\n  state,\n  dispatch\n}) => {\n  let active = state.field(snippetState, false);\n  if (!active) return false;\n  dispatch(state.update({\n    effects: setActive.of(null)\n  }));\n  return true;\n};\n/**\nMove to the next snippet field, if available.\n*/\nconst nextSnippetField = /*@__PURE__*/moveField(1);\n/**\nMove to the previous snippet field, if available.\n*/\nconst prevSnippetField = /*@__PURE__*/moveField(-1);\nconst defaultSnippetKeymap = [{\n  key: \"Tab\",\n  run: nextSnippetField,\n  shift: prevSnippetField\n}, {\n  key: \"Escape\",\n  run: clearSnippet\n}];\n/**\nA facet that can be used to configure the key bindings used by\nsnippets. The default binds Tab to\n[`nextSnippetField`](https://codemirror.net/6/docs/ref/#autocomplete.nextSnippetField), Shift-Tab to\n[`prevSnippetField`](https://codemirror.net/6/docs/ref/#autocomplete.prevSnippetField), and Escape\nto [`clearSnippet`](https://codemirror.net/6/docs/ref/#autocomplete.clearSnippet).\n*/\nconst snippetKeymap = /*@__PURE__*/Facet.define({\n  combine(maps) {\n    return maps.length ? maps[0] : defaultSnippetKeymap;\n  }\n});\nconst addSnippetKeymap = /*@__PURE__*/Prec.highest( /*@__PURE__*/keymap.compute([snippetKeymap], state => state.facet(snippetKeymap)));\n/**\nCreate a completion from a snippet. Returns an object with the\nproperties from `completion`, plus an `apply` function that\napplies the snippet.\n*/\nfunction snippetCompletion(template, completion) {\n  return Object.assign(Object.assign({}, completion), {\n    apply: snippet(template)\n  });\n}\nconst snippetPointerHandler = /*@__PURE__*/EditorView.domEventHandlers({\n  mousedown(event, view) {\n    let active = view.state.field(snippetState, false),\n      pos;\n    if (!active || (pos = view.posAtCoords({\n      x: event.clientX,\n      y: event.clientY\n    })) == null) return false;\n    let match = active.ranges.find(r => r.from <= pos && r.to >= pos);\n    if (!match || match.field == active.active) return false;\n    view.dispatch({\n      selection: fieldSelection(active.ranges, match.field),\n      effects: setActive.of(active.ranges.some(r => r.field > match.field) ? new ActiveSnippet(active.ranges, match.field) : null)\n    });\n    return true;\n  }\n});\nfunction wordRE(wordChars) {\n  let escaped = wordChars.replace(/[\\\\[.+*?(){|^$]/g, \"\\\\$&\");\n  try {\n    return new RegExp(`[\\\\p{Alphabetic}\\\\p{Number}_${escaped}]+`, \"ug\");\n  } catch (_a) {\n    return new RegExp(`[\\w${escaped}]`, \"g\");\n  }\n}\nfunction mapRE(re, f) {\n  return new RegExp(f(re.source), re.unicode ? \"u\" : \"\");\n}\nconst wordCaches = /*@__PURE__*/Object.create(null);\nfunction wordCache(wordChars) {\n  return wordCaches[wordChars] || (wordCaches[wordChars] = new WeakMap());\n}\nfunction storeWords(doc, wordRE, result, seen, ignoreAt) {\n  for (let lines = doc.iterLines(), pos = 0; !lines.next().done;) {\n    let {\n        value\n      } = lines,\n      m;\n    wordRE.lastIndex = 0;\n    while (m = wordRE.exec(value)) {\n      if (!seen[m[0]] && pos + m.index != ignoreAt) {\n        result.push({\n          type: \"text\",\n          label: m[0]\n        });\n        seen[m[0]] = true;\n        if (result.length >= 2000 /* MaxList */) return;\n      }\n    }\n    pos += value.length + 1;\n  }\n}\nfunction collectWords(doc, cache, wordRE, to, ignoreAt) {\n  let big = doc.length >= 1000 /* MinCacheLen */;\n  let cached = big && cache.get(doc);\n  if (cached) return cached;\n  let result = [],\n    seen = Object.create(null);\n  if (doc.children) {\n    let pos = 0;\n    for (let ch of doc.children) {\n      if (ch.length >= 1000 /* MinCacheLen */) {\n        for (let c of collectWords(ch, cache, wordRE, to - pos, ignoreAt - pos)) {\n          if (!seen[c.label]) {\n            seen[c.label] = true;\n            result.push(c);\n          }\n        }\n      } else {\n        storeWords(ch, wordRE, result, seen, ignoreAt - pos);\n      }\n      pos += ch.length + 1;\n    }\n  } else {\n    storeWords(doc, wordRE, result, seen, ignoreAt);\n  }\n  if (big && result.length < 2000 /* MaxList */) cache.set(doc, result);\n  return result;\n}\n/**\nA completion source that will scan the document for words (using a\n[character categorizer](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer)), and\nreturn those as completions.\n*/\nconst completeAnyWord = context => {\n  let wordChars = context.state.languageDataAt(\"wordChars\", context.pos).join(\"\");\n  let re = wordRE(wordChars);\n  let token = context.matchBefore(mapRE(re, s => s + \"$\"));\n  if (!token && !context.explicit) return null;\n  let from = token ? token.from : context.pos;\n  let options = collectWords(context.state.doc, wordCache(wordChars), re, 50000 /* Range */, from);\n  return {\n    from,\n    options,\n    validFor: mapRE(re, s => \"^\" + s)\n  };\n};\nconst defaults = {\n  brackets: [\"(\", \"[\", \"{\", \"'\", '\"'],\n  before: \")]}:;>\"\n};\nconst closeBracketEffect = /*@__PURE__*/StateEffect.define({\n  map(value, mapping) {\n    let mapped = mapping.mapPos(value, -1, MapMode.TrackAfter);\n    return mapped == null ? undefined : mapped;\n  }\n});\nconst skipBracketEffect = /*@__PURE__*/StateEffect.define({\n  map(value, mapping) {\n    return mapping.mapPos(value);\n  }\n});\nconst closedBracket = /*@__PURE__*/new class extends RangeValue {}();\nclosedBracket.startSide = 1;\nclosedBracket.endSide = -1;\nconst bracketState = /*@__PURE__*/StateField.define({\n  create() {\n    return RangeSet.empty;\n  },\n  update(value, tr) {\n    if (tr.selection) {\n      let lineStart = tr.state.doc.lineAt(tr.selection.main.head).from;\n      let prevLineStart = tr.startState.doc.lineAt(tr.startState.selection.main.head).from;\n      if (lineStart != tr.changes.mapPos(prevLineStart, -1)) value = RangeSet.empty;\n    }\n    value = value.map(tr.changes);\n    for (let effect of tr.effects) {\n      if (effect.is(closeBracketEffect)) value = value.update({\n        add: [closedBracket.range(effect.value, effect.value + 1)]\n      });else if (effect.is(skipBracketEffect)) value = value.update({\n        filter: from => from != effect.value\n      });\n    }\n    return value;\n  }\n});\n/**\nExtension to enable bracket-closing behavior. When a closeable\nbracket is typed, its closing bracket is immediately inserted\nafter the cursor. When closing a bracket directly in front of a\nclosing bracket inserted by the extension, the cursor moves over\nthat bracket.\n*/\nfunction closeBrackets() {\n  return [inputHandler, bracketState];\n}\nconst definedClosing = \"()[]{}<>\";\nfunction closing(ch) {\n  for (let i = 0; i < definedClosing.length; i += 2) if (definedClosing.charCodeAt(i) == ch) return definedClosing.charAt(i + 1);\n  return fromCodePoint(ch < 128 ? ch : ch + 1);\n}\nfunction config(state, pos) {\n  return state.languageDataAt(\"closeBrackets\", pos)[0] || defaults;\n}\nconst android = typeof navigator == \"object\" && /*@__PURE__*/ /Android\\b/.test(navigator.userAgent);\nconst inputHandler = /*@__PURE__*/EditorView.inputHandler.of((view, from, to, insert) => {\n  if ((android ? view.composing : view.compositionStarted) || view.state.readOnly) return false;\n  let sel = view.state.selection.main;\n  if (insert.length > 2 || insert.length == 2 && codePointSize(codePointAt(insert, 0)) == 1 || from != sel.from || to != sel.to) return false;\n  let tr = insertBracket(view.state, insert);\n  if (!tr) return false;\n  view.dispatch(tr);\n  return true;\n});\n/**\nCommand that implements deleting a pair of matching brackets when\nthe cursor is between them.\n*/\nconst deleteBracketPair = ({\n  state,\n  dispatch\n}) => {\n  if (state.readOnly) return false;\n  let conf = config(state, state.selection.main.head);\n  let tokens = conf.brackets || defaults.brackets;\n  let dont = null,\n    changes = state.changeByRange(range => {\n      if (range.empty) {\n        let before = prevChar(state.doc, range.head);\n        for (let token of tokens) {\n          if (token == before && nextChar(state.doc, range.head) == closing(codePointAt(token, 0))) return {\n            changes: {\n              from: range.head - token.length,\n              to: range.head + token.length\n            },\n            range: EditorSelection.cursor(range.head - token.length),\n            userEvent: \"delete.backward\"\n          };\n        }\n      }\n      return {\n        range: dont = range\n      };\n    });\n  if (!dont) dispatch(state.update(changes, {\n    scrollIntoView: true\n  }));\n  return !dont;\n};\n/**\nClose-brackets related key bindings. Binds Backspace to\n[`deleteBracketPair`](https://codemirror.net/6/docs/ref/#autocomplete.deleteBracketPair).\n*/\nconst closeBracketsKeymap = [{\n  key: \"Backspace\",\n  run: deleteBracketPair\n}];\n/**\nImplements the extension's behavior on text insertion. If the\ngiven string counts as a bracket in the language around the\nselection, and replacing the selection with it requires custom\nbehavior (inserting a closing version or skipping past a\npreviously-closed bracket), this function returns a transaction\nrepresenting that custom behavior. (You only need this if you want\nto programmatically insert brackets—the\n[`closeBrackets`](https://codemirror.net/6/docs/ref/#autocomplete.closeBrackets) extension will\ntake care of running this for user input.)\n*/\nfunction insertBracket(state, bracket) {\n  let conf = config(state, state.selection.main.head);\n  let tokens = conf.brackets || defaults.brackets;\n  for (let tok of tokens) {\n    let closed = closing(codePointAt(tok, 0));\n    if (bracket == tok) return closed == tok ? handleSame(state, tok, tokens.indexOf(tok + tok + tok) > -1) : handleOpen(state, tok, closed, conf.before || defaults.before);\n    if (bracket == closed && closedBracketAt(state, state.selection.main.from)) return handleClose(state, tok, closed);\n  }\n  return null;\n}\nfunction closedBracketAt(state, pos) {\n  let found = false;\n  state.field(bracketState).between(0, state.doc.length, from => {\n    if (from == pos) found = true;\n  });\n  return found;\n}\nfunction nextChar(doc, pos) {\n  let next = doc.sliceString(pos, pos + 2);\n  return next.slice(0, codePointSize(codePointAt(next, 0)));\n}\nfunction prevChar(doc, pos) {\n  let prev = doc.sliceString(pos - 2, pos);\n  return codePointSize(codePointAt(prev, 0)) == prev.length ? prev : prev.slice(1);\n}\nfunction handleOpen(state, open, close, closeBefore) {\n  let dont = null,\n    changes = state.changeByRange(range => {\n      if (!range.empty) return {\n        changes: [{\n          insert: open,\n          from: range.from\n        }, {\n          insert: close,\n          from: range.to\n        }],\n        effects: closeBracketEffect.of(range.to + open.length),\n        range: EditorSelection.range(range.anchor + open.length, range.head + open.length)\n      };\n      let next = nextChar(state.doc, range.head);\n      if (!next || /\\s/.test(next) || closeBefore.indexOf(next) > -1) return {\n        changes: {\n          insert: open + close,\n          from: range.head\n        },\n        effects: closeBracketEffect.of(range.head + open.length),\n        range: EditorSelection.cursor(range.head + open.length)\n      };\n      return {\n        range: dont = range\n      };\n    });\n  return dont ? null : state.update(changes, {\n    scrollIntoView: true,\n    userEvent: \"input.type\"\n  });\n}\nfunction handleClose(state, _open, close) {\n  let dont = null,\n    moved = state.selection.ranges.map(range => {\n      if (range.empty && nextChar(state.doc, range.head) == close) return EditorSelection.cursor(range.head + close.length);\n      return dont = range;\n    });\n  return dont ? null : state.update({\n    selection: EditorSelection.create(moved, state.selection.mainIndex),\n    scrollIntoView: true,\n    effects: state.selection.ranges.map(({\n      from\n    }) => skipBracketEffect.of(from))\n  });\n}\n// Handles cases where the open and close token are the same, and\n// possibly triple quotes (as in `\"\"\"abc\"\"\"`-style quoting).\nfunction handleSame(state, token, allowTriple) {\n  let dont = null,\n    changes = state.changeByRange(range => {\n      if (!range.empty) return {\n        changes: [{\n          insert: token,\n          from: range.from\n        }, {\n          insert: token,\n          from: range.to\n        }],\n        effects: closeBracketEffect.of(range.to + token.length),\n        range: EditorSelection.range(range.anchor + token.length, range.head + token.length)\n      };\n      let pos = range.head,\n        next = nextChar(state.doc, pos);\n      if (next == token) {\n        if (nodeStart(state, pos)) {\n          return {\n            changes: {\n              insert: token + token,\n              from: pos\n            },\n            effects: closeBracketEffect.of(pos + token.length),\n            range: EditorSelection.cursor(pos + token.length)\n          };\n        } else if (closedBracketAt(state, pos)) {\n          let isTriple = allowTriple && state.sliceDoc(pos, pos + token.length * 3) == token + token + token;\n          return {\n            range: EditorSelection.cursor(pos + token.length * (isTriple ? 3 : 1)),\n            effects: skipBracketEffect.of(pos)\n          };\n        }\n      } else if (allowTriple && state.sliceDoc(pos - 2 * token.length, pos) == token + token && nodeStart(state, pos - 2 * token.length)) {\n        return {\n          changes: {\n            insert: token + token + token + token,\n            from: pos\n          },\n          effects: closeBracketEffect.of(pos + token.length),\n          range: EditorSelection.cursor(pos + token.length)\n        };\n      } else if (state.charCategorizer(pos)(next) != CharCategory.Word) {\n        let prev = state.sliceDoc(pos - 1, pos);\n        if (prev != token && state.charCategorizer(pos)(prev) != CharCategory.Word && !probablyInString(state, pos, token)) return {\n          changes: {\n            insert: token + token,\n            from: pos\n          },\n          effects: closeBracketEffect.of(pos + token.length),\n          range: EditorSelection.cursor(pos + token.length)\n        };\n      }\n      return {\n        range: dont = range\n      };\n    });\n  return dont ? null : state.update(changes, {\n    scrollIntoView: true,\n    userEvent: \"input.type\"\n  });\n}\nfunction nodeStart(state, pos) {\n  let tree = syntaxTree(state).resolveInner(pos + 1);\n  return tree.parent && tree.from == pos;\n}\nfunction probablyInString(state, pos, quoteToken) {\n  let node = syntaxTree(state).resolveInner(pos, -1);\n  for (let i = 0; i < 5; i++) {\n    if (state.sliceDoc(node.from, node.from + quoteToken.length) == quoteToken) return true;\n    let parent = node.to == pos && node.parent;\n    if (!parent) break;\n    node = parent;\n  }\n  return false;\n}\n\n/**\nReturns an extension that enables autocompletion.\n*/\nfunction autocompletion(config = {}) {\n  return [completionState, completionConfig.of(config), completionPlugin, completionKeymapExt, baseTheme];\n}\n/**\nBasic keybindings for autocompletion.\n\n - Ctrl-Space: [`startCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.startCompletion)\n - Escape: [`closeCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.closeCompletion)\n - ArrowDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true)`\n - ArrowUp: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(false)`\n - PageDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true, \"page\")`\n - PageDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true, \"page\")`\n - Enter: [`acceptCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.acceptCompletion)\n*/\nconst completionKeymap = [{\n  key: \"Ctrl-Space\",\n  run: startCompletion\n}, {\n  key: \"Escape\",\n  run: closeCompletion\n}, {\n  key: \"ArrowDown\",\n  run: /*@__PURE__*/moveCompletionSelection(true)\n}, {\n  key: \"ArrowUp\",\n  run: /*@__PURE__*/moveCompletionSelection(false)\n}, {\n  key: \"PageDown\",\n  run: /*@__PURE__*/moveCompletionSelection(true, \"page\")\n}, {\n  key: \"PageUp\",\n  run: /*@__PURE__*/moveCompletionSelection(false, \"page\")\n}, {\n  key: \"Enter\",\n  run: acceptCompletion\n}];\nconst completionKeymapExt = /*@__PURE__*/Prec.highest( /*@__PURE__*/keymap.computeN([completionConfig], state => state.facet(completionConfig).defaultKeymap ? [completionKeymap] : []));\n/**\nGet the current completion status. When completions are available,\nthis will return `\"active\"`. When completions are pending (in the\nprocess of being queried), this returns `\"pending\"`. Otherwise, it\nreturns `null`.\n*/\nfunction completionStatus(state) {\n  let cState = state.field(completionState, false);\n  return cState && cState.active.some(a => a.state == 1 /* Pending */) ? \"pending\" : cState && cState.active.some(a => a.state != 0 /* Inactive */) ? \"active\" : null;\n}\nconst completionArrayCache = /*@__PURE__*/new WeakMap();\n/**\nReturns the available completions as an array.\n*/\nfunction currentCompletions(state) {\n  var _a;\n  let open = (_a = state.field(completionState, false)) === null || _a === void 0 ? void 0 : _a.open;\n  if (!open) return [];\n  let completions = completionArrayCache.get(open.options);\n  if (!completions) completionArrayCache.set(open.options, completions = open.options.map(o => o.completion));\n  return completions;\n}\n/**\nReturn the currently selected completion, if any.\n*/\nfunction selectedCompletion(state) {\n  var _a;\n  let open = (_a = state.field(completionState, false)) === null || _a === void 0 ? void 0 : _a.open;\n  return open ? open.options[open.selected].completion : null;\n}\n/**\nReturns the currently selected position in the active completion\nlist, or null if no completions are active.\n*/\nfunction selectedCompletionIndex(state) {\n  var _a;\n  let open = (_a = state.field(completionState, false)) === null || _a === void 0 ? void 0 : _a.open;\n  return open ? open.selected : null;\n}\n/**\nCreate an effect that can be attached to a transaction to change\nthe currently selected completion.\n*/\nfunction setSelectedCompletion(index) {\n  return setSelectedEffect.of(index);\n}\nexport { CompletionContext, acceptCompletion, autocompletion, clearSnippet, closeBrackets, closeBracketsKeymap, closeCompletion, completeAnyWord, completeFromList, completionKeymap, completionStatus, currentCompletions, deleteBracketPair, ifIn, ifNotIn, insertBracket, insertCompletionText, moveCompletionSelection, nextSnippetField, pickedCompletion, prevSnippetField, selectedCompletion, selectedCompletionIndex, setSelectedCompletion, snippet, snippetCompletion, snippetKeymap, startCompletion };","map":{"version":3,"names":["Annotation","EditorSelection","codePointAt","codePointSize","fromCodePoint","Facet","combineConfig","StateEffect","StateField","Prec","Text","MapMode","RangeValue","RangeSet","CharCategory","logException","Direction","showTooltip","EditorView","ViewPlugin","getTooltip","Decoration","WidgetType","keymap","syntaxTree","indentUnit","CompletionContext","constructor","state","pos","explicit","abortListeners","tokenBefore","types","token","resolveInner","indexOf","name","parent","from","to","text","sliceDoc","type","matchBefore","expr","line","doc","lineAt","start","Math","max","str","slice","found","search","ensureAnchor","aborted","addEventListener","listener","push","toSet","chars","flat","Object","keys","join","words","test","replace","prefixMatch","options","first","create","rest","label","i","length","source","RegExp","completeFromList","list","map","o","validFor","match","every","context","ifIn","nodes","ifNotIn","Option","completion","cur","selection","main","head","_a","addStart","addEnd","flags","ignoreCase","pickedCompletion","define","insertCompletionText","assign","changeByRange","range","changes","insert","cursor","len","empty","userEvent","applyCompletion","view","option","apply","result","dispatch","SourceCache","WeakMap","asSource","Array","isArray","known","get","set","FuzzyMatcher","pattern","folded","any","precise","byWord","p","char","size","part","upper","toUpperCase","toLowerCase","astral","word","direct","anyTo","e","min","next","preciseTo","byWordTo","byWordFolded","adjacentTo","adjacentStart","adjacentEnd","hasLower","wordAdjacent","prevType","ch","score","positions","completionConfig","combine","configs","activateOnTyping","override","closeOnBlur","maxRenderedOptions","defaultKeymap","optionClass","aboveCursor","icons","addToOptions","a","b","c","joinClass","concat","optionContent","config","content","render","icon","document","createElement","classList","add","split","cls","setAttribute","position","_s","labelElt","className","off","j","appendChild","createTextNode","span","detail","detailElt","textContent","sort","rangeAroundSelected","total","selected","floor","CompletionTooltip","stateField","info","placeInfo","read","measureInfo","write","positionInfo","key","cState","field","open","facet","dom","target","parentNode","nodeName","exec","id","preventDefault","createListBox","requestMeasure","mount","updateSel","update","startState","positioned","remove","updateSelectedOption","infoResult","then","node","addInfoPane","catch","opt","firstChild","nextSibling","hasAttribute","removeAttribute","scrollIntoView","sel","querySelector","listRect","getBoundingClientRect","infoRect","selRect","top","innerHeight","bottom","height","left","textDirection","RTL","spaceLeft","spaceRight","innerWidth","right","width","style","toggle","ul","phrase","li","completionTooltip","container","element","self","scrollTop","boost","sortOptions","active","hasResult","filter","getMatch","n","matcher","prev","cmpOption","CompletionDialog","attrs","tooltip","timestamp","setSelected","makeAttrs","build","conf","selectedValue","reduce","completionState","above","Date","now","mapPos","CompletionState","none","random","toString","tr","sources","languageDataAt","value","find","s","ActiveSource","some","touchesRange","sameResults","docChanged","effect","effects","is","setSelectedEffect","baseAttrs","iA","iB","endA","endB","dScore","localeCompare","getUserEvent","isUserEvent","explicitPos","event","handleUserEvent","handleChange","startCompletionEffect","closeCompletionEffect","setActiveEffect","ActiveResult","updated","checkValid","mapping","provide","f","val","contentAttributes","CompletionInteractMargin","moveCompletionSelection","forward","by","step","offsetHeight","of","acceptCompletion","readOnly","startCompletion","closeCompletion","RunningQuery","time","updates","done","undefined","DebounceTime","MaxUpdateCount","MinAbortTime","completionPlugin","fromClass","debounceUpdate","running","debounceAccept","composing","startQuery","selectionSet","doesReset","transactions","query","handler","splice","clearTimeout","q","setTimeout","startUpdate","r","pending","Promise","resolve","scheduleAccept","err","accept","current","eventHandlers","blur","compositionstart","compositionend","baseTheme","fontFamily","whiteSpace","overflow","maxWidth_fallback","maxWidth","minWidth","maxHeight","listStyle","margin","padding","overflowX","textOverflow","lineHeight","background","color","opacity","display","textAlign","backgroundColor","verticalAlign","borderLeft","textDecoration","marginLeft","fontStyle","fontSize","paddingRight","FieldPos","FieldRange","TrackDel","Snippet","lines","fieldPositions","instantiate","lineStart","lineObj","baseIndent","indent","tabs","ranges","parse","template","fields","m","seq","index","fieldMarker","widget","toDOM","ignoreEvent","fieldRange","mark","class","ActiveSnippet","deco","mapped","selectionInsideField","setActive","moveToField","snippetState","decorations","fieldSelection","snippet","editor","_completion","spec","appendConfig","addSnippetKeymap","snippetPointerHandler","moveField","dir","last","clearSnippet","nextSnippetField","prevSnippetField","defaultSnippetKeymap","run","shift","snippetKeymap","maps","highest","compute","snippetCompletion","domEventHandlers","mousedown","posAtCoords","x","clientX","y","clientY","wordRE","wordChars","escaped","mapRE","re","unicode","wordCaches","wordCache","storeWords","seen","ignoreAt","iterLines","lastIndex","collectWords","cache","big","cached","children","completeAnyWord","defaults","brackets","before","closeBracketEffect","TrackAfter","skipBracketEffect","closedBracket","startSide","endSide","bracketState","prevLineStart","closeBrackets","inputHandler","definedClosing","closing","charCodeAt","charAt","android","navigator","userAgent","compositionStarted","insertBracket","deleteBracketPair","tokens","dont","prevChar","nextChar","closeBracketsKeymap","bracket","tok","closed","handleSame","handleOpen","closedBracketAt","handleClose","between","sliceString","close","closeBefore","anchor","_open","moved","mainIndex","allowTriple","nodeStart","isTriple","charCategorizer","Word","probablyInString","tree","quoteToken","autocompletion","completionKeymapExt","completionKeymap","computeN","completionStatus","completionArrayCache","currentCompletions","completions","selectedCompletion","selectedCompletionIndex","setSelectedCompletion"],"sources":["D:/Notebooks/notebooks-web/vue/node_modules/@codemirror/basic-setup/node_modules/@codemirror/autocomplete/dist/index.js"],"sourcesContent":["import { Annotation, EditorSelection, codePointAt, codePointSize, fromCodePoint, Facet, combineConfig, StateEffect, StateField, Prec, Text, MapMode, RangeValue, RangeSet, CharCategory } from '@codemirror/state';\nimport { logException, Direction, showTooltip, EditorView, ViewPlugin, getTooltip, Decoration, WidgetType, keymap } from '@codemirror/view';\nimport { syntaxTree, indentUnit } from '@codemirror/language';\n\n/**\nAn instance of this is passed to completion source functions.\n*/\nclass CompletionContext {\n    /**\n    Create a new completion context. (Mostly useful for testing\n    completion sources—in the editor, the extension will create\n    these for you.)\n    */\n    constructor(\n    /**\n    The editor state that the completion happens in.\n    */\n    state, \n    /**\n    The position at which the completion is happening.\n    */\n    pos, \n    /**\n    Indicates whether completion was activated explicitly, or\n    implicitly by typing. The usual way to respond to this is to\n    only return completions when either there is part of a\n    completable entity before the cursor, or `explicit` is true.\n    */\n    explicit) {\n        this.state = state;\n        this.pos = pos;\n        this.explicit = explicit;\n        /**\n        @internal\n        */\n        this.abortListeners = [];\n    }\n    /**\n    Get the extent, content, and (if there is a token) type of the\n    token before `this.pos`.\n    */\n    tokenBefore(types) {\n        let token = syntaxTree(this.state).resolveInner(this.pos, -1);\n        while (token && types.indexOf(token.name) < 0)\n            token = token.parent;\n        return token ? { from: token.from, to: this.pos,\n            text: this.state.sliceDoc(token.from, this.pos),\n            type: token.type } : null;\n    }\n    /**\n    Get the match of the given expression directly before the\n    cursor.\n    */\n    matchBefore(expr) {\n        let line = this.state.doc.lineAt(this.pos);\n        let start = Math.max(line.from, this.pos - 250);\n        let str = line.text.slice(start - line.from, this.pos - line.from);\n        let found = str.search(ensureAnchor(expr, false));\n        return found < 0 ? null : { from: start + found, to: this.pos, text: str.slice(found) };\n    }\n    /**\n    Yields true when the query has been aborted. Can be useful in\n    asynchronous queries to avoid doing work that will be ignored.\n    */\n    get aborted() { return this.abortListeners == null; }\n    /**\n    Allows you to register abort handlers, which will be called when\n    the query is\n    [aborted](https://codemirror.net/6/docs/ref/#autocomplete.CompletionContext.aborted).\n    */\n    addEventListener(type, listener) {\n        if (type == \"abort\" && this.abortListeners)\n            this.abortListeners.push(listener);\n    }\n}\nfunction toSet(chars) {\n    let flat = Object.keys(chars).join(\"\");\n    let words = /\\w/.test(flat);\n    if (words)\n        flat = flat.replace(/\\w/g, \"\");\n    return `[${words ? \"\\\\w\" : \"\"}${flat.replace(/[^\\w\\s]/g, \"\\\\$&\")}]`;\n}\nfunction prefixMatch(options) {\n    let first = Object.create(null), rest = Object.create(null);\n    for (let { label } of options) {\n        first[label[0]] = true;\n        for (let i = 1; i < label.length; i++)\n            rest[label[i]] = true;\n    }\n    let source = toSet(first) + toSet(rest) + \"*$\";\n    return [new RegExp(\"^\" + source), new RegExp(source)];\n}\n/**\nGiven a a fixed array of options, return an autocompleter that\ncompletes them.\n*/\nfunction completeFromList(list) {\n    let options = list.map(o => typeof o == \"string\" ? { label: o } : o);\n    let [validFor, match] = options.every(o => /^\\w+$/.test(o.label)) ? [/\\w*$/, /\\w+$/] : prefixMatch(options);\n    return (context) => {\n        let token = context.matchBefore(match);\n        return token || context.explicit ? { from: token ? token.from : context.pos, options, validFor } : null;\n    };\n}\n/**\nWrap the given completion source so that it will only fire when the\ncursor is in a syntax node with one of the given names.\n*/\nfunction ifIn(nodes, source) {\n    return (context) => {\n        for (let pos = syntaxTree(context.state).resolveInner(context.pos, -1); pos; pos = pos.parent)\n            if (nodes.indexOf(pos.name) > -1)\n                return source(context);\n        return null;\n    };\n}\n/**\nWrap the given completion source so that it will not fire when the\ncursor is in a syntax node with one of the given names.\n*/\nfunction ifNotIn(nodes, source) {\n    return (context) => {\n        for (let pos = syntaxTree(context.state).resolveInner(context.pos, -1); pos; pos = pos.parent)\n            if (nodes.indexOf(pos.name) > -1)\n                return null;\n        return source(context);\n    };\n}\nclass Option {\n    constructor(completion, source, match) {\n        this.completion = completion;\n        this.source = source;\n        this.match = match;\n    }\n}\nfunction cur(state) { return state.selection.main.head; }\n// Make sure the given regexp has a $ at its end and, if `start` is\n// true, a ^ at its start.\nfunction ensureAnchor(expr, start) {\n    var _a;\n    let { source } = expr;\n    let addStart = start && source[0] != \"^\", addEnd = source[source.length - 1] != \"$\";\n    if (!addStart && !addEnd)\n        return expr;\n    return new RegExp(`${addStart ? \"^\" : \"\"}(?:${source})${addEnd ? \"$\" : \"\"}`, (_a = expr.flags) !== null && _a !== void 0 ? _a : (expr.ignoreCase ? \"i\" : \"\"));\n}\n/**\nThis annotation is added to transactions that are produced by\npicking a completion.\n*/\nconst pickedCompletion = /*@__PURE__*/Annotation.define();\n/**\nHelper function that returns a transaction spec which inserts a\ncompletion's text in the main selection range, and any other\nselection range that has the same text in front of it.\n*/\nfunction insertCompletionText(state, text, from, to) {\n    return Object.assign(Object.assign({}, state.changeByRange(range => {\n        if (range == state.selection.main)\n            return {\n                changes: { from: from, to: to, insert: text },\n                range: EditorSelection.cursor(from + text.length)\n            };\n        let len = to - from;\n        if (!range.empty ||\n            len && state.sliceDoc(range.from - len, range.from) != state.sliceDoc(from, to))\n            return { range };\n        return {\n            changes: { from: range.from - len, to: range.from, insert: text },\n            range: EditorSelection.cursor(range.from - len + text.length)\n        };\n    })), { userEvent: \"input.complete\" });\n}\nfunction applyCompletion(view, option) {\n    const apply = option.completion.apply || option.completion.label;\n    let result = option.source;\n    if (typeof apply == \"string\")\n        view.dispatch(insertCompletionText(view.state, apply, result.from, result.to));\n    else\n        apply(view, option.completion, result.from, result.to);\n}\nconst SourceCache = /*@__PURE__*/new WeakMap();\nfunction asSource(source) {\n    if (!Array.isArray(source))\n        return source;\n    let known = SourceCache.get(source);\n    if (!known)\n        SourceCache.set(source, known = completeFromList(source));\n    return known;\n}\n\n// A pattern matcher for fuzzy completion matching. Create an instance\n// once for a pattern, and then use that to match any number of\n// completions.\nclass FuzzyMatcher {\n    constructor(pattern) {\n        this.pattern = pattern;\n        this.chars = [];\n        this.folded = [];\n        // Buffers reused by calls to `match` to track matched character\n        // positions.\n        this.any = [];\n        this.precise = [];\n        this.byWord = [];\n        for (let p = 0; p < pattern.length;) {\n            let char = codePointAt(pattern, p), size = codePointSize(char);\n            this.chars.push(char);\n            let part = pattern.slice(p, p + size), upper = part.toUpperCase();\n            this.folded.push(codePointAt(upper == part ? part.toLowerCase() : upper, 0));\n            p += size;\n        }\n        this.astral = pattern.length != this.chars.length;\n    }\n    // Matches a given word (completion) against the pattern (input).\n    // Will return null for no match, and otherwise an array that starts\n    // with the match score, followed by any number of `from, to` pairs\n    // indicating the matched parts of `word`.\n    //\n    // The score is a number that is more negative the worse the match\n    // is. See `Penalty` above.\n    match(word) {\n        if (this.pattern.length == 0)\n            return [0];\n        if (word.length < this.pattern.length)\n            return null;\n        let { chars, folded, any, precise, byWord } = this;\n        // For single-character queries, only match when they occur right\n        // at the start\n        if (chars.length == 1) {\n            let first = codePointAt(word, 0);\n            return first == chars[0] ? [0, 0, codePointSize(first)]\n                : first == folded[0] ? [-200 /* CaseFold */, 0, codePointSize(first)] : null;\n        }\n        let direct = word.indexOf(this.pattern);\n        if (direct == 0)\n            return [0, 0, this.pattern.length];\n        let len = chars.length, anyTo = 0;\n        if (direct < 0) {\n            for (let i = 0, e = Math.min(word.length, 200); i < e && anyTo < len;) {\n                let next = codePointAt(word, i);\n                if (next == chars[anyTo] || next == folded[anyTo])\n                    any[anyTo++] = i;\n                i += codePointSize(next);\n            }\n            // No match, exit immediately\n            if (anyTo < len)\n                return null;\n        }\n        // This tracks the extent of the precise (non-folded, not\n        // necessarily adjacent) match\n        let preciseTo = 0;\n        // Tracks whether there is a match that hits only characters that\n        // appear to be starting words. `byWordFolded` is set to true when\n        // a case folded character is encountered in such a match\n        let byWordTo = 0, byWordFolded = false;\n        // If we've found a partial adjacent match, these track its state\n        let adjacentTo = 0, adjacentStart = -1, adjacentEnd = -1;\n        let hasLower = /[a-z]/.test(word), wordAdjacent = true;\n        // Go over the option's text, scanning for the various kinds of matches\n        for (let i = 0, e = Math.min(word.length, 200), prevType = 0 /* NonWord */; i < e && byWordTo < len;) {\n            let next = codePointAt(word, i);\n            if (direct < 0) {\n                if (preciseTo < len && next == chars[preciseTo])\n                    precise[preciseTo++] = i;\n                if (adjacentTo < len) {\n                    if (next == chars[adjacentTo] || next == folded[adjacentTo]) {\n                        if (adjacentTo == 0)\n                            adjacentStart = i;\n                        adjacentEnd = i + 1;\n                        adjacentTo++;\n                    }\n                    else {\n                        adjacentTo = 0;\n                    }\n                }\n            }\n            let ch, type = next < 0xff\n                ? (next >= 48 && next <= 57 || next >= 97 && next <= 122 ? 2 /* Lower */ : next >= 65 && next <= 90 ? 1 /* Upper */ : 0 /* NonWord */)\n                : ((ch = fromCodePoint(next)) != ch.toLowerCase() ? 1 /* Upper */ : ch != ch.toUpperCase() ? 2 /* Lower */ : 0 /* NonWord */);\n            if (!i || type == 1 /* Upper */ && hasLower || prevType == 0 /* NonWord */ && type != 0 /* NonWord */) {\n                if (chars[byWordTo] == next || (folded[byWordTo] == next && (byWordFolded = true)))\n                    byWord[byWordTo++] = i;\n                else if (byWord.length)\n                    wordAdjacent = false;\n            }\n            prevType = type;\n            i += codePointSize(next);\n        }\n        if (byWordTo == len && byWord[0] == 0 && wordAdjacent)\n            return this.result(-100 /* ByWord */ + (byWordFolded ? -200 /* CaseFold */ : 0), byWord, word);\n        if (adjacentTo == len && adjacentStart == 0)\n            return [-200 /* CaseFold */ - word.length, 0, adjacentEnd];\n        if (direct > -1)\n            return [-700 /* NotStart */ - word.length, direct, direct + this.pattern.length];\n        if (adjacentTo == len)\n            return [-200 /* CaseFold */ + -700 /* NotStart */ - word.length, adjacentStart, adjacentEnd];\n        if (byWordTo == len)\n            return this.result(-100 /* ByWord */ + (byWordFolded ? -200 /* CaseFold */ : 0) + -700 /* NotStart */ +\n                (wordAdjacent ? 0 : -1100 /* Gap */), byWord, word);\n        return chars.length == 2 ? null : this.result((any[0] ? -700 /* NotStart */ : 0) + -200 /* CaseFold */ + -1100 /* Gap */, any, word);\n    }\n    result(score, positions, word) {\n        let result = [score - word.length], i = 1;\n        for (let pos of positions) {\n            let to = pos + (this.astral ? codePointSize(codePointAt(word, pos)) : 1);\n            if (i > 1 && result[i - 1] == pos)\n                result[i - 1] = to;\n            else {\n                result[i++] = pos;\n                result[i++] = to;\n            }\n        }\n        return result;\n    }\n}\n\nconst completionConfig = /*@__PURE__*/Facet.define({\n    combine(configs) {\n        return combineConfig(configs, {\n            activateOnTyping: true,\n            override: null,\n            closeOnBlur: true,\n            maxRenderedOptions: 100,\n            defaultKeymap: true,\n            optionClass: () => \"\",\n            aboveCursor: false,\n            icons: true,\n            addToOptions: []\n        }, {\n            defaultKeymap: (a, b) => a && b,\n            closeOnBlur: (a, b) => a && b,\n            icons: (a, b) => a && b,\n            optionClass: (a, b) => c => joinClass(a(c), b(c)),\n            addToOptions: (a, b) => a.concat(b)\n        });\n    }\n});\nfunction joinClass(a, b) {\n    return a ? b ? a + \" \" + b : a : b;\n}\n\nfunction optionContent(config) {\n    let content = config.addToOptions.slice();\n    if (config.icons)\n        content.push({\n            render(completion) {\n                let icon = document.createElement(\"div\");\n                icon.classList.add(\"cm-completionIcon\");\n                if (completion.type)\n                    icon.classList.add(...completion.type.split(/\\s+/g).map(cls => \"cm-completionIcon-\" + cls));\n                icon.setAttribute(\"aria-hidden\", \"true\");\n                return icon;\n            },\n            position: 20\n        });\n    content.push({\n        render(completion, _s, match) {\n            let labelElt = document.createElement(\"span\");\n            labelElt.className = \"cm-completionLabel\";\n            let { label } = completion, off = 0;\n            for (let j = 1; j < match.length;) {\n                let from = match[j++], to = match[j++];\n                if (from > off)\n                    labelElt.appendChild(document.createTextNode(label.slice(off, from)));\n                let span = labelElt.appendChild(document.createElement(\"span\"));\n                span.appendChild(document.createTextNode(label.slice(from, to)));\n                span.className = \"cm-completionMatchedText\";\n                off = to;\n            }\n            if (off < label.length)\n                labelElt.appendChild(document.createTextNode(label.slice(off)));\n            return labelElt;\n        },\n        position: 50\n    }, {\n        render(completion) {\n            if (!completion.detail)\n                return null;\n            let detailElt = document.createElement(\"span\");\n            detailElt.className = \"cm-completionDetail\";\n            detailElt.textContent = completion.detail;\n            return detailElt;\n        },\n        position: 80\n    });\n    return content.sort((a, b) => a.position - b.position).map(a => a.render);\n}\nfunction rangeAroundSelected(total, selected, max) {\n    if (total <= max)\n        return { from: 0, to: total };\n    if (selected <= (total >> 1)) {\n        let off = Math.floor(selected / max);\n        return { from: off * max, to: (off + 1) * max };\n    }\n    let off = Math.floor((total - selected) / max);\n    return { from: total - (off + 1) * max, to: total - off * max };\n}\nclass CompletionTooltip {\n    constructor(view, stateField) {\n        this.view = view;\n        this.stateField = stateField;\n        this.info = null;\n        this.placeInfo = {\n            read: () => this.measureInfo(),\n            write: (pos) => this.positionInfo(pos),\n            key: this\n        };\n        let cState = view.state.field(stateField);\n        let { options, selected } = cState.open;\n        let config = view.state.facet(completionConfig);\n        this.optionContent = optionContent(config);\n        this.optionClass = config.optionClass;\n        this.range = rangeAroundSelected(options.length, selected, config.maxRenderedOptions);\n        this.dom = document.createElement(\"div\");\n        this.dom.className = \"cm-tooltip-autocomplete\";\n        this.dom.addEventListener(\"mousedown\", (e) => {\n            for (let dom = e.target, match; dom && dom != this.dom; dom = dom.parentNode) {\n                if (dom.nodeName == \"LI\" && (match = /-(\\d+)$/.exec(dom.id)) && +match[1] < options.length) {\n                    applyCompletion(view, options[+match[1]]);\n                    e.preventDefault();\n                    return;\n                }\n            }\n        });\n        this.list = this.dom.appendChild(this.createListBox(options, cState.id, this.range));\n        this.list.addEventListener(\"scroll\", () => {\n            if (this.info)\n                this.view.requestMeasure(this.placeInfo);\n        });\n    }\n    mount() { this.updateSel(); }\n    update(update) {\n        if (update.state.field(this.stateField) != update.startState.field(this.stateField))\n            this.updateSel();\n    }\n    positioned() {\n        if (this.info)\n            this.view.requestMeasure(this.placeInfo);\n    }\n    updateSel() {\n        let cState = this.view.state.field(this.stateField), open = cState.open;\n        if (open.selected < this.range.from || open.selected >= this.range.to) {\n            this.range = rangeAroundSelected(open.options.length, open.selected, this.view.state.facet(completionConfig).maxRenderedOptions);\n            this.list.remove();\n            this.list = this.dom.appendChild(this.createListBox(open.options, cState.id, this.range));\n            this.list.addEventListener(\"scroll\", () => {\n                if (this.info)\n                    this.view.requestMeasure(this.placeInfo);\n            });\n        }\n        if (this.updateSelectedOption(open.selected)) {\n            if (this.info) {\n                this.info.remove();\n                this.info = null;\n            }\n            let { completion } = open.options[open.selected];\n            let { info } = completion;\n            if (!info)\n                return;\n            let infoResult = typeof info === 'string' ? document.createTextNode(info) : info(completion);\n            if (!infoResult)\n                return;\n            if ('then' in infoResult) {\n                infoResult.then(node => {\n                    if (node && this.view.state.field(this.stateField, false) == cState)\n                        this.addInfoPane(node);\n                }).catch(e => logException(this.view.state, e, \"completion info\"));\n            }\n            else {\n                this.addInfoPane(infoResult);\n            }\n        }\n    }\n    addInfoPane(content) {\n        let dom = this.info = document.createElement(\"div\");\n        dom.className = \"cm-tooltip cm-completionInfo\";\n        dom.appendChild(content);\n        this.dom.appendChild(dom);\n        this.view.requestMeasure(this.placeInfo);\n    }\n    updateSelectedOption(selected) {\n        let set = null;\n        for (let opt = this.list.firstChild, i = this.range.from; opt; opt = opt.nextSibling, i++) {\n            if (i == selected) {\n                if (!opt.hasAttribute(\"aria-selected\")) {\n                    opt.setAttribute(\"aria-selected\", \"true\");\n                    set = opt;\n                }\n            }\n            else {\n                if (opt.hasAttribute(\"aria-selected\"))\n                    opt.removeAttribute(\"aria-selected\");\n            }\n        }\n        if (set)\n            scrollIntoView(this.list, set);\n        return set;\n    }\n    measureInfo() {\n        let sel = this.dom.querySelector(\"[aria-selected]\");\n        if (!sel || !this.info)\n            return null;\n        let listRect = this.dom.getBoundingClientRect();\n        let infoRect = this.info.getBoundingClientRect();\n        let selRect = sel.getBoundingClientRect();\n        if (selRect.top > Math.min(innerHeight, listRect.bottom) - 10 || selRect.bottom < Math.max(0, listRect.top) + 10)\n            return null;\n        let top = Math.max(0, Math.min(selRect.top, innerHeight - infoRect.height)) - listRect.top;\n        let left = this.view.textDirection == Direction.RTL;\n        let spaceLeft = listRect.left, spaceRight = innerWidth - listRect.right;\n        if (left && spaceLeft < Math.min(infoRect.width, spaceRight))\n            left = false;\n        else if (!left && spaceRight < Math.min(infoRect.width, spaceLeft))\n            left = true;\n        return { top, left };\n    }\n    positionInfo(pos) {\n        if (this.info) {\n            this.info.style.top = (pos ? pos.top : -1e6) + \"px\";\n            if (pos) {\n                this.info.classList.toggle(\"cm-completionInfo-left\", pos.left);\n                this.info.classList.toggle(\"cm-completionInfo-right\", !pos.left);\n            }\n        }\n    }\n    createListBox(options, id, range) {\n        const ul = document.createElement(\"ul\");\n        ul.id = id;\n        ul.setAttribute(\"role\", \"listbox\");\n        ul.setAttribute(\"aria-expanded\", \"true\");\n        ul.setAttribute(\"aria-label\", this.view.state.phrase(\"Completions\"));\n        for (let i = range.from; i < range.to; i++) {\n            let { completion, match } = options[i];\n            const li = ul.appendChild(document.createElement(\"li\"));\n            li.id = id + \"-\" + i;\n            li.setAttribute(\"role\", \"option\");\n            let cls = this.optionClass(completion);\n            if (cls)\n                li.className = cls;\n            for (let source of this.optionContent) {\n                let node = source(completion, this.view.state, match);\n                if (node)\n                    li.appendChild(node);\n            }\n        }\n        if (range.from)\n            ul.classList.add(\"cm-completionListIncompleteTop\");\n        if (range.to < options.length)\n            ul.classList.add(\"cm-completionListIncompleteBottom\");\n        return ul;\n    }\n}\n// We allocate a new function instance every time the completion\n// changes to force redrawing/repositioning of the tooltip\nfunction completionTooltip(stateField) {\n    return (view) => new CompletionTooltip(view, stateField);\n}\nfunction scrollIntoView(container, element) {\n    let parent = container.getBoundingClientRect();\n    let self = element.getBoundingClientRect();\n    if (self.top < parent.top)\n        container.scrollTop -= parent.top - self.top;\n    else if (self.bottom > parent.bottom)\n        container.scrollTop += self.bottom - parent.bottom;\n}\n\n// Used to pick a preferred option when two options with the same\n// label occur in the result.\nfunction score(option) {\n    return (option.boost || 0) * 100 + (option.apply ? 10 : 0) + (option.info ? 5 : 0) +\n        (option.type ? 1 : 0);\n}\nfunction sortOptions(active, state) {\n    let options = [], i = 0;\n    for (let a of active)\n        if (a.hasResult()) {\n            if (a.result.filter === false) {\n                let getMatch = a.result.getMatch;\n                for (let option of a.result.options) {\n                    let match = [1e9 - i++];\n                    if (getMatch)\n                        for (let n of getMatch(option))\n                            match.push(n);\n                    options.push(new Option(option, a, match));\n                }\n            }\n            else {\n                let matcher = new FuzzyMatcher(state.sliceDoc(a.from, a.to)), match;\n                for (let option of a.result.options)\n                    if (match = matcher.match(option.label)) {\n                        if (option.boost != null)\n                            match[0] += option.boost;\n                        options.push(new Option(option, a, match));\n                    }\n            }\n        }\n    let result = [], prev = null;\n    for (let opt of options.sort(cmpOption)) {\n        if (!prev || prev.label != opt.completion.label || prev.detail != opt.completion.detail ||\n            (prev.type != null && opt.completion.type != null && prev.type != opt.completion.type) ||\n            prev.apply != opt.completion.apply)\n            result.push(opt);\n        else if (score(opt.completion) > score(prev))\n            result[result.length - 1] = opt;\n        prev = opt.completion;\n    }\n    return result;\n}\nclass CompletionDialog {\n    constructor(options, attrs, tooltip, timestamp, selected) {\n        this.options = options;\n        this.attrs = attrs;\n        this.tooltip = tooltip;\n        this.timestamp = timestamp;\n        this.selected = selected;\n    }\n    setSelected(selected, id) {\n        return selected == this.selected || selected >= this.options.length ? this\n            : new CompletionDialog(this.options, makeAttrs(id, selected), this.tooltip, this.timestamp, selected);\n    }\n    static build(active, state, id, prev, conf) {\n        let options = sortOptions(active, state);\n        if (!options.length)\n            return null;\n        let selected = 0;\n        if (prev && prev.selected) {\n            let selectedValue = prev.options[prev.selected].completion;\n            for (let i = 0; i < options.length; i++)\n                if (options[i].completion == selectedValue) {\n                    selected = i;\n                    break;\n                }\n        }\n        return new CompletionDialog(options, makeAttrs(id, selected), {\n            pos: active.reduce((a, b) => b.hasResult() ? Math.min(a, b.from) : a, 1e8),\n            create: completionTooltip(completionState),\n            above: conf.aboveCursor,\n        }, prev ? prev.timestamp : Date.now(), selected);\n    }\n    map(changes) {\n        return new CompletionDialog(this.options, this.attrs, Object.assign(Object.assign({}, this.tooltip), { pos: changes.mapPos(this.tooltip.pos) }), this.timestamp, this.selected);\n    }\n}\nclass CompletionState {\n    constructor(active, id, open) {\n        this.active = active;\n        this.id = id;\n        this.open = open;\n    }\n    static start() {\n        return new CompletionState(none, \"cm-ac-\" + Math.floor(Math.random() * 2e6).toString(36), null);\n    }\n    update(tr) {\n        let { state } = tr, conf = state.facet(completionConfig);\n        let sources = conf.override ||\n            state.languageDataAt(\"autocomplete\", cur(state)).map(asSource);\n        let active = sources.map(source => {\n            let value = this.active.find(s => s.source == source) ||\n                new ActiveSource(source, this.active.some(a => a.state != 0 /* Inactive */) ? 1 /* Pending */ : 0 /* Inactive */);\n            return value.update(tr, conf);\n        });\n        if (active.length == this.active.length && active.every((a, i) => a == this.active[i]))\n            active = this.active;\n        let open = tr.selection || active.some(a => a.hasResult() && tr.changes.touchesRange(a.from, a.to)) ||\n            !sameResults(active, this.active) ? CompletionDialog.build(active, state, this.id, this.open, conf)\n            : this.open && tr.docChanged ? this.open.map(tr.changes) : this.open;\n        if (!open && active.every(a => a.state != 1 /* Pending */) && active.some(a => a.hasResult()))\n            active = active.map(a => a.hasResult() ? new ActiveSource(a.source, 0 /* Inactive */) : a);\n        for (let effect of tr.effects)\n            if (effect.is(setSelectedEffect))\n                open = open && open.setSelected(effect.value, this.id);\n        return active == this.active && open == this.open ? this : new CompletionState(active, this.id, open);\n    }\n    get tooltip() { return this.open ? this.open.tooltip : null; }\n    get attrs() { return this.open ? this.open.attrs : baseAttrs; }\n}\nfunction sameResults(a, b) {\n    if (a == b)\n        return true;\n    for (let iA = 0, iB = 0;;) {\n        while (iA < a.length && !a[iA].hasResult)\n            iA++;\n        while (iB < b.length && !b[iB].hasResult)\n            iB++;\n        let endA = iA == a.length, endB = iB == b.length;\n        if (endA || endB)\n            return endA == endB;\n        if (a[iA++].result != b[iB++].result)\n            return false;\n    }\n}\nconst baseAttrs = {\n    \"aria-autocomplete\": \"list\"\n};\nfunction makeAttrs(id, selected) {\n    return {\n        \"aria-autocomplete\": \"list\",\n        \"aria-haspopup\": \"listbox\",\n        \"aria-activedescendant\": id + \"-\" + selected,\n        \"aria-controls\": id\n    };\n}\nconst none = [];\nfunction cmpOption(a, b) {\n    let dScore = b.match[0] - a.match[0];\n    if (dScore)\n        return dScore;\n    return a.completion.label.localeCompare(b.completion.label);\n}\nfunction getUserEvent(tr) {\n    return tr.isUserEvent(\"input.type\") ? \"input\" : tr.isUserEvent(\"delete.backward\") ? \"delete\" : null;\n}\nclass ActiveSource {\n    constructor(source, state, explicitPos = -1) {\n        this.source = source;\n        this.state = state;\n        this.explicitPos = explicitPos;\n    }\n    hasResult() { return false; }\n    update(tr, conf) {\n        let event = getUserEvent(tr), value = this;\n        if (event)\n            value = value.handleUserEvent(tr, event, conf);\n        else if (tr.docChanged)\n            value = value.handleChange(tr);\n        else if (tr.selection && value.state != 0 /* Inactive */)\n            value = new ActiveSource(value.source, 0 /* Inactive */);\n        for (let effect of tr.effects) {\n            if (effect.is(startCompletionEffect))\n                value = new ActiveSource(value.source, 1 /* Pending */, effect.value ? cur(tr.state) : -1);\n            else if (effect.is(closeCompletionEffect))\n                value = new ActiveSource(value.source, 0 /* Inactive */);\n            else if (effect.is(setActiveEffect))\n                for (let active of effect.value)\n                    if (active.source == value.source)\n                        value = active;\n        }\n        return value;\n    }\n    handleUserEvent(tr, type, conf) {\n        return type == \"delete\" || !conf.activateOnTyping ? this.map(tr.changes) : new ActiveSource(this.source, 1 /* Pending */);\n    }\n    handleChange(tr) {\n        return tr.changes.touchesRange(cur(tr.startState)) ? new ActiveSource(this.source, 0 /* Inactive */) : this.map(tr.changes);\n    }\n    map(changes) {\n        return changes.empty || this.explicitPos < 0 ? this : new ActiveSource(this.source, this.state, changes.mapPos(this.explicitPos));\n    }\n}\nclass ActiveResult extends ActiveSource {\n    constructor(source, explicitPos, result, from, to) {\n        super(source, 2 /* Result */, explicitPos);\n        this.result = result;\n        this.from = from;\n        this.to = to;\n    }\n    hasResult() { return true; }\n    handleUserEvent(tr, type, conf) {\n        var _a;\n        let from = tr.changes.mapPos(this.from), to = tr.changes.mapPos(this.to, 1);\n        let pos = cur(tr.state);\n        if ((this.explicitPos < 0 ? pos <= from : pos < this.from) ||\n            pos > to ||\n            type == \"delete\" && cur(tr.startState) == this.from)\n            return new ActiveSource(this.source, type == \"input\" && conf.activateOnTyping ? 1 /* Pending */ : 0 /* Inactive */);\n        let explicitPos = this.explicitPos < 0 ? -1 : tr.changes.mapPos(this.explicitPos), updated;\n        if (checkValid(this.result.validFor, tr.state, from, to))\n            return new ActiveResult(this.source, explicitPos, this.result, from, to);\n        if (this.result.update &&\n            (updated = this.result.update(this.result, from, to, new CompletionContext(tr.state, pos, explicitPos >= 0))))\n            return new ActiveResult(this.source, explicitPos, updated, updated.from, (_a = updated.to) !== null && _a !== void 0 ? _a : cur(tr.state));\n        return new ActiveSource(this.source, 1 /* Pending */, explicitPos);\n    }\n    handleChange(tr) {\n        return tr.changes.touchesRange(this.from, this.to) ? new ActiveSource(this.source, 0 /* Inactive */) : this.map(tr.changes);\n    }\n    map(mapping) {\n        return mapping.empty ? this :\n            new ActiveResult(this.source, this.explicitPos < 0 ? -1 : mapping.mapPos(this.explicitPos), this.result, mapping.mapPos(this.from), mapping.mapPos(this.to, 1));\n    }\n}\nfunction checkValid(validFor, state, from, to) {\n    if (!validFor)\n        return false;\n    let text = state.sliceDoc(from, to);\n    return typeof validFor == \"function\" ? validFor(text, from, to, state) : ensureAnchor(validFor, true).test(text);\n}\nconst startCompletionEffect = /*@__PURE__*/StateEffect.define();\nconst closeCompletionEffect = /*@__PURE__*/StateEffect.define();\nconst setActiveEffect = /*@__PURE__*/StateEffect.define({\n    map(sources, mapping) { return sources.map(s => s.map(mapping)); }\n});\nconst setSelectedEffect = /*@__PURE__*/StateEffect.define();\nconst completionState = /*@__PURE__*/StateField.define({\n    create() { return CompletionState.start(); },\n    update(value, tr) { return value.update(tr); },\n    provide: f => [\n        showTooltip.from(f, val => val.tooltip),\n        EditorView.contentAttributes.from(f, state => state.attrs)\n    ]\n});\n\nconst CompletionInteractMargin = 75;\n/**\nReturns a command that moves the completion selection forward or\nbackward by the given amount.\n*/\nfunction moveCompletionSelection(forward, by = \"option\") {\n    return (view) => {\n        let cState = view.state.field(completionState, false);\n        if (!cState || !cState.open || Date.now() - cState.open.timestamp < CompletionInteractMargin)\n            return false;\n        let step = 1, tooltip;\n        if (by == \"page\" && (tooltip = getTooltip(view, cState.open.tooltip)))\n            step = Math.max(2, Math.floor(tooltip.dom.offsetHeight /\n                tooltip.dom.querySelector(\"li\").offsetHeight) - 1);\n        let selected = cState.open.selected + step * (forward ? 1 : -1), { length } = cState.open.options;\n        if (selected < 0)\n            selected = by == \"page\" ? 0 : length - 1;\n        else if (selected >= length)\n            selected = by == \"page\" ? length - 1 : 0;\n        view.dispatch({ effects: setSelectedEffect.of(selected) });\n        return true;\n    };\n}\n/**\nAccept the current completion.\n*/\nconst acceptCompletion = (view) => {\n    let cState = view.state.field(completionState, false);\n    if (view.state.readOnly || !cState || !cState.open || Date.now() - cState.open.timestamp < CompletionInteractMargin)\n        return false;\n    applyCompletion(view, cState.open.options[cState.open.selected]);\n    return true;\n};\n/**\nExplicitly start autocompletion.\n*/\nconst startCompletion = (view) => {\n    let cState = view.state.field(completionState, false);\n    if (!cState)\n        return false;\n    view.dispatch({ effects: startCompletionEffect.of(true) });\n    return true;\n};\n/**\nClose the currently active completion.\n*/\nconst closeCompletion = (view) => {\n    let cState = view.state.field(completionState, false);\n    if (!cState || !cState.active.some(a => a.state != 0 /* Inactive */))\n        return false;\n    view.dispatch({ effects: closeCompletionEffect.of(null) });\n    return true;\n};\nclass RunningQuery {\n    constructor(active, context) {\n        this.active = active;\n        this.context = context;\n        this.time = Date.now();\n        this.updates = [];\n        // Note that 'undefined' means 'not done yet', whereas 'null' means\n        // 'query returned null'.\n        this.done = undefined;\n    }\n}\nconst DebounceTime = 50, MaxUpdateCount = 50, MinAbortTime = 1000;\nconst completionPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {\n    constructor(view) {\n        this.view = view;\n        this.debounceUpdate = -1;\n        this.running = [];\n        this.debounceAccept = -1;\n        this.composing = 0 /* None */;\n        for (let active of view.state.field(completionState).active)\n            if (active.state == 1 /* Pending */)\n                this.startQuery(active);\n    }\n    update(update) {\n        let cState = update.state.field(completionState);\n        if (!update.selectionSet && !update.docChanged && update.startState.field(completionState) == cState)\n            return;\n        let doesReset = update.transactions.some(tr => {\n            return (tr.selection || tr.docChanged) && !getUserEvent(tr);\n        });\n        for (let i = 0; i < this.running.length; i++) {\n            let query = this.running[i];\n            if (doesReset ||\n                query.updates.length + update.transactions.length > MaxUpdateCount && Date.now() - query.time > MinAbortTime) {\n                for (let handler of query.context.abortListeners) {\n                    try {\n                        handler();\n                    }\n                    catch (e) {\n                        logException(this.view.state, e);\n                    }\n                }\n                query.context.abortListeners = null;\n                this.running.splice(i--, 1);\n            }\n            else {\n                query.updates.push(...update.transactions);\n            }\n        }\n        if (this.debounceUpdate > -1)\n            clearTimeout(this.debounceUpdate);\n        this.debounceUpdate = cState.active.some(a => a.state == 1 /* Pending */ && !this.running.some(q => q.active.source == a.source))\n            ? setTimeout(() => this.startUpdate(), DebounceTime) : -1;\n        if (this.composing != 0 /* None */)\n            for (let tr of update.transactions) {\n                if (getUserEvent(tr) == \"input\")\n                    this.composing = 2 /* Changed */;\n                else if (this.composing == 2 /* Changed */ && tr.selection)\n                    this.composing = 3 /* ChangedAndMoved */;\n            }\n    }\n    startUpdate() {\n        this.debounceUpdate = -1;\n        let { state } = this.view, cState = state.field(completionState);\n        for (let active of cState.active) {\n            if (active.state == 1 /* Pending */ && !this.running.some(r => r.active.source == active.source))\n                this.startQuery(active);\n        }\n    }\n    startQuery(active) {\n        let { state } = this.view, pos = cur(state);\n        let context = new CompletionContext(state, pos, active.explicitPos == pos);\n        let pending = new RunningQuery(active, context);\n        this.running.push(pending);\n        Promise.resolve(active.source(context)).then(result => {\n            if (!pending.context.aborted) {\n                pending.done = result || null;\n                this.scheduleAccept();\n            }\n        }, err => {\n            this.view.dispatch({ effects: closeCompletionEffect.of(null) });\n            logException(this.view.state, err);\n        });\n    }\n    scheduleAccept() {\n        if (this.running.every(q => q.done !== undefined))\n            this.accept();\n        else if (this.debounceAccept < 0)\n            this.debounceAccept = setTimeout(() => this.accept(), DebounceTime);\n    }\n    // For each finished query in this.running, try to create a result\n    // or, if appropriate, restart the query.\n    accept() {\n        var _a;\n        if (this.debounceAccept > -1)\n            clearTimeout(this.debounceAccept);\n        this.debounceAccept = -1;\n        let updated = [];\n        let conf = this.view.state.facet(completionConfig);\n        for (let i = 0; i < this.running.length; i++) {\n            let query = this.running[i];\n            if (query.done === undefined)\n                continue;\n            this.running.splice(i--, 1);\n            if (query.done) {\n                let active = new ActiveResult(query.active.source, query.active.explicitPos, query.done, query.done.from, (_a = query.done.to) !== null && _a !== void 0 ? _a : cur(query.updates.length ? query.updates[0].startState : this.view.state));\n                // Replay the transactions that happened since the start of\n                // the request and see if that preserves the result\n                for (let tr of query.updates)\n                    active = active.update(tr, conf);\n                if (active.hasResult()) {\n                    updated.push(active);\n                    continue;\n                }\n            }\n            let current = this.view.state.field(completionState).active.find(a => a.source == query.active.source);\n            if (current && current.state == 1 /* Pending */) {\n                if (query.done == null) {\n                    // Explicitly failed. Should clear the pending status if it\n                    // hasn't been re-set in the meantime.\n                    let active = new ActiveSource(query.active.source, 0 /* Inactive */);\n                    for (let tr of query.updates)\n                        active = active.update(tr, conf);\n                    if (active.state != 1 /* Pending */)\n                        updated.push(active);\n                }\n                else {\n                    // Cleared by subsequent transactions. Restart.\n                    this.startQuery(current);\n                }\n            }\n        }\n        if (updated.length)\n            this.view.dispatch({ effects: setActiveEffect.of(updated) });\n    }\n}, {\n    eventHandlers: {\n        blur() {\n            let state = this.view.state.field(completionState, false);\n            if (state && state.tooltip && this.view.state.facet(completionConfig).closeOnBlur)\n                this.view.dispatch({ effects: closeCompletionEffect.of(null) });\n        },\n        compositionstart() {\n            this.composing = 1 /* Started */;\n        },\n        compositionend() {\n            if (this.composing == 3 /* ChangedAndMoved */) {\n                // Safari fires compositionend events synchronously, possibly\n                // from inside an update, so dispatch asynchronously to avoid reentrancy\n                setTimeout(() => this.view.dispatch({ effects: startCompletionEffect.of(false) }), 20);\n            }\n            this.composing = 0 /* None */;\n        }\n    }\n});\n\nconst baseTheme = /*@__PURE__*/EditorView.baseTheme({\n    \".cm-tooltip.cm-tooltip-autocomplete\": {\n        \"& > ul\": {\n            fontFamily: \"monospace\",\n            whiteSpace: \"nowrap\",\n            overflow: \"hidden auto\",\n            maxWidth_fallback: \"700px\",\n            maxWidth: \"min(700px, 95vw)\",\n            minWidth: \"250px\",\n            maxHeight: \"10em\",\n            listStyle: \"none\",\n            margin: 0,\n            padding: 0,\n            \"& > li\": {\n                overflowX: \"hidden\",\n                textOverflow: \"ellipsis\",\n                cursor: \"pointer\",\n                padding: \"1px 3px\",\n                lineHeight: 1.2\n            },\n        }\n    },\n    \"&light .cm-tooltip-autocomplete ul li[aria-selected]\": {\n        background: \"#17c\",\n        color: \"white\",\n    },\n    \"&dark .cm-tooltip-autocomplete ul li[aria-selected]\": {\n        background: \"#347\",\n        color: \"white\",\n    },\n    \".cm-completionListIncompleteTop:before, .cm-completionListIncompleteBottom:after\": {\n        content: '\"···\"',\n        opacity: 0.5,\n        display: \"block\",\n        textAlign: \"center\"\n    },\n    \".cm-tooltip.cm-completionInfo\": {\n        position: \"absolute\",\n        padding: \"3px 9px\",\n        width: \"max-content\",\n        maxWidth: \"300px\",\n    },\n    \".cm-completionInfo.cm-completionInfo-left\": { right: \"100%\" },\n    \".cm-completionInfo.cm-completionInfo-right\": { left: \"100%\" },\n    \"&light .cm-snippetField\": { backgroundColor: \"#00000022\" },\n    \"&dark .cm-snippetField\": { backgroundColor: \"#ffffff22\" },\n    \".cm-snippetFieldPosition\": {\n        verticalAlign: \"text-top\",\n        width: 0,\n        height: \"1.15em\",\n        margin: \"0 -0.7px -.7em\",\n        borderLeft: \"1.4px dotted #888\"\n    },\n    \".cm-completionMatchedText\": {\n        textDecoration: \"underline\"\n    },\n    \".cm-completionDetail\": {\n        marginLeft: \"0.5em\",\n        fontStyle: \"italic\"\n    },\n    \".cm-completionIcon\": {\n        fontSize: \"90%\",\n        width: \".8em\",\n        display: \"inline-block\",\n        textAlign: \"center\",\n        paddingRight: \".6em\",\n        opacity: \"0.6\"\n    },\n    \".cm-completionIcon-function, .cm-completionIcon-method\": {\n        \"&:after\": { content: \"'ƒ'\" }\n    },\n    \".cm-completionIcon-class\": {\n        \"&:after\": { content: \"'○'\" }\n    },\n    \".cm-completionIcon-interface\": {\n        \"&:after\": { content: \"'◌'\" }\n    },\n    \".cm-completionIcon-variable\": {\n        \"&:after\": { content: \"'𝑥'\" }\n    },\n    \".cm-completionIcon-constant\": {\n        \"&:after\": { content: \"'𝐶'\" }\n    },\n    \".cm-completionIcon-type\": {\n        \"&:after\": { content: \"'𝑡'\" }\n    },\n    \".cm-completionIcon-enum\": {\n        \"&:after\": { content: \"'∪'\" }\n    },\n    \".cm-completionIcon-property\": {\n        \"&:after\": { content: \"'□'\" }\n    },\n    \".cm-completionIcon-keyword\": {\n        \"&:after\": { content: \"'🔑\\uFE0E'\" } // Disable emoji rendering\n    },\n    \".cm-completionIcon-namespace\": {\n        \"&:after\": { content: \"'▢'\" }\n    },\n    \".cm-completionIcon-text\": {\n        \"&:after\": { content: \"'abc'\", fontSize: \"50%\", verticalAlign: \"middle\" }\n    }\n});\n\nclass FieldPos {\n    constructor(field, line, from, to) {\n        this.field = field;\n        this.line = line;\n        this.from = from;\n        this.to = to;\n    }\n}\nclass FieldRange {\n    constructor(field, from, to) {\n        this.field = field;\n        this.from = from;\n        this.to = to;\n    }\n    map(changes) {\n        let from = changes.mapPos(this.from, -1, MapMode.TrackDel);\n        let to = changes.mapPos(this.to, 1, MapMode.TrackDel);\n        return from == null || to == null ? null : new FieldRange(this.field, from, to);\n    }\n}\nclass Snippet {\n    constructor(lines, fieldPositions) {\n        this.lines = lines;\n        this.fieldPositions = fieldPositions;\n    }\n    instantiate(state, pos) {\n        let text = [], lineStart = [pos];\n        let lineObj = state.doc.lineAt(pos), baseIndent = /^\\s*/.exec(lineObj.text)[0];\n        for (let line of this.lines) {\n            if (text.length) {\n                let indent = baseIndent, tabs = /^\\t*/.exec(line)[0].length;\n                for (let i = 0; i < tabs; i++)\n                    indent += state.facet(indentUnit);\n                lineStart.push(pos + indent.length - tabs);\n                line = indent + line.slice(tabs);\n            }\n            text.push(line);\n            pos += line.length + 1;\n        }\n        let ranges = this.fieldPositions.map(pos => new FieldRange(pos.field, lineStart[pos.line] + pos.from, lineStart[pos.line] + pos.to));\n        return { text, ranges };\n    }\n    static parse(template) {\n        let fields = [];\n        let lines = [], positions = [], m;\n        for (let line of template.split(/\\r\\n?|\\n/)) {\n            while (m = /[#$]\\{(?:(\\d+)(?::([^}]*))?|([^}]*))\\}/.exec(line)) {\n                let seq = m[1] ? +m[1] : null, name = m[2] || m[3] || \"\", found = -1;\n                for (let i = 0; i < fields.length; i++) {\n                    if (seq != null ? fields[i].seq == seq : name ? fields[i].name == name : false)\n                        found = i;\n                }\n                if (found < 0) {\n                    let i = 0;\n                    while (i < fields.length && (seq == null || (fields[i].seq != null && fields[i].seq < seq)))\n                        i++;\n                    fields.splice(i, 0, { seq, name });\n                    found = i;\n                    for (let pos of positions)\n                        if (pos.field >= found)\n                            pos.field++;\n                }\n                positions.push(new FieldPos(found, lines.length, m.index, m.index + name.length));\n                line = line.slice(0, m.index) + name + line.slice(m.index + m[0].length);\n            }\n            lines.push(line);\n        }\n        return new Snippet(lines, positions);\n    }\n}\nlet fieldMarker = /*@__PURE__*/Decoration.widget({ widget: /*@__PURE__*/new class extends WidgetType {\n        toDOM() {\n            let span = document.createElement(\"span\");\n            span.className = \"cm-snippetFieldPosition\";\n            return span;\n        }\n        ignoreEvent() { return false; }\n    } });\nlet fieldRange = /*@__PURE__*/Decoration.mark({ class: \"cm-snippetField\" });\nclass ActiveSnippet {\n    constructor(ranges, active) {\n        this.ranges = ranges;\n        this.active = active;\n        this.deco = Decoration.set(ranges.map(r => (r.from == r.to ? fieldMarker : fieldRange).range(r.from, r.to)));\n    }\n    map(changes) {\n        let ranges = [];\n        for (let r of this.ranges) {\n            let mapped = r.map(changes);\n            if (!mapped)\n                return null;\n            ranges.push(mapped);\n        }\n        return new ActiveSnippet(ranges, this.active);\n    }\n    selectionInsideField(sel) {\n        return sel.ranges.every(range => this.ranges.some(r => r.field == this.active && r.from <= range.from && r.to >= range.to));\n    }\n}\nconst setActive = /*@__PURE__*/StateEffect.define({\n    map(value, changes) { return value && value.map(changes); }\n});\nconst moveToField = /*@__PURE__*/StateEffect.define();\nconst snippetState = /*@__PURE__*/StateField.define({\n    create() { return null; },\n    update(value, tr) {\n        for (let effect of tr.effects) {\n            if (effect.is(setActive))\n                return effect.value;\n            if (effect.is(moveToField) && value)\n                return new ActiveSnippet(value.ranges, effect.value);\n        }\n        if (value && tr.docChanged)\n            value = value.map(tr.changes);\n        if (value && tr.selection && !value.selectionInsideField(tr.selection))\n            value = null;\n        return value;\n    },\n    provide: f => EditorView.decorations.from(f, val => val ? val.deco : Decoration.none)\n});\nfunction fieldSelection(ranges, field) {\n    return EditorSelection.create(ranges.filter(r => r.field == field).map(r => EditorSelection.range(r.from, r.to)));\n}\n/**\nConvert a snippet template to a function that can\n[apply](https://codemirror.net/6/docs/ref/#autocomplete.Completion.apply) it. Snippets are written\nusing syntax like this:\n\n    \"for (let ${index} = 0; ${index} < ${end}; ${index}++) {\\n\\t${}\\n}\"\n\nEach `${}` placeholder (you may also use `#{}`) indicates a field\nthat the user can fill in. Its name, if any, will be the default\ncontent for the field.\n\nWhen the snippet is activated by calling the returned function,\nthe code is inserted at the given position. Newlines in the\ntemplate are indented by the indentation of the start line, plus\none [indent unit](https://codemirror.net/6/docs/ref/#language.indentUnit) per tab character after\nthe newline.\n\nOn activation, (all instances of) the first field are selected.\nThe user can move between fields with Tab and Shift-Tab as long as\nthe fields are active. Moving to the last field or moving the\ncursor out of the current field deactivates the fields.\n\nThe order of fields defaults to textual order, but you can add\nnumbers to placeholders (`${1}` or `${1:defaultText}`) to provide\na custom order.\n*/\nfunction snippet(template) {\n    let snippet = Snippet.parse(template);\n    return (editor, _completion, from, to) => {\n        let { text, ranges } = snippet.instantiate(editor.state, from);\n        let spec = { changes: { from, to, insert: Text.of(text) } };\n        if (ranges.length)\n            spec.selection = fieldSelection(ranges, 0);\n        if (ranges.length > 1) {\n            let active = new ActiveSnippet(ranges, 0);\n            let effects = spec.effects = [setActive.of(active)];\n            if (editor.state.field(snippetState, false) === undefined)\n                effects.push(StateEffect.appendConfig.of([snippetState, addSnippetKeymap, snippetPointerHandler, baseTheme]));\n        }\n        editor.dispatch(editor.state.update(spec));\n    };\n}\nfunction moveField(dir) {\n    return ({ state, dispatch }) => {\n        let active = state.field(snippetState, false);\n        if (!active || dir < 0 && active.active == 0)\n            return false;\n        let next = active.active + dir, last = dir > 0 && !active.ranges.some(r => r.field == next + dir);\n        dispatch(state.update({\n            selection: fieldSelection(active.ranges, next),\n            effects: setActive.of(last ? null : new ActiveSnippet(active.ranges, next))\n        }));\n        return true;\n    };\n}\n/**\nA command that clears the active snippet, if any.\n*/\nconst clearSnippet = ({ state, dispatch }) => {\n    let active = state.field(snippetState, false);\n    if (!active)\n        return false;\n    dispatch(state.update({ effects: setActive.of(null) }));\n    return true;\n};\n/**\nMove to the next snippet field, if available.\n*/\nconst nextSnippetField = /*@__PURE__*/moveField(1);\n/**\nMove to the previous snippet field, if available.\n*/\nconst prevSnippetField = /*@__PURE__*/moveField(-1);\nconst defaultSnippetKeymap = [\n    { key: \"Tab\", run: nextSnippetField, shift: prevSnippetField },\n    { key: \"Escape\", run: clearSnippet }\n];\n/**\nA facet that can be used to configure the key bindings used by\nsnippets. The default binds Tab to\n[`nextSnippetField`](https://codemirror.net/6/docs/ref/#autocomplete.nextSnippetField), Shift-Tab to\n[`prevSnippetField`](https://codemirror.net/6/docs/ref/#autocomplete.prevSnippetField), and Escape\nto [`clearSnippet`](https://codemirror.net/6/docs/ref/#autocomplete.clearSnippet).\n*/\nconst snippetKeymap = /*@__PURE__*/Facet.define({\n    combine(maps) { return maps.length ? maps[0] : defaultSnippetKeymap; }\n});\nconst addSnippetKeymap = /*@__PURE__*/Prec.highest(/*@__PURE__*/keymap.compute([snippetKeymap], state => state.facet(snippetKeymap)));\n/**\nCreate a completion from a snippet. Returns an object with the\nproperties from `completion`, plus an `apply` function that\napplies the snippet.\n*/\nfunction snippetCompletion(template, completion) {\n    return Object.assign(Object.assign({}, completion), { apply: snippet(template) });\n}\nconst snippetPointerHandler = /*@__PURE__*/EditorView.domEventHandlers({\n    mousedown(event, view) {\n        let active = view.state.field(snippetState, false), pos;\n        if (!active || (pos = view.posAtCoords({ x: event.clientX, y: event.clientY })) == null)\n            return false;\n        let match = active.ranges.find(r => r.from <= pos && r.to >= pos);\n        if (!match || match.field == active.active)\n            return false;\n        view.dispatch({\n            selection: fieldSelection(active.ranges, match.field),\n            effects: setActive.of(active.ranges.some(r => r.field > match.field) ? new ActiveSnippet(active.ranges, match.field) : null)\n        });\n        return true;\n    }\n});\n\nfunction wordRE(wordChars) {\n    let escaped = wordChars.replace(/[\\\\[.+*?(){|^$]/g, \"\\\\$&\");\n    try {\n        return new RegExp(`[\\\\p{Alphabetic}\\\\p{Number}_${escaped}]+`, \"ug\");\n    }\n    catch (_a) {\n        return new RegExp(`[\\w${escaped}]`, \"g\");\n    }\n}\nfunction mapRE(re, f) {\n    return new RegExp(f(re.source), re.unicode ? \"u\" : \"\");\n}\nconst wordCaches = /*@__PURE__*/Object.create(null);\nfunction wordCache(wordChars) {\n    return wordCaches[wordChars] || (wordCaches[wordChars] = new WeakMap);\n}\nfunction storeWords(doc, wordRE, result, seen, ignoreAt) {\n    for (let lines = doc.iterLines(), pos = 0; !lines.next().done;) {\n        let { value } = lines, m;\n        wordRE.lastIndex = 0;\n        while (m = wordRE.exec(value)) {\n            if (!seen[m[0]] && pos + m.index != ignoreAt) {\n                result.push({ type: \"text\", label: m[0] });\n                seen[m[0]] = true;\n                if (result.length >= 2000 /* MaxList */)\n                    return;\n            }\n        }\n        pos += value.length + 1;\n    }\n}\nfunction collectWords(doc, cache, wordRE, to, ignoreAt) {\n    let big = doc.length >= 1000 /* MinCacheLen */;\n    let cached = big && cache.get(doc);\n    if (cached)\n        return cached;\n    let result = [], seen = Object.create(null);\n    if (doc.children) {\n        let pos = 0;\n        for (let ch of doc.children) {\n            if (ch.length >= 1000 /* MinCacheLen */) {\n                for (let c of collectWords(ch, cache, wordRE, to - pos, ignoreAt - pos)) {\n                    if (!seen[c.label]) {\n                        seen[c.label] = true;\n                        result.push(c);\n                    }\n                }\n            }\n            else {\n                storeWords(ch, wordRE, result, seen, ignoreAt - pos);\n            }\n            pos += ch.length + 1;\n        }\n    }\n    else {\n        storeWords(doc, wordRE, result, seen, ignoreAt);\n    }\n    if (big && result.length < 2000 /* MaxList */)\n        cache.set(doc, result);\n    return result;\n}\n/**\nA completion source that will scan the document for words (using a\n[character categorizer](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer)), and\nreturn those as completions.\n*/\nconst completeAnyWord = context => {\n    let wordChars = context.state.languageDataAt(\"wordChars\", context.pos).join(\"\");\n    let re = wordRE(wordChars);\n    let token = context.matchBefore(mapRE(re, s => s + \"$\"));\n    if (!token && !context.explicit)\n        return null;\n    let from = token ? token.from : context.pos;\n    let options = collectWords(context.state.doc, wordCache(wordChars), re, 50000 /* Range */, from);\n    return { from, options, validFor: mapRE(re, s => \"^\" + s) };\n};\n\nconst defaults = {\n    brackets: [\"(\", \"[\", \"{\", \"'\", '\"'],\n    before: \")]}:;>\"\n};\nconst closeBracketEffect = /*@__PURE__*/StateEffect.define({\n    map(value, mapping) {\n        let mapped = mapping.mapPos(value, -1, MapMode.TrackAfter);\n        return mapped == null ? undefined : mapped;\n    }\n});\nconst skipBracketEffect = /*@__PURE__*/StateEffect.define({\n    map(value, mapping) { return mapping.mapPos(value); }\n});\nconst closedBracket = /*@__PURE__*/new class extends RangeValue {\n};\nclosedBracket.startSide = 1;\nclosedBracket.endSide = -1;\nconst bracketState = /*@__PURE__*/StateField.define({\n    create() { return RangeSet.empty; },\n    update(value, tr) {\n        if (tr.selection) {\n            let lineStart = tr.state.doc.lineAt(tr.selection.main.head).from;\n            let prevLineStart = tr.startState.doc.lineAt(tr.startState.selection.main.head).from;\n            if (lineStart != tr.changes.mapPos(prevLineStart, -1))\n                value = RangeSet.empty;\n        }\n        value = value.map(tr.changes);\n        for (let effect of tr.effects) {\n            if (effect.is(closeBracketEffect))\n                value = value.update({ add: [closedBracket.range(effect.value, effect.value + 1)] });\n            else if (effect.is(skipBracketEffect))\n                value = value.update({ filter: from => from != effect.value });\n        }\n        return value;\n    }\n});\n/**\nExtension to enable bracket-closing behavior. When a closeable\nbracket is typed, its closing bracket is immediately inserted\nafter the cursor. When closing a bracket directly in front of a\nclosing bracket inserted by the extension, the cursor moves over\nthat bracket.\n*/\nfunction closeBrackets() {\n    return [inputHandler, bracketState];\n}\nconst definedClosing = \"()[]{}<>\";\nfunction closing(ch) {\n    for (let i = 0; i < definedClosing.length; i += 2)\n        if (definedClosing.charCodeAt(i) == ch)\n            return definedClosing.charAt(i + 1);\n    return fromCodePoint(ch < 128 ? ch : ch + 1);\n}\nfunction config(state, pos) {\n    return state.languageDataAt(\"closeBrackets\", pos)[0] || defaults;\n}\nconst android = typeof navigator == \"object\" && /*@__PURE__*//Android\\b/.test(navigator.userAgent);\nconst inputHandler = /*@__PURE__*/EditorView.inputHandler.of((view, from, to, insert) => {\n    if ((android ? view.composing : view.compositionStarted) || view.state.readOnly)\n        return false;\n    let sel = view.state.selection.main;\n    if (insert.length > 2 || insert.length == 2 && codePointSize(codePointAt(insert, 0)) == 1 ||\n        from != sel.from || to != sel.to)\n        return false;\n    let tr = insertBracket(view.state, insert);\n    if (!tr)\n        return false;\n    view.dispatch(tr);\n    return true;\n});\n/**\nCommand that implements deleting a pair of matching brackets when\nthe cursor is between them.\n*/\nconst deleteBracketPair = ({ state, dispatch }) => {\n    if (state.readOnly)\n        return false;\n    let conf = config(state, state.selection.main.head);\n    let tokens = conf.brackets || defaults.brackets;\n    let dont = null, changes = state.changeByRange(range => {\n        if (range.empty) {\n            let before = prevChar(state.doc, range.head);\n            for (let token of tokens) {\n                if (token == before && nextChar(state.doc, range.head) == closing(codePointAt(token, 0)))\n                    return { changes: { from: range.head - token.length, to: range.head + token.length },\n                        range: EditorSelection.cursor(range.head - token.length),\n                        userEvent: \"delete.backward\" };\n            }\n        }\n        return { range: dont = range };\n    });\n    if (!dont)\n        dispatch(state.update(changes, { scrollIntoView: true }));\n    return !dont;\n};\n/**\nClose-brackets related key bindings. Binds Backspace to\n[`deleteBracketPair`](https://codemirror.net/6/docs/ref/#autocomplete.deleteBracketPair).\n*/\nconst closeBracketsKeymap = [\n    { key: \"Backspace\", run: deleteBracketPair }\n];\n/**\nImplements the extension's behavior on text insertion. If the\ngiven string counts as a bracket in the language around the\nselection, and replacing the selection with it requires custom\nbehavior (inserting a closing version or skipping past a\npreviously-closed bracket), this function returns a transaction\nrepresenting that custom behavior. (You only need this if you want\nto programmatically insert brackets—the\n[`closeBrackets`](https://codemirror.net/6/docs/ref/#autocomplete.closeBrackets) extension will\ntake care of running this for user input.)\n*/\nfunction insertBracket(state, bracket) {\n    let conf = config(state, state.selection.main.head);\n    let tokens = conf.brackets || defaults.brackets;\n    for (let tok of tokens) {\n        let closed = closing(codePointAt(tok, 0));\n        if (bracket == tok)\n            return closed == tok ? handleSame(state, tok, tokens.indexOf(tok + tok + tok) > -1)\n                : handleOpen(state, tok, closed, conf.before || defaults.before);\n        if (bracket == closed && closedBracketAt(state, state.selection.main.from))\n            return handleClose(state, tok, closed);\n    }\n    return null;\n}\nfunction closedBracketAt(state, pos) {\n    let found = false;\n    state.field(bracketState).between(0, state.doc.length, from => {\n        if (from == pos)\n            found = true;\n    });\n    return found;\n}\nfunction nextChar(doc, pos) {\n    let next = doc.sliceString(pos, pos + 2);\n    return next.slice(0, codePointSize(codePointAt(next, 0)));\n}\nfunction prevChar(doc, pos) {\n    let prev = doc.sliceString(pos - 2, pos);\n    return codePointSize(codePointAt(prev, 0)) == prev.length ? prev : prev.slice(1);\n}\nfunction handleOpen(state, open, close, closeBefore) {\n    let dont = null, changes = state.changeByRange(range => {\n        if (!range.empty)\n            return { changes: [{ insert: open, from: range.from }, { insert: close, from: range.to }],\n                effects: closeBracketEffect.of(range.to + open.length),\n                range: EditorSelection.range(range.anchor + open.length, range.head + open.length) };\n        let next = nextChar(state.doc, range.head);\n        if (!next || /\\s/.test(next) || closeBefore.indexOf(next) > -1)\n            return { changes: { insert: open + close, from: range.head },\n                effects: closeBracketEffect.of(range.head + open.length),\n                range: EditorSelection.cursor(range.head + open.length) };\n        return { range: dont = range };\n    });\n    return dont ? null : state.update(changes, {\n        scrollIntoView: true,\n        userEvent: \"input.type\"\n    });\n}\nfunction handleClose(state, _open, close) {\n    let dont = null, moved = state.selection.ranges.map(range => {\n        if (range.empty && nextChar(state.doc, range.head) == close)\n            return EditorSelection.cursor(range.head + close.length);\n        return dont = range;\n    });\n    return dont ? null : state.update({\n        selection: EditorSelection.create(moved, state.selection.mainIndex),\n        scrollIntoView: true,\n        effects: state.selection.ranges.map(({ from }) => skipBracketEffect.of(from))\n    });\n}\n// Handles cases where the open and close token are the same, and\n// possibly triple quotes (as in `\"\"\"abc\"\"\"`-style quoting).\nfunction handleSame(state, token, allowTriple) {\n    let dont = null, changes = state.changeByRange(range => {\n        if (!range.empty)\n            return { changes: [{ insert: token, from: range.from }, { insert: token, from: range.to }],\n                effects: closeBracketEffect.of(range.to + token.length),\n                range: EditorSelection.range(range.anchor + token.length, range.head + token.length) };\n        let pos = range.head, next = nextChar(state.doc, pos);\n        if (next == token) {\n            if (nodeStart(state, pos)) {\n                return { changes: { insert: token + token, from: pos },\n                    effects: closeBracketEffect.of(pos + token.length),\n                    range: EditorSelection.cursor(pos + token.length) };\n            }\n            else if (closedBracketAt(state, pos)) {\n                let isTriple = allowTriple && state.sliceDoc(pos, pos + token.length * 3) == token + token + token;\n                return { range: EditorSelection.cursor(pos + token.length * (isTriple ? 3 : 1)),\n                    effects: skipBracketEffect.of(pos) };\n            }\n        }\n        else if (allowTriple && state.sliceDoc(pos - 2 * token.length, pos) == token + token &&\n            nodeStart(state, pos - 2 * token.length)) {\n            return { changes: { insert: token + token + token + token, from: pos },\n                effects: closeBracketEffect.of(pos + token.length),\n                range: EditorSelection.cursor(pos + token.length) };\n        }\n        else if (state.charCategorizer(pos)(next) != CharCategory.Word) {\n            let prev = state.sliceDoc(pos - 1, pos);\n            if (prev != token && state.charCategorizer(pos)(prev) != CharCategory.Word && !probablyInString(state, pos, token))\n                return { changes: { insert: token + token, from: pos },\n                    effects: closeBracketEffect.of(pos + token.length),\n                    range: EditorSelection.cursor(pos + token.length) };\n        }\n        return { range: dont = range };\n    });\n    return dont ? null : state.update(changes, {\n        scrollIntoView: true,\n        userEvent: \"input.type\"\n    });\n}\nfunction nodeStart(state, pos) {\n    let tree = syntaxTree(state).resolveInner(pos + 1);\n    return tree.parent && tree.from == pos;\n}\nfunction probablyInString(state, pos, quoteToken) {\n    let node = syntaxTree(state).resolveInner(pos, -1);\n    for (let i = 0; i < 5; i++) {\n        if (state.sliceDoc(node.from, node.from + quoteToken.length) == quoteToken)\n            return true;\n        let parent = node.to == pos && node.parent;\n        if (!parent)\n            break;\n        node = parent;\n    }\n    return false;\n}\n\n/**\nReturns an extension that enables autocompletion.\n*/\nfunction autocompletion(config = {}) {\n    return [\n        completionState,\n        completionConfig.of(config),\n        completionPlugin,\n        completionKeymapExt,\n        baseTheme\n    ];\n}\n/**\nBasic keybindings for autocompletion.\n\n - Ctrl-Space: [`startCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.startCompletion)\n - Escape: [`closeCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.closeCompletion)\n - ArrowDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true)`\n - ArrowUp: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(false)`\n - PageDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true, \"page\")`\n - PageDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true, \"page\")`\n - Enter: [`acceptCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.acceptCompletion)\n*/\nconst completionKeymap = [\n    { key: \"Ctrl-Space\", run: startCompletion },\n    { key: \"Escape\", run: closeCompletion },\n    { key: \"ArrowDown\", run: /*@__PURE__*/moveCompletionSelection(true) },\n    { key: \"ArrowUp\", run: /*@__PURE__*/moveCompletionSelection(false) },\n    { key: \"PageDown\", run: /*@__PURE__*/moveCompletionSelection(true, \"page\") },\n    { key: \"PageUp\", run: /*@__PURE__*/moveCompletionSelection(false, \"page\") },\n    { key: \"Enter\", run: acceptCompletion }\n];\nconst completionKeymapExt = /*@__PURE__*/Prec.highest(/*@__PURE__*/keymap.computeN([completionConfig], state => state.facet(completionConfig).defaultKeymap ? [completionKeymap] : []));\n/**\nGet the current completion status. When completions are available,\nthis will return `\"active\"`. When completions are pending (in the\nprocess of being queried), this returns `\"pending\"`. Otherwise, it\nreturns `null`.\n*/\nfunction completionStatus(state) {\n    let cState = state.field(completionState, false);\n    return cState && cState.active.some(a => a.state == 1 /* Pending */) ? \"pending\"\n        : cState && cState.active.some(a => a.state != 0 /* Inactive */) ? \"active\" : null;\n}\nconst completionArrayCache = /*@__PURE__*/new WeakMap;\n/**\nReturns the available completions as an array.\n*/\nfunction currentCompletions(state) {\n    var _a;\n    let open = (_a = state.field(completionState, false)) === null || _a === void 0 ? void 0 : _a.open;\n    if (!open)\n        return [];\n    let completions = completionArrayCache.get(open.options);\n    if (!completions)\n        completionArrayCache.set(open.options, completions = open.options.map(o => o.completion));\n    return completions;\n}\n/**\nReturn the currently selected completion, if any.\n*/\nfunction selectedCompletion(state) {\n    var _a;\n    let open = (_a = state.field(completionState, false)) === null || _a === void 0 ? void 0 : _a.open;\n    return open ? open.options[open.selected].completion : null;\n}\n/**\nReturns the currently selected position in the active completion\nlist, or null if no completions are active.\n*/\nfunction selectedCompletionIndex(state) {\n    var _a;\n    let open = (_a = state.field(completionState, false)) === null || _a === void 0 ? void 0 : _a.open;\n    return open ? open.selected : null;\n}\n/**\nCreate an effect that can be attached to a transaction to change\nthe currently selected completion.\n*/\nfunction setSelectedCompletion(index) {\n    return setSelectedEffect.of(index);\n}\n\nexport { CompletionContext, acceptCompletion, autocompletion, clearSnippet, closeBrackets, closeBracketsKeymap, closeCompletion, completeAnyWord, completeFromList, completionKeymap, completionStatus, currentCompletions, deleteBracketPair, ifIn, ifNotIn, insertBracket, insertCompletionText, moveCompletionSelection, nextSnippetField, pickedCompletion, prevSnippetField, selectedCompletion, selectedCompletionIndex, setSelectedCompletion, snippet, snippetCompletion, snippetKeymap, startCompletion };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}