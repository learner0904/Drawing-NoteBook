{"ast":null,"code":"import { bisector, max, pairs, timeFormat, utcFormat } from \"d3\";\nimport { utcSecond, utcMinute, utcHour, unixDay, utcWeek, utcMonth, utcYear } from \"d3\";\nimport { utcMonday, utcTuesday, utcWednesday, utcThursday, utcFriday, utcSaturday, utcSunday } from \"d3\";\nimport { timeSecond, timeMinute, timeHour, timeDay, timeWeek, timeMonth, timeYear } from \"d3\";\nimport { timeMonday, timeTuesday, timeWednesday, timeThursday, timeFriday, timeSaturday, timeSunday } from \"d3\";\nimport { orderof } from \"./order.js\";\nconst durationSecond = 1000;\nconst durationMinute = durationSecond * 60;\nconst durationHour = durationMinute * 60;\nconst durationDay = durationHour * 24;\nconst durationWeek = durationDay * 7;\nconst durationMonth = durationDay * 30;\nconst durationYear = durationDay * 365;\n\n// See https://github.com/d3/d3-time/blob/9e8dc940f38f78d7588aad68a54a25b1f0c2d97b/src/ticks.js#L14-L33\nconst tickIntervals = [[\"millisecond\", 1], [\"2 milliseconds\", 2], [\"5 milliseconds\", 5], [\"10 milliseconds\", 10], [\"20 milliseconds\", 20], [\"50 milliseconds\", 50], [\"100 milliseconds\", 100], [\"200 milliseconds\", 200], [\"500 milliseconds\", 500], [\"second\", durationSecond], [\"5 seconds\", 5 * durationSecond], [\"15 seconds\", 15 * durationSecond], [\"30 seconds\", 30 * durationSecond], [\"minute\", durationMinute], [\"5 minutes\", 5 * durationMinute], [\"15 minutes\", 15 * durationMinute], [\"30 minutes\", 30 * durationMinute], [\"hour\", durationHour], [\"3 hours\", 3 * durationHour], [\"6 hours\", 6 * durationHour], [\"12 hours\", 12 * durationHour], [\"day\", durationDay], [\"2 days\", 2 * durationDay], [\"week\", durationWeek], [\"2 weeks\", 2 * durationWeek],\n// https://github.com/d3/d3-time/issues/46\n[\"month\", durationMonth], [\"3 months\", 3 * durationMonth], [\"6 months\", 6 * durationMonth],\n// https://github.com/d3/d3-time/issues/46\n[\"year\", durationYear], [\"2 years\", 2 * durationYear], [\"5 years\", 5 * durationYear], [\"10 years\", 10 * durationYear], [\"20 years\", 20 * durationYear], [\"50 years\", 50 * durationYear], [\"100 years\", 100 * durationYear] // TODO generalize to longer time scales\n];\n\nconst durations = new Map([[\"second\", durationSecond], [\"minute\", durationMinute], [\"hour\", durationHour], [\"day\", durationDay], [\"monday\", durationWeek], [\"tuesday\", durationWeek], [\"wednesday\", durationWeek], [\"thursday\", durationWeek], [\"friday\", durationWeek], [\"saturday\", durationWeek], [\"sunday\", durationWeek], [\"week\", durationWeek], [\"month\", durationMonth], [\"year\", durationYear]]);\nconst timeIntervals = new Map([[\"second\", timeSecond], [\"minute\", timeMinute], [\"hour\", timeHour], [\"day\", timeDay],\n// https://github.com/d3/d3-time/issues/62\n[\"monday\", timeMonday], [\"tuesday\", timeTuesday], [\"wednesday\", timeWednesday], [\"thursday\", timeThursday], [\"friday\", timeFriday], [\"saturday\", timeSaturday], [\"sunday\", timeSunday], [\"week\", timeWeek], [\"month\", timeMonth], [\"year\", timeYear]]);\nconst utcIntervals = new Map([[\"second\", utcSecond], [\"minute\", utcMinute], [\"hour\", utcHour], [\"day\", unixDay], [\"monday\", utcMonday], [\"tuesday\", utcTuesday], [\"wednesday\", utcWednesday], [\"thursday\", utcThursday], [\"friday\", utcFriday], [\"saturday\", utcSaturday], [\"sunday\", utcSunday], [\"week\", utcWeek], [\"month\", utcMonth], [\"year\", utcYear]]);\n\n// These hidden fields describe standard intervals so that we can, for example,\n// generalize a scale’s time interval to a larger ticks time interval to reduce\n// the number of displayed ticks. TODO We could instead allow the interval\n// implementation to expose a “generalize” method that returns a larger, aligned\n// interval; that would allow us to move this logic to D3, and allow\n// generalization even when a custom interval is provided.\nexport const intervalDuration = Symbol(\"intervalDuration\");\nexport const intervalType = Symbol(\"intervalType\");\n\n// We greedily mutate D3’s standard intervals on load so that the hidden fields\n// are available even if specified as e.g. d3.utcMonth instead of \"month\".\nfor (const [name, interval] of timeIntervals) {\n  interval[intervalDuration] = durations.get(name);\n  interval[intervalType] = \"time\";\n}\nfor (const [name, interval] of utcIntervals) {\n  interval[intervalDuration] = durations.get(name);\n  interval[intervalType] = \"utc\";\n}\nconst utcFormatIntervals = [[\"year\", utcYear, \"utc\"], [\"month\", utcMonth, \"utc\"], [\"day\", unixDay, \"utc\", 6 * durationMonth], [\"hour\", utcHour, \"utc\", 3 * durationDay], [\"minute\", utcMinute, \"utc\", 6 * durationHour], [\"second\", utcSecond, \"utc\", 30 * durationMinute]];\nconst timeFormatIntervals = [[\"year\", timeYear, \"time\"], [\"month\", timeMonth, \"time\"], [\"day\", timeDay, \"time\", 6 * durationMonth], [\"hour\", timeHour, \"time\", 3 * durationDay], [\"minute\", timeMinute, \"time\", 6 * durationHour], [\"second\", timeSecond, \"time\", 30 * durationMinute]];\n\n// An interleaved array of UTC and local time intervals, in descending order\n// from largest to smallest, used to determine the most specific standard time\n// format for a given array of dates. This is a subset of the tick intervals\n// listed above; we only need the breakpoints where the format changes.\nconst formatIntervals = [utcFormatIntervals[0], timeFormatIntervals[0], utcFormatIntervals[1], timeFormatIntervals[1], utcFormatIntervals[2], timeFormatIntervals[2],\n// Below day, local time typically has an hourly offset from UTC and hence the\n// two are aligned and indistinguishable; therefore, we only consider UTC, and\n// we don’t consider these if the domain only has a single value.\n...utcFormatIntervals.slice(3)];\nexport function parseTimeInterval(input) {\n  let name = `${input}`.toLowerCase();\n  if (name.endsWith(\"s\")) name = name.slice(0, -1); // drop plural\n  let period = 1;\n  const match = /^(?:(\\d+)\\s+)/.exec(name);\n  if (match) {\n    name = name.slice(match[0].length);\n    period = +match[1];\n  }\n  switch (name) {\n    case \"quarter\":\n      name = \"month\";\n      period *= 3;\n      break;\n    case \"half\":\n      name = \"month\";\n      period *= 6;\n      break;\n  }\n  let interval = utcIntervals.get(name);\n  if (!interval) throw new Error(`unknown interval: ${input}`);\n  if (period > 1 && !interval.every) throw new Error(`non-periodic interval: ${name}`);\n  return [name, period];\n}\nexport function timeInterval(input) {\n  return asInterval(parseTimeInterval(input), \"time\");\n}\nexport function utcInterval(input) {\n  return asInterval(parseTimeInterval(input), \"utc\");\n}\nfunction asInterval([name, period], type) {\n  let interval = (type === \"time\" ? timeIntervals : utcIntervals).get(name);\n  if (period > 1) {\n    interval = interval.every(period);\n    interval[intervalDuration] = durations.get(name) * period;\n    interval[intervalType] = type;\n  }\n  return interval;\n}\n\n// If the given interval is a standard time interval, we may be able to promote\n// it a larger aligned time interval, rather than showing every nth tick.\nexport function generalizeTimeInterval(interval, n) {\n  if (!(n > 1)) return; // no need to generalize\n  const duration = interval[intervalDuration];\n  if (!tickIntervals.some(([, d]) => d === duration)) return; // nonstandard or unknown interval\n  if (duration % durationDay === 0 && durationDay < duration && duration < durationMonth) return; // not generalizable\n  const [i] = tickIntervals[bisector(([, step]) => Math.log(step)).center(tickIntervals, Math.log(duration * n))];\n  return (interval[intervalType] === \"time\" ? timeInterval : utcInterval)(i);\n}\nfunction formatTimeInterval(name, type, anchor) {\n  const format = type === \"time\" ? timeFormat : utcFormat;\n  // For tips and legends, use a format that doesn’t require context.\n  if (anchor == null) {\n    return format(name === \"year\" ? \"%Y\" : name === \"month\" ? \"%Y-%m\" : name === \"day\" ? \"%Y-%m-%d\" : name === \"hour\" || name === \"minute\" ? \"%Y-%m-%dT%H:%M\" : name === \"second\" ? \"%Y-%m-%dT%H:%M:%S\" : \"%Y-%m-%dT%H:%M:%S.%L\");\n  }\n  // Otherwise, assume that this is for axis ticks.\n  const template = getTimeTemplate(anchor);\n  switch (name) {\n    case \"millisecond\":\n      return formatConditional(format(\".%L\"), format(\":%M:%S\"), template);\n    case \"second\":\n      return formatConditional(format(\":%S\"), format(\"%-I:%M\"), template);\n    case \"minute\":\n      return formatConditional(format(\"%-I:%M\"), format(\"%p\"), template);\n    case \"hour\":\n      return formatConditional(format(\"%-I %p\"), format(\"%b %-d\"), template);\n    case \"day\":\n      return formatConditional(format(\"%-d\"), format(\"%b\"), template);\n    case \"month\":\n      return formatConditional(format(\"%b\"), format(\"%Y\"), template);\n    case \"year\":\n      return format(\"%Y\");\n  }\n  throw new Error(\"unable to format time ticks\");\n}\nfunction getTimeTemplate(anchor) {\n  return anchor === \"left\" || anchor === \"right\" ? (f1, f2) => `\\n${f1}\\n${f2}` // extra newline to keep f1 centered\n  : anchor === \"top\" ? (f1, f2) => `${f2}\\n${f1}` : (f1, f2) => `${f1}\\n${f2}`;\n}\nfunction getFormatIntervals(type) {\n  return type === \"time\" ? timeFormatIntervals : type === \"utc\" ? utcFormatIntervals : formatIntervals;\n}\n\n// Given an array of dates, returns the largest compatible standard time\n// interval. If no standard interval is compatible (other than milliseconds,\n// which is universally compatible), returns undefined.\nexport function inferTimeFormat(type, dates, anchor) {\n  const step = max(pairs(dates, (a, b) => Math.abs(b - a))); // maybe undefined!\n  if (step < 1000) return formatTimeInterval(\"millisecond\", \"utc\", anchor);\n  for (const [name, interval, intervalType, maxStep] of getFormatIntervals(type)) {\n    if (step > maxStep) break; // e.g., 52 weeks\n    if (name === \"hour\" && !step) break; // e.g., domain with a single date\n    if (dates.every(d => interval.floor(d) >= d)) return formatTimeInterval(name, intervalType, anchor);\n  }\n}\nfunction formatConditional(format1, format2, template) {\n  return (x, i, X) => {\n    const f1 = format1(x, i); // always shown\n    const f2 = format2(x, i); // only shown if different\n    const j = i - orderof(X); // detect reversed domains\n    return i !== j && X[j] !== undefined && f2 === format2(X[j], j) ? f1 : template(f1, f2);\n  };\n}","map":{"version":3,"names":["bisector","max","pairs","timeFormat","utcFormat","utcSecond","utcMinute","utcHour","unixDay","utcWeek","utcMonth","utcYear","utcMonday","utcTuesday","utcWednesday","utcThursday","utcFriday","utcSaturday","utcSunday","timeSecond","timeMinute","timeHour","timeDay","timeWeek","timeMonth","timeYear","timeMonday","timeTuesday","timeWednesday","timeThursday","timeFriday","timeSaturday","timeSunday","orderof","durationSecond","durationMinute","durationHour","durationDay","durationWeek","durationMonth","durationYear","tickIntervals","durations","Map","timeIntervals","utcIntervals","intervalDuration","Symbol","intervalType","name","interval","get","utcFormatIntervals","timeFormatIntervals","formatIntervals","slice","parseTimeInterval","input","toLowerCase","endsWith","period","match","exec","length","Error","every","timeInterval","asInterval","utcInterval","type","generalizeTimeInterval","n","duration","some","d","i","step","Math","log","center","formatTimeInterval","anchor","format","template","getTimeTemplate","formatConditional","f1","f2","getFormatIntervals","inferTimeFormat","dates","a","b","abs","maxStep","floor","format1","format2","x","X","j","undefined"],"sources":["D:/Notebooks/notebooks-web/vue/node_modules/@observablehq/plot/src/time.js"],"sourcesContent":["import {bisector, max, pairs, timeFormat, utcFormat} from \"d3\";\nimport {utcSecond, utcMinute, utcHour, unixDay, utcWeek, utcMonth, utcYear} from \"d3\";\nimport {utcMonday, utcTuesday, utcWednesday, utcThursday, utcFriday, utcSaturday, utcSunday} from \"d3\";\nimport {timeSecond, timeMinute, timeHour, timeDay, timeWeek, timeMonth, timeYear} from \"d3\";\nimport {timeMonday, timeTuesday, timeWednesday, timeThursday, timeFriday, timeSaturday, timeSunday} from \"d3\";\nimport {orderof} from \"./order.js\";\n\nconst durationSecond = 1000;\nconst durationMinute = durationSecond * 60;\nconst durationHour = durationMinute * 60;\nconst durationDay = durationHour * 24;\nconst durationWeek = durationDay * 7;\nconst durationMonth = durationDay * 30;\nconst durationYear = durationDay * 365;\n\n// See https://github.com/d3/d3-time/blob/9e8dc940f38f78d7588aad68a54a25b1f0c2d97b/src/ticks.js#L14-L33\nconst tickIntervals = [\n  [\"millisecond\", 1],\n  [\"2 milliseconds\", 2],\n  [\"5 milliseconds\", 5],\n  [\"10 milliseconds\", 10],\n  [\"20 milliseconds\", 20],\n  [\"50 milliseconds\", 50],\n  [\"100 milliseconds\", 100],\n  [\"200 milliseconds\", 200],\n  [\"500 milliseconds\", 500],\n  [\"second\", durationSecond],\n  [\"5 seconds\", 5 * durationSecond],\n  [\"15 seconds\", 15 * durationSecond],\n  [\"30 seconds\", 30 * durationSecond],\n  [\"minute\", durationMinute],\n  [\"5 minutes\", 5 * durationMinute],\n  [\"15 minutes\", 15 * durationMinute],\n  [\"30 minutes\", 30 * durationMinute],\n  [\"hour\", durationHour],\n  [\"3 hours\", 3 * durationHour],\n  [\"6 hours\", 6 * durationHour],\n  [\"12 hours\", 12 * durationHour],\n  [\"day\", durationDay],\n  [\"2 days\", 2 * durationDay],\n  [\"week\", durationWeek],\n  [\"2 weeks\", 2 * durationWeek], // https://github.com/d3/d3-time/issues/46\n  [\"month\", durationMonth],\n  [\"3 months\", 3 * durationMonth],\n  [\"6 months\", 6 * durationMonth], // https://github.com/d3/d3-time/issues/46\n  [\"year\", durationYear],\n  [\"2 years\", 2 * durationYear],\n  [\"5 years\", 5 * durationYear],\n  [\"10 years\", 10 * durationYear],\n  [\"20 years\", 20 * durationYear],\n  [\"50 years\", 50 * durationYear],\n  [\"100 years\", 100 * durationYear] // TODO generalize to longer time scales\n];\n\nconst durations = new Map([\n  [\"second\", durationSecond],\n  [\"minute\", durationMinute],\n  [\"hour\", durationHour],\n  [\"day\", durationDay],\n  [\"monday\", durationWeek],\n  [\"tuesday\", durationWeek],\n  [\"wednesday\", durationWeek],\n  [\"thursday\", durationWeek],\n  [\"friday\", durationWeek],\n  [\"saturday\", durationWeek],\n  [\"sunday\", durationWeek],\n  [\"week\", durationWeek],\n  [\"month\", durationMonth],\n  [\"year\", durationYear]\n]);\n\nconst timeIntervals = new Map([\n  [\"second\", timeSecond],\n  [\"minute\", timeMinute],\n  [\"hour\", timeHour],\n  [\"day\", timeDay], // https://github.com/d3/d3-time/issues/62\n  [\"monday\", timeMonday],\n  [\"tuesday\", timeTuesday],\n  [\"wednesday\", timeWednesday],\n  [\"thursday\", timeThursday],\n  [\"friday\", timeFriday],\n  [\"saturday\", timeSaturday],\n  [\"sunday\", timeSunday],\n  [\"week\", timeWeek],\n  [\"month\", timeMonth],\n  [\"year\", timeYear]\n]);\n\nconst utcIntervals = new Map([\n  [\"second\", utcSecond],\n  [\"minute\", utcMinute],\n  [\"hour\", utcHour],\n  [\"day\", unixDay],\n  [\"monday\", utcMonday],\n  [\"tuesday\", utcTuesday],\n  [\"wednesday\", utcWednesday],\n  [\"thursday\", utcThursday],\n  [\"friday\", utcFriday],\n  [\"saturday\", utcSaturday],\n  [\"sunday\", utcSunday],\n  [\"week\", utcWeek],\n  [\"month\", utcMonth],\n  [\"year\", utcYear]\n]);\n\n// These hidden fields describe standard intervals so that we can, for example,\n// generalize a scale’s time interval to a larger ticks time interval to reduce\n// the number of displayed ticks. TODO We could instead allow the interval\n// implementation to expose a “generalize” method that returns a larger, aligned\n// interval; that would allow us to move this logic to D3, and allow\n// generalization even when a custom interval is provided.\nexport const intervalDuration = Symbol(\"intervalDuration\");\nexport const intervalType = Symbol(\"intervalType\");\n\n// We greedily mutate D3’s standard intervals on load so that the hidden fields\n// are available even if specified as e.g. d3.utcMonth instead of \"month\".\nfor (const [name, interval] of timeIntervals) {\n  interval[intervalDuration] = durations.get(name);\n  interval[intervalType] = \"time\";\n}\nfor (const [name, interval] of utcIntervals) {\n  interval[intervalDuration] = durations.get(name);\n  interval[intervalType] = \"utc\";\n}\n\nconst utcFormatIntervals = [\n  [\"year\", utcYear, \"utc\"],\n  [\"month\", utcMonth, \"utc\"],\n  [\"day\", unixDay, \"utc\", 6 * durationMonth],\n  [\"hour\", utcHour, \"utc\", 3 * durationDay],\n  [\"minute\", utcMinute, \"utc\", 6 * durationHour],\n  [\"second\", utcSecond, \"utc\", 30 * durationMinute]\n];\n\nconst timeFormatIntervals = [\n  [\"year\", timeYear, \"time\"],\n  [\"month\", timeMonth, \"time\"],\n  [\"day\", timeDay, \"time\", 6 * durationMonth],\n  [\"hour\", timeHour, \"time\", 3 * durationDay],\n  [\"minute\", timeMinute, \"time\", 6 * durationHour],\n  [\"second\", timeSecond, \"time\", 30 * durationMinute]\n];\n\n// An interleaved array of UTC and local time intervals, in descending order\n// from largest to smallest, used to determine the most specific standard time\n// format for a given array of dates. This is a subset of the tick intervals\n// listed above; we only need the breakpoints where the format changes.\nconst formatIntervals = [\n  utcFormatIntervals[0],\n  timeFormatIntervals[0],\n  utcFormatIntervals[1],\n  timeFormatIntervals[1],\n  utcFormatIntervals[2],\n  timeFormatIntervals[2],\n  // Below day, local time typically has an hourly offset from UTC and hence the\n  // two are aligned and indistinguishable; therefore, we only consider UTC, and\n  // we don’t consider these if the domain only has a single value.\n  ...utcFormatIntervals.slice(3)\n];\n\nexport function parseTimeInterval(input) {\n  let name = `${input}`.toLowerCase();\n  if (name.endsWith(\"s\")) name = name.slice(0, -1); // drop plural\n  let period = 1;\n  const match = /^(?:(\\d+)\\s+)/.exec(name);\n  if (match) {\n    name = name.slice(match[0].length);\n    period = +match[1];\n  }\n  switch (name) {\n    case \"quarter\":\n      name = \"month\";\n      period *= 3;\n      break;\n    case \"half\":\n      name = \"month\";\n      period *= 6;\n      break;\n  }\n  let interval = utcIntervals.get(name);\n  if (!interval) throw new Error(`unknown interval: ${input}`);\n  if (period > 1 && !interval.every) throw new Error(`non-periodic interval: ${name}`);\n  return [name, period];\n}\n\nexport function timeInterval(input) {\n  return asInterval(parseTimeInterval(input), \"time\");\n}\n\nexport function utcInterval(input) {\n  return asInterval(parseTimeInterval(input), \"utc\");\n}\n\nfunction asInterval([name, period], type) {\n  let interval = (type === \"time\" ? timeIntervals : utcIntervals).get(name);\n  if (period > 1) {\n    interval = interval.every(period);\n    interval[intervalDuration] = durations.get(name) * period;\n    interval[intervalType] = type;\n  }\n  return interval;\n}\n\n// If the given interval is a standard time interval, we may be able to promote\n// it a larger aligned time interval, rather than showing every nth tick.\nexport function generalizeTimeInterval(interval, n) {\n  if (!(n > 1)) return; // no need to generalize\n  const duration = interval[intervalDuration];\n  if (!tickIntervals.some(([, d]) => d === duration)) return; // nonstandard or unknown interval\n  if (duration % durationDay === 0 && durationDay < duration && duration < durationMonth) return; // not generalizable\n  const [i] = tickIntervals[bisector(([, step]) => Math.log(step)).center(tickIntervals, Math.log(duration * n))];\n  return (interval[intervalType] === \"time\" ? timeInterval : utcInterval)(i);\n}\n\nfunction formatTimeInterval(name, type, anchor) {\n  const format = type === \"time\" ? timeFormat : utcFormat;\n  // For tips and legends, use a format that doesn’t require context.\n  if (anchor == null) {\n    return format(\n      name === \"year\"\n        ? \"%Y\"\n        : name === \"month\"\n        ? \"%Y-%m\"\n        : name === \"day\"\n        ? \"%Y-%m-%d\"\n        : name === \"hour\" || name === \"minute\"\n        ? \"%Y-%m-%dT%H:%M\"\n        : name === \"second\"\n        ? \"%Y-%m-%dT%H:%M:%S\"\n        : \"%Y-%m-%dT%H:%M:%S.%L\"\n    );\n  }\n  // Otherwise, assume that this is for axis ticks.\n  const template = getTimeTemplate(anchor);\n  switch (name) {\n    case \"millisecond\":\n      return formatConditional(format(\".%L\"), format(\":%M:%S\"), template);\n    case \"second\":\n      return formatConditional(format(\":%S\"), format(\"%-I:%M\"), template);\n    case \"minute\":\n      return formatConditional(format(\"%-I:%M\"), format(\"%p\"), template);\n    case \"hour\":\n      return formatConditional(format(\"%-I %p\"), format(\"%b %-d\"), template);\n    case \"day\":\n      return formatConditional(format(\"%-d\"), format(\"%b\"), template);\n    case \"month\":\n      return formatConditional(format(\"%b\"), format(\"%Y\"), template);\n    case \"year\":\n      return format(\"%Y\");\n  }\n  throw new Error(\"unable to format time ticks\");\n}\n\nfunction getTimeTemplate(anchor) {\n  return anchor === \"left\" || anchor === \"right\"\n    ? (f1, f2) => `\\n${f1}\\n${f2}` // extra newline to keep f1 centered\n    : anchor === \"top\"\n    ? (f1, f2) => `${f2}\\n${f1}`\n    : (f1, f2) => `${f1}\\n${f2}`;\n}\n\nfunction getFormatIntervals(type) {\n  return type === \"time\" ? timeFormatIntervals : type === \"utc\" ? utcFormatIntervals : formatIntervals;\n}\n\n// Given an array of dates, returns the largest compatible standard time\n// interval. If no standard interval is compatible (other than milliseconds,\n// which is universally compatible), returns undefined.\nexport function inferTimeFormat(type, dates, anchor) {\n  const step = max(pairs(dates, (a, b) => Math.abs(b - a))); // maybe undefined!\n  if (step < 1000) return formatTimeInterval(\"millisecond\", \"utc\", anchor);\n  for (const [name, interval, intervalType, maxStep] of getFormatIntervals(type)) {\n    if (step > maxStep) break; // e.g., 52 weeks\n    if (name === \"hour\" && !step) break; // e.g., domain with a single date\n    if (dates.every((d) => interval.floor(d) >= d)) return formatTimeInterval(name, intervalType, anchor);\n  }\n}\n\nfunction formatConditional(format1, format2, template) {\n  return (x, i, X) => {\n    const f1 = format1(x, i); // always shown\n    const f2 = format2(x, i); // only shown if different\n    const j = i - orderof(X); // detect reversed domains\n    return i !== j && X[j] !== undefined && f2 === format2(X[j], j) ? f1 : template(f1, f2);\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}