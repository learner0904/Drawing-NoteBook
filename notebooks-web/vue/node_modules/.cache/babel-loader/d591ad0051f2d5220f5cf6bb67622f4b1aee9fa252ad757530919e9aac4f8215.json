{"ast":null,"code":"import { curveBasis, curveBasisClosed, curveBasisOpen, curveBundle, curveBumpX, curveBumpY, curveCardinal, curveCardinalClosed, curveCardinalOpen, curveCatmullRom, curveCatmullRomClosed, curveCatmullRomOpen, curveLinear, curveLinearClosed, curveMonotoneX, curveMonotoneY, curveNatural, curveStep, curveStepAfter, curveStepBefore } from \"d3\";\nconst curves = new Map([[\"basis\", curveBasis], [\"basis-closed\", curveBasisClosed], [\"basis-open\", curveBasisOpen], [\"bundle\", curveBundle], [\"bump-x\", curveBumpX], [\"bump-y\", curveBumpY], [\"cardinal\", curveCardinal], [\"cardinal-closed\", curveCardinalClosed], [\"cardinal-open\", curveCardinalOpen], [\"catmull-rom\", curveCatmullRom], [\"catmull-rom-closed\", curveCatmullRomClosed], [\"catmull-rom-open\", curveCatmullRomOpen], [\"linear\", curveLinear], [\"linear-closed\", curveLinearClosed], [\"monotone-x\", curveMonotoneX], [\"monotone-y\", curveMonotoneY], [\"natural\", curveNatural], [\"step\", curveStep], [\"step-after\", curveStepAfter], [\"step-before\", curveStepBefore]]);\nexport function maybeCurve(curve = curveLinear, tension) {\n  if (typeof curve === \"function\") return curve; // custom curve\n  const c = curves.get(`${curve}`.toLowerCase());\n  if (!c) throw new Error(`unknown curve: ${curve}`);\n  if (tension !== undefined) {\n    if (\"beta\" in c) {\n      return c.beta(tension);\n    } else if (\"tension\" in c) {\n      return c.tension(tension);\n    } else if (\"alpha\" in c) {\n      return c.alpha(tension);\n    }\n  }\n  return c;\n}\n\n// For the “auto” curve, return a symbol instead of a curve implementation;\n// we’ll use d3.geoPath to render if there’s a projection.\nexport function maybeCurveAuto(curve = curveAuto, tension) {\n  return typeof curve !== \"function\" && `${curve}`.toLowerCase() === \"auto\" ? curveAuto : maybeCurve(curve, tension);\n}\n\n// This is a special built-in curve that will use d3.geoPath when there is a\n// projection, and the linear curve when there is not. You can explicitly\n// opt-out of d3.geoPath and instead use d3.line with the \"linear\" curve.\nexport function curveAuto(context) {\n  return curveLinear(context);\n}","map":{"version":3,"names":["curveBasis","curveBasisClosed","curveBasisOpen","curveBundle","curveBumpX","curveBumpY","curveCardinal","curveCardinalClosed","curveCardinalOpen","curveCatmullRom","curveCatmullRomClosed","curveCatmullRomOpen","curveLinear","curveLinearClosed","curveMonotoneX","curveMonotoneY","curveNatural","curveStep","curveStepAfter","curveStepBefore","curves","Map","maybeCurve","curve","tension","c","get","toLowerCase","Error","undefined","beta","alpha","maybeCurveAuto","curveAuto","context"],"sources":["D:/Notebooks/notebooks-web/vue/node_modules/@observablehq/plot/src/curve.js"],"sourcesContent":["import {\n  curveBasis,\n  curveBasisClosed,\n  curveBasisOpen,\n  curveBundle,\n  curveBumpX,\n  curveBumpY,\n  curveCardinal,\n  curveCardinalClosed,\n  curveCardinalOpen,\n  curveCatmullRom,\n  curveCatmullRomClosed,\n  curveCatmullRomOpen,\n  curveLinear,\n  curveLinearClosed,\n  curveMonotoneX,\n  curveMonotoneY,\n  curveNatural,\n  curveStep,\n  curveStepAfter,\n  curveStepBefore\n} from \"d3\";\n\nconst curves = new Map([\n  [\"basis\", curveBasis],\n  [\"basis-closed\", curveBasisClosed],\n  [\"basis-open\", curveBasisOpen],\n  [\"bundle\", curveBundle],\n  [\"bump-x\", curveBumpX],\n  [\"bump-y\", curveBumpY],\n  [\"cardinal\", curveCardinal],\n  [\"cardinal-closed\", curveCardinalClosed],\n  [\"cardinal-open\", curveCardinalOpen],\n  [\"catmull-rom\", curveCatmullRom],\n  [\"catmull-rom-closed\", curveCatmullRomClosed],\n  [\"catmull-rom-open\", curveCatmullRomOpen],\n  [\"linear\", curveLinear],\n  [\"linear-closed\", curveLinearClosed],\n  [\"monotone-x\", curveMonotoneX],\n  [\"monotone-y\", curveMonotoneY],\n  [\"natural\", curveNatural],\n  [\"step\", curveStep],\n  [\"step-after\", curveStepAfter],\n  [\"step-before\", curveStepBefore]\n]);\n\nexport function maybeCurve(curve = curveLinear, tension) {\n  if (typeof curve === \"function\") return curve; // custom curve\n  const c = curves.get(`${curve}`.toLowerCase());\n  if (!c) throw new Error(`unknown curve: ${curve}`);\n  if (tension !== undefined) {\n    if (\"beta\" in c) {\n      return c.beta(tension);\n    } else if (\"tension\" in c) {\n      return c.tension(tension);\n    } else if (\"alpha\" in c) {\n      return c.alpha(tension);\n    }\n  }\n  return c;\n}\n\n// For the “auto” curve, return a symbol instead of a curve implementation;\n// we’ll use d3.geoPath to render if there’s a projection.\nexport function maybeCurveAuto(curve = curveAuto, tension) {\n  return typeof curve !== \"function\" && `${curve}`.toLowerCase() === \"auto\" ? curveAuto : maybeCurve(curve, tension);\n}\n\n// This is a special built-in curve that will use d3.geoPath when there is a\n// projection, and the linear curve when there is not. You can explicitly\n// opt-out of d3.geoPath and instead use d3.line with the \"linear\" curve.\nexport function curveAuto(context) {\n  return curveLinear(context);\n}\n"],"mappings":"AAAA,SACEA,UAAU,EACVC,gBAAgB,EAChBC,cAAc,EACdC,WAAW,EACXC,UAAU,EACVC,UAAU,EACVC,aAAa,EACbC,mBAAmB,EACnBC,iBAAiB,EACjBC,eAAe,EACfC,qBAAqB,EACrBC,mBAAmB,EACnBC,WAAW,EACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,YAAY,EACZC,SAAS,EACTC,cAAc,EACdC,eAAe,QACV,IAAI;AAEX,MAAMC,MAAM,GAAG,IAAIC,GAAG,CAAC,CACrB,CAAC,OAAO,EAAErB,UAAU,CAAC,EACrB,CAAC,cAAc,EAAEC,gBAAgB,CAAC,EAClC,CAAC,YAAY,EAAEC,cAAc,CAAC,EAC9B,CAAC,QAAQ,EAAEC,WAAW,CAAC,EACvB,CAAC,QAAQ,EAAEC,UAAU,CAAC,EACtB,CAAC,QAAQ,EAAEC,UAAU,CAAC,EACtB,CAAC,UAAU,EAAEC,aAAa,CAAC,EAC3B,CAAC,iBAAiB,EAAEC,mBAAmB,CAAC,EACxC,CAAC,eAAe,EAAEC,iBAAiB,CAAC,EACpC,CAAC,aAAa,EAAEC,eAAe,CAAC,EAChC,CAAC,oBAAoB,EAAEC,qBAAqB,CAAC,EAC7C,CAAC,kBAAkB,EAAEC,mBAAmB,CAAC,EACzC,CAAC,QAAQ,EAAEC,WAAW,CAAC,EACvB,CAAC,eAAe,EAAEC,iBAAiB,CAAC,EACpC,CAAC,YAAY,EAAEC,cAAc,CAAC,EAC9B,CAAC,YAAY,EAAEC,cAAc,CAAC,EAC9B,CAAC,SAAS,EAAEC,YAAY,CAAC,EACzB,CAAC,MAAM,EAAEC,SAAS,CAAC,EACnB,CAAC,YAAY,EAAEC,cAAc,CAAC,EAC9B,CAAC,aAAa,EAAEC,eAAe,CAAC,CACjC,CAAC;AAEF,OAAO,SAASG,UAAUA,CAACC,KAAK,GAAGX,WAAW,EAAEY,OAAO,EAAE;EACvD,IAAI,OAAOD,KAAK,KAAK,UAAU,EAAE,OAAOA,KAAK,CAAC,CAAC;EAC/C,MAAME,CAAC,GAAGL,MAAM,CAACM,GAAG,CAAE,GAAEH,KAAM,EAAC,CAACI,WAAW,CAAC,CAAC,CAAC;EAC9C,IAAI,CAACF,CAAC,EAAE,MAAM,IAAIG,KAAK,CAAE,kBAAiBL,KAAM,EAAC,CAAC;EAClD,IAAIC,OAAO,KAAKK,SAAS,EAAE;IACzB,IAAI,MAAM,IAAIJ,CAAC,EAAE;MACf,OAAOA,CAAC,CAACK,IAAI,CAACN,OAAO,CAAC;IACxB,CAAC,MAAM,IAAI,SAAS,IAAIC,CAAC,EAAE;MACzB,OAAOA,CAAC,CAACD,OAAO,CAACA,OAAO,CAAC;IAC3B,CAAC,MAAM,IAAI,OAAO,IAAIC,CAAC,EAAE;MACvB,OAAOA,CAAC,CAACM,KAAK,CAACP,OAAO,CAAC;IACzB;EACF;EACA,OAAOC,CAAC;AACV;;AAEA;AACA;AACA,OAAO,SAASO,cAAcA,CAACT,KAAK,GAAGU,SAAS,EAAET,OAAO,EAAE;EACzD,OAAO,OAAOD,KAAK,KAAK,UAAU,IAAK,GAAEA,KAAM,EAAC,CAACI,WAAW,CAAC,CAAC,KAAK,MAAM,GAAGM,SAAS,GAAGX,UAAU,CAACC,KAAK,EAAEC,OAAO,CAAC;AACpH;;AAEA;AACA;AACA;AACA,OAAO,SAASS,SAASA,CAACC,OAAO,EAAE;EACjC,OAAOtB,WAAW,CAACsB,OAAO,CAAC;AAC7B"},"metadata":{},"sourceType":"module","externalDependencies":[]}