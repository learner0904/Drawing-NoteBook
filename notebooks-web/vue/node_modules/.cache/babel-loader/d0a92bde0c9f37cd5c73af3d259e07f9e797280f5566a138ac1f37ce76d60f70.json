{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      exampleDialogVisible: false,\n      examples: [{\n        id: 1,\n        name: \"柱状图\",\n        picture: \"http://localhost:9090/files/1728898731983-d3-output.png\",\n        code: `d3.csv(\"http://localhost:9090/files/earthquake2.csv\").then(data => {\n            data.forEach(d => { d.Magnitude = +d.Magnitude; });\n            const magnitudeCount = d3.rollup(data, v => v.length, d => d.Magnitude);\n            const totalCount = d3.sum(Array.from(magnitudeCount.values()));\n            const aggregatedData = Array.from(magnitudeCount, ([magnitude, count]) => ({\n              Magnitude: magnitude,\n              proportion: count / totalCount\n            })).sort((a, b) => a.Magnitude - b.Magnitude);\n\n            const svg = d3.select(container).append('svg').attr('width', 700).attr('height', 500);\n            svg.append('rect').attr('x', 0).attr('y', 0).attr('width', 700).attr('height', 500).attr('fill', 'white');\n            const xScale = d3.scaleBand().domain(aggregatedData.map(d => d.Magnitude)).range([50, 650]).padding(0.3);\n            const yScale = d3.scaleLinear().domain([0, d3.max(aggregatedData, d => d.proportion)]).range([450, 50]);\n\n            svg.selectAll('rect.bar').data(aggregatedData).enter().append('rect').attr('class', 'bar')\n              .attr('x', d => xScale(d.Magnitude)).attr('y', d => yScale(d.proportion))\n              .attr('width', xScale.bandwidth()).attr('height', d => 450 - yScale(d.proportion)).attr('fill', 'black');\n\n            const yAxisGrid = d3.axisLeft(yScale).tickSize(-600).tickFormat('');\n            svg.append('g').attr('class', 'grid').attr('transform', 'translate(50, 0)').call(yAxisGrid)\n              .selectAll('line').attr('stroke', 'lightgray').attr('stroke-dasharray', '2,2');\n            const xAxis = d3.axisBottom(xScale), yAxis = d3.axisLeft(yScale);\n            svg.append('g').attr('transform', 'translate(0, 450)').call(xAxis);\n            svg.append('g').attr('transform', 'translate(50, 0)').call(yAxis);\n            svg.append('line').attr('x1', 50).attr('x2', 650).attr('y1', yScale(0)).attr('y2', yScale(0)).attr('stroke', 'black').attr('stroke-width', 1);\n          });`\n      }]\n    };\n  },\n  methods: {\n    openExamplePage() {\n      this.exampleDialogVisible = true;\n    },\n    showExample(example) {\n      this.$router.push({\n        path: '/d3runner',\n        query: {\n          id: null,\n          code: example.code,\n          picture: example.picture\n        }\n      });\n    },\n    goToD3RunnerWithoutId() {\n      this.$router.push({\n        path: '/d3runner'\n      });\n    }\n  }\n};","map":{"version":3,"names":["data","exampleDialogVisible","examples","id","name","picture","code","methods","openExamplePage","showExample","example","$router","push","path","query","goToD3RunnerWithoutId"],"sources":["src/views/manager/Notes.vue"],"sourcesContent":["<template>\r\n  <div class=\"notes-container\">\r\n    <el-row :gutter=\"20\">\r\n      <!-- Add card to trigger child page -->\r\n      <el-col :span=\"8\">\r\n        <div class=\"add-card\" @click=\"openExamplePage\">\r\n          <div class=\"plus-sign\">+</div>\r\n        </div>\r\n      </el-col>\r\n    </el-row>\r\n\r\n    <!-- Example modal -->\r\n    <el-dialog\r\n      title=\"示例选择\"\r\n      :visible.sync=\"exampleDialogVisible\"\r\n      width=\"60%\"\r\n    >\r\n      <el-row :gutter=\"20\">\r\n        <!-- Add new D3 chart -->\r\n        <el-col :span=\"8\">\r\n          <div class=\"add-card\" @click=\"goToD3RunnerWithoutId\">\r\n            <div class=\"plus-sign\">+</div>\r\n          </div>\r\n        </el-col>\r\n\r\n        <!-- Example cards -->\r\n        <el-col :span=\"8\" v-for=\"example in examples\" :key=\"example.id\">\r\n          <el-card class=\"example-card\" @click=\"showExample(example)\">\r\n            <img :src=\"example.picture\" alt=\"Example Image\" style=\"max-height: 250px; width: 100%; object-fit: cover;\">\r\n            <div class=\"example-content\" style=\"text-align: center; margin-top: 10px;\">\r\n              <p>{{ example.name }}</p>\r\n            </div>\r\n          </el-card>\r\n        </el-col>\r\n      </el-row>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      exampleDialogVisible: false,\r\n      examples: [\r\n        {\r\n          id: 1,\r\n          name: \"柱状图\",\r\n          picture: \"http://localhost:9090/files/1728898731983-d3-output.png\",\r\n          code: `d3.csv(\"http://localhost:9090/files/earthquake2.csv\").then(data => {\r\n            data.forEach(d => { d.Magnitude = +d.Magnitude; });\r\n            const magnitudeCount = d3.rollup(data, v => v.length, d => d.Magnitude);\r\n            const totalCount = d3.sum(Array.from(magnitudeCount.values()));\r\n            const aggregatedData = Array.from(magnitudeCount, ([magnitude, count]) => ({\r\n              Magnitude: magnitude,\r\n              proportion: count / totalCount\r\n            })).sort((a, b) => a.Magnitude - b.Magnitude);\r\n\r\n            const svg = d3.select(container).append('svg').attr('width', 700).attr('height', 500);\r\n            svg.append('rect').attr('x', 0).attr('y', 0).attr('width', 700).attr('height', 500).attr('fill', 'white');\r\n            const xScale = d3.scaleBand().domain(aggregatedData.map(d => d.Magnitude)).range([50, 650]).padding(0.3);\r\n            const yScale = d3.scaleLinear().domain([0, d3.max(aggregatedData, d => d.proportion)]).range([450, 50]);\r\n\r\n            svg.selectAll('rect.bar').data(aggregatedData).enter().append('rect').attr('class', 'bar')\r\n              .attr('x', d => xScale(d.Magnitude)).attr('y', d => yScale(d.proportion))\r\n              .attr('width', xScale.bandwidth()).attr('height', d => 450 - yScale(d.proportion)).attr('fill', 'black');\r\n\r\n            const yAxisGrid = d3.axisLeft(yScale).tickSize(-600).tickFormat('');\r\n            svg.append('g').attr('class', 'grid').attr('transform', 'translate(50, 0)').call(yAxisGrid)\r\n              .selectAll('line').attr('stroke', 'lightgray').attr('stroke-dasharray', '2,2');\r\n            const xAxis = d3.axisBottom(xScale), yAxis = d3.axisLeft(yScale);\r\n            svg.append('g').attr('transform', 'translate(0, 450)').call(xAxis);\r\n            svg.append('g').attr('transform', 'translate(50, 0)').call(yAxis);\r\n            svg.append('line').attr('x1', 50).attr('x2', 650).attr('y1', yScale(0)).attr('y2', yScale(0)).attr('stroke', 'black').attr('stroke-width', 1);\r\n          });`\r\n        }\r\n      ]\r\n    };\r\n  },\r\n  methods: {\r\n    openExamplePage() {\r\n      this.exampleDialogVisible = true;\r\n    },\r\n    showExample(example) {\r\n      this.$router.push({ path: '/d3runner', query: { id: null, code: example.code, picture: example.picture } });\r\n    },\r\n    goToD3RunnerWithoutId() {\r\n      this.$router.push({ path: '/d3runner' });\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.notes-container {\r\n  padding: 20px;\r\n}\r\n\r\n.add-card {\r\n  border: 2px dashed #d9d9d9;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 350px;\r\n  border-radius: 15px;\r\n  cursor: pointer;\r\n  transition: border-color 0.3s ease;\r\n}\r\n\r\n.add-card:hover {\r\n  border-color: #409EFF;\r\n}\r\n\r\n.plus-sign {\r\n  font-size: 60px;\r\n  color: #409EFF;\r\n}\r\n\r\n.example-card {\r\n  cursor: pointer;\r\n}\r\n\r\n.example-card img {\r\n  border-radius: 10px;\r\n}\r\n</style>\r\n"],"mappings":";AAwCA;EACAA,KAAA;IACA;MACAC,oBAAA;MACAC,QAAA,GACA;QACAC,EAAA;QACAC,IAAA;QACAC,OAAA;QACAC,IAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACA;IAEA;EACA;EACAC,OAAA;IACAC,gBAAA;MACA,KAAAP,oBAAA;IACA;IACAQ,YAAAC,OAAA;MACA,KAAAC,OAAA,CAAAC,IAAA;QAAAC,IAAA;QAAAC,KAAA;UAAAX,EAAA;UAAAG,IAAA,EAAAI,OAAA,CAAAJ,IAAA;UAAAD,OAAA,EAAAK,OAAA,CAAAL;QAAA;MAAA;IACA;IACAU,sBAAA;MACA,KAAAJ,OAAA,CAAAC,IAAA;QAAAC,IAAA;MAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}