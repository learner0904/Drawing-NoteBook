{"ast":null,"code":"\n// 在这里写你的 D3.js 代码","map":{"version":3,"names":[],"sources":["src/views/manager/D3Runner.vue"],"sourcesContent":["<template>\r\n  <div class=\"d3-runner-container\">\r\n    <h3>D3.js 绘图页面</h3>\r\n    <textarea v-model=\"d3Code\" rows=\"10\" placeholder=\"输入 D3.js 代码\"></textarea>\r\n    <button @click=\"runD3Code\">运行代码</button>\r\n    <button @click=\"saveD3Output\">保存</button>\r\n    <div ref=\"d3Output\" class=\"d3-output\"></div>\r\n\r\n    <!-- 显示图片 -->\r\n    <div v-if=\"pictureUrl\" class=\"note-picture\">\r\n      <img :src=\"pictureUrl\" alt=\"D3 Output\" style=\"max-width: 100%; margin-top: 10px;\">\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as d3 from 'd3';\r\nimport axios from 'axios';\r\nimport * as Plot from '@observablehq/plot'; // 导入 Plot\r\nimport { h } from \"vue\";  // 确保在此处导入 h 函数\r\n\r\nexport default {\r\n  name: \"D3Runner\",\r\n  data() {\r\n    return {\r\n      d3Code: this.$route.query.code || \"\", // 存储用户输入的 D3.js 代码\r\n      pictureUrl: this.$route.query.picture || \"\", // 存储图片URL\r\n      noteId: this.$route.query.id || null, // 从路由获取 noteId，若无则为新建\r\n    };\r\n  },\r\n  created() {\r\n    if (this.noteId) {\r\n      this.fetchNoteDetails();\r\n    }\r\n  },\r\n  methods: {\r\n    fetchNoteDetails() {\r\n      // 将请求 URL 修改为路径变量形式\r\n      this.$request.get(`/notes/selectById/${this.noteId}`)\r\n        .then(res => {\r\n          if (res.code === '200' && res.data) {\r\n            this.d3Code = res.data.code || \"\"; // 将 code 放入 d3Code\r\n            this.pictureUrl = res.data.picture || \"\"; // 将图片 URL 放入 pictureUrl\r\n          } else {\r\n            this.$message.error(res.msg || '无法加载Note详情');\r\n          }\r\n        })\r\n        .catch(error => {\r\n          console.error(\"获取 Note 详情失败:\", error);\r\n          this.$message.error('获取 Note 详情失败');\r\n        });\r\n    },\r\n    runD3Code() {\r\n      const svgContainer = this.$refs.d3Output;\r\n\r\n      // 清空以前的图像\r\n      while (svgContainer.firstChild) {\r\n        svgContainer.removeChild(svgContainer.firstChild);\r\n      }\r\n\r\n      // 运行用户输入的代码\r\n      try {\r\n        if (this.d3Code.includes('Plot')) {\r\n          if (this.d3Code.includes('data')) {\r\n            function parseCSV(csvData, delimiter = ',') {\r\n              const rows = csvData.trim().split('\\n');\r\n              const headers = rows[0].split(delimiter).map(header => header.trim());\r\n\r\n              const data = rows.slice(1).map(row => {\r\n                const values = row.split(delimiter).map(value => value.trim());\r\n                const obj = {};\r\n\r\n                headers.forEach((header, index) => {\r\n                  obj[header] = isNaN(values[index]) ? values[index] : parseFloat(values[index]);\r\n                });\r\n\r\n                return obj;\r\n              });\r\n\r\n              return data;\r\n            }\r\n\r\n            const filenameMatch = this.d3Code.match(/data\\s*=\\s*\"([^\"]+)\"/);\r\n            const filename = filenameMatch ? filenameMatch[1] : null;\r\n            const code = this.d3Code.split('\\n').slice(1).join('\\n').trim();\r\n            console.log('filename:', filename); // 调试输出\r\n            console.log('code:', code); // 调试输出\r\n            // 确保在请求成功后再调用 userFunc\r\n\r\n            const fileUrl = 'http://localhost:9090' + '/files/' + filename;\r\n            console.log('fileUrl:', fileUrl); // 调试输出\r\n            axios.get(fileUrl)\r\n              .then(response => {\r\n                console.log('CSV data:', response.data); // 调试输出\r\n                const csvdata = parseCSV(response.data, ',');\r\n                console.log('CSV data:', csvdata); // 调试输出\r\n                console.log(`Generated function code: const plot = Plot.plot(${code});`);\r\n\r\n                const userFunc = new Function('Plot', 'container', 'data', `\r\n                  const plot = Plot.plot({${code}});\r\n                  container.appendChild(plot);\r\n                `);\r\n                userFunc(Plot, svgContainer, csvdata); // 在这里调用 userFunc，确保 csvdata 已赋值\r\n              })\r\n              .catch(error => {\r\n                console.error('Error fetching CSV data:', error); // 错误处理\r\n              });\r\n\r\n          } else {\r\n            // 包装用户输入的代码\r\n            const userFunc = new Function('Plot', 'container',\r\n              `const plot = Plot.plot(${this.d3Code});\r\n              container.appendChild(plot);`\r\n            );\r\n            userFunc(Plot, svgContainer);\r\n          }\r\n\r\n        } else {\r\n          const userFunc = new Function('d3', 'container', this.d3Code);\r\n          userFunc(d3, svgContainer);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"代码执行出错:\", error);\r\n        alert(\"代码执行出错，请检查代码。\");\r\n      }\r\n    },\r\n\r\n    saveD3Output() {\r\n      const svgElement = this.$refs.d3Output.querySelector('svg');\r\n\r\n      if (!svgElement) {\r\n        alert(\"没有可保存的 D3.js 图形，请先运行代码。\");\r\n        return;\r\n      }\r\n\r\n      // 将 SVG 转换为 PNG 图片\r\n      const svgData = new XMLSerializer().serializeToString(svgElement);\r\n      const canvas = document.createElement('canvas');\r\n      const ctx = canvas.getContext('2d');\r\n      const img = new Image();\r\n\r\n      const svgBlob = new Blob([svgData], { type: 'image/svg+xml;charset=utf-8' });\r\n      const url = URL.createObjectURL(svgBlob);\r\n\r\n      img.onload = () => {\r\n        // 设置 canvas 大小与 SVG 一致\r\n        canvas.width = img.width;\r\n        canvas.height = img.height;\r\n\r\n        // 将 SVG 绘制到 canvas 上\r\n        ctx.drawImage(img, 0, 0);\r\n\r\n        // 将 canvas 转换为 PNG\r\n        canvas.toBlob((blob) => {\r\n          const formData = new FormData();\r\n          formData.append('file', blob, 'd3-output.png');\r\n\r\n          // 上传图片到服务器\r\n          axios.post(this.$baseUrl + '/files/upload', formData)\r\n            .then(response => {\r\n              const pictureUrl = response.data.data;\r\n              console.log('Picture URL:', pictureUrl); // 调试输出\r\n              // 保存或者更新 notes\r\n              const noteData = {\r\n                id: this.noteId,\r\n                comment: 'D3.js 图形',\r\n                code: this.d3Code,\r\n                picture: pictureUrl\r\n              };\r\n\r\n              this.$request({\r\n                method: this.noteId ? 'put' : 'post',\r\n                url: this.noteId ? '/notes/update' : '/notes/add',\r\n                data: noteData\r\n              }).then(res => {\r\n                if (res.code === '200') {\r\n                  this.$message.success(this.noteId ? 'Note 更新成功' : 'Note 创建成功');\r\n                } else {\r\n                  this.$message.error(res.msg || '操作失败');\r\n                }\r\n              }).catch(error => {\r\n                console.error(this.noteId ? '更新 Note 失败:' : '创建 Note 失败:', error);\r\n                this.$message.error('操作失败，请稍后再试');\r\n              });\r\n\r\n            })\r\n            .catch(error => {\r\n              console.error(\"上传图片失败:\", error);\r\n            });\r\n        });\r\n      };\r\n\r\n      img.src = url; // 触发图像加载\r\n    },\r\n    openInteractiveChart() {\r\n  const newWindow = window.open(\"\", \"_blank\");\r\n  newWindow.document.write(`\r\n    <!DOCTYPE html>\r\n    <html lang=\"en\">\r\n    <head>\r\n      <meta charset=\"UTF-8\">\r\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n      <title>Interactive Chart</title>\r\n    </head>\r\n    <body>\r\n      <div id=\"chart\"></div>\r\n      <script src=\"https://d3js.org/d3.v6.min.js\"></script>\r\n      <script>\r\n        // 在这里写你的 D3.js 代码\r\n      </script>\r\n    </body>\r\n    </html>\r\n  `); // 确保这一行有结束的反引号\r\n  newWindow.document.close(); // 关闭文档流\r\n}\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\ntextarea {\r\n  width: 100%;\r\n  padding: 10px;\r\n  margin-bottom: 10px;\r\n  font-family: monospace;\r\n  font-size: 14px;\r\n}\r\n\r\n.d3-runner-container {\r\n  background-color: white; /* 设置背景颜色为白色 */\r\n  padding: 20px; /* 可选：添加一些内边距 */\r\n  border-radius: 8px; /* 可选：圆角 */\r\n}\r\n\r\n.d3-output {\r\n  border: 1px solid #ddd;\r\n  padding: 10px;\r\n  margin-top: 10px;\r\n  min-height: 300px;\r\n}\r\n\r\nbutton {\r\n  margin-right: 10px;\r\n}\r\n\r\n.note-picture img {\r\n  max-width: 100%;\r\n  margin-top: 10px;\r\n}\r\n</style>\r\n"],"mappings":";AAgNA"},"metadata":{},"sourceType":"script","externalDependencies":[]}