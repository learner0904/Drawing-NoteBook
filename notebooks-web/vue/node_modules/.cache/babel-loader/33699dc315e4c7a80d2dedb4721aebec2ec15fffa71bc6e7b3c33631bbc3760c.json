{"ast":null,"code":"import \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport * as d3 from 'd3';\nimport axios from 'axios';\nimport * as Plot from '@observablehq/plot'; // 导入 Plot\nimport { h } from \"vue\"; // 确保在此处导入 h 函数\n\nexport default {\n  name: \"D3Runner\",\n  data() {\n    return {\n      d3Code: this.$route.query.code || \"\",\n      // 存储用户输入的 D3.js 代码\n      pictureUrl: this.$route.query.picture || \"\",\n      // 存储图片URL\n      noteId: this.$route.query.id || null // 从路由获取 noteId，若无则为新建\n    };\n  },\n\n  created() {\n    if (this.noteId) {\n      this.fetchNoteDetails();\n    }\n  },\n  methods: {\n    fetchNoteDetails() {\n      // 将请求 URL 修改为路径变量形式\n      this.$request.get(`/notes/selectById/${this.noteId}`).then(res => {\n        if (res.code === '200' && res.data) {\n          this.d3Code = res.data.code || \"\"; // 将 code 放入 d3Code\n          this.pictureUrl = res.data.picture || \"\"; // 将图片 URL 放入 pictureUrl\n        } else {\n          this.$message.error(res.msg || '无法加载Note详情');\n        }\n      }).catch(error => {\n        console.error(\"获取 Note 详情失败:\", error);\n        this.$message.error('获取 Note 详情失败');\n      });\n    },\n    runD3Code() {\n      const svgContainer = this.$refs.d3Output;\n\n      // 清空以前的图像\n      while (svgContainer.firstChild) {\n        svgContainer.removeChild(svgContainer.firstChild);\n      }\n\n      // 运行用户输入的代码\n      try {\n        if (this.d3Code.includes('Plot')) {\n          if (this.d3Code.includes('data')) {\n            function parseCSV(csvData, delimiter = ',') {\n              const rows = csvData.trim().split('\\n');\n              const headers = rows[0].split(delimiter).map(header => header.trim());\n              const data = rows.slice(1).map(row => {\n                const values = row.split(delimiter).map(value => value.trim());\n                const obj = {};\n                headers.forEach((header, index) => {\n                  obj[header] = isNaN(values[index]) ? values[index] : parseFloat(values[index]);\n                });\n                return obj;\n              });\n              return data;\n            }\n            const filenameMatch = this.d3Code.match(/data\\s*=\\s*\"([^\"]+)\"/);\n            const filename = filenameMatch ? filenameMatch[1] : null;\n            const code = this.d3Code.split('\\n').slice(1).join('\\n').trim();\n            console.log('filename:', filename); // 调试输出\n            console.log('code:', code); // 调试输出\n            // 确保在请求成功后再调用 userFunc\n\n            const fileUrl = 'http://localhost:9090' + '/files/' + filename;\n            console.log('fileUrl:', fileUrl); // 调试输出\n            axios.get(fileUrl).then(response => {\n              console.log('CSV data:', response.data); // 调试输出\n              const csvdata = parseCSV(response.data, ',');\n              console.log('CSV data:', csvdata); // 调试输出\n              console.log(`Generated function code: const plot = Plot.plot(${code});`);\n              const userFunc = new Function('Plot', 'container', 'data', `\n                  const plot = Plot.plot({${code}});\n                  container.appendChild(plot);\n                `);\n              userFunc(Plot, svgContainer, csvdata); // 在这里调用 userFunc，确保 csvdata 已赋值\n            }).catch(error => {\n              console.error('Error fetching CSV data:', error); // 错误处理\n            });\n          } else {\n            // 包装用户输入的代码\n            const userFunc = new Function('Plot', 'container', `const plot = Plot.plot(${this.d3Code});\n              container.appendChild(plot);`);\n            userFunc(Plot, svgContainer);\n          }\n        } else {\n          const userFunc = new Function('d3', 'container', this.d3Code);\n          userFunc(d3, svgContainer);\n        }\n      } catch (error) {\n        console.error(\"代码执行出错:\", error);\n        alert(\"代码执行出错，请检查代码。\");\n      }\n    },\n    runInteractiveD3() {\n      const svgContainer = this.$refs.d3Output;\n\n      // 清空以前的图像\n      while (svgContainer.firstChild) {\n        svgContainer.removeChild(svgContainer.firstChild);\n      }\n      try {\n        // 定义示例数据\n        const sampleData = {\n          name: \"root\",\n          children: [{\n            name: \"child1\",\n            value: 10\n          }, {\n            name: \"child2\",\n            children: [{\n              name: \"grandchild1\",\n              value: 5\n            }, {\n              name: \"grandchild2\",\n              value: 7\n            }]\n          }]\n        };\n        const width = 928;\n        const radius = width / 6;\n\n        // 配置颜色和图表结构\n        const color = d3.scaleOrdinal(d3.quantize(d3.interpolateRainbow, sampleData.children.length + 1));\n        const hierarchy = d3.hierarchy(sampleData).sum(d => d.value).sort((a, b) => b.value - a.value);\n        const root = d3.partition().size([2 * Math.PI, hierarchy.height + 1])(hierarchy);\n        root.each(d => d.current = d);\n        const arc = d3.arc().startAngle(d => d.x0).endAngle(d => d.x1).padAngle(d => Math.min((d.x1 - d.x0) / 2, 0.005)).padRadius(radius * 1.5).innerRadius(d => d.y0 * radius).outerRadius(d => Math.max(d.y0 * radius, d.y1 * radius - 1));\n\n        // 创建 SVG 并设置视图\n        const svg = d3.create(\"svg\").attr(\"viewBox\", [-width / 2, -width / 2, width, width]).style(\"font\", \"10px sans-serif\");\n\n        // 绘制路径\n        const path = svg.append(\"g\").selectAll(\"path\").data(root.descendants().slice(1)).join(\"path\").attr(\"fill\", d => {\n          while (d.depth > 1) d = d.parent;\n          return color(d.data.name);\n        }).attr(\"d\", d => arc(d.current)).on(\"click\", clicked);\n        path.append(\"title\").text(d => `${d.ancestors().map(d => d.data.name).reverse().join(\"/\")}\\n${d.value}`);\n\n        // 添加点击交互\n        function clicked(event, p) {\n          root.each(d => d.target = {\n            x0: d.x0,\n            x1: d.x1,\n            y0: d.y0,\n            y1: d.y1\n          });\n          const t = svg.transition().duration(750);\n          path.transition(t).attrTween(\"d\", d => {\n            const i = d3.interpolate(d.current, d.target);\n            return t => d.current = i(t);\n          });\n        }\n        svgContainer.appendChild(svg.node());\n      } catch (error) {\n        console.error(\"代码执行出错:\", error);\n        alert(\"代码执行出错，请检查代码。\");\n      }\n    },\n    saveD3Output() {\n      const svgElement = this.$refs.d3Output.querySelector('svg');\n      if (!svgElement) {\n        alert(\"没有可保存的 D3.js 图形，请先运行代码。\");\n        return;\n      }\n\n      // 将 SVG 转换为 PNG 图片\n      const svgData = new XMLSerializer().serializeToString(svgElement);\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d');\n      const img = new Image();\n      const svgBlob = new Blob([svgData], {\n        type: 'image/svg+xml;charset=utf-8'\n      });\n      const url = URL.createObjectURL(svgBlob);\n      img.onload = () => {\n        // 设置 canvas 大小与 SVG 一致\n        canvas.width = img.width;\n        canvas.height = img.height;\n\n        // 将 SVG 绘制到 canvas 上\n        ctx.drawImage(img, 0, 0);\n\n        // 将 canvas 转换为 PNG\n        canvas.toBlob(blob => {\n          const formData = new FormData();\n          formData.append('file', blob, 'd3-output.png');\n\n          // 上传图片到服务器\n          axios.post(this.$baseUrl + '/files/upload', formData).then(response => {\n            const pictureUrl = response.data.data;\n            console.log('Picture URL:', pictureUrl); // 调试输出\n            // 保存或者更新 notes\n            const noteData = {\n              id: this.noteId,\n              comment: 'D3.js 图形',\n              code: this.d3Code,\n              picture: pictureUrl\n            };\n            this.$request({\n              method: this.noteId ? 'put' : 'post',\n              url: this.noteId ? '/notes/update' : '/notes/add',\n              data: noteData\n            }).then(res => {\n              if (res.code === '200') {\n                this.$message.success(this.noteId ? 'Note 更新成功' : 'Note 创建成功');\n              } else {\n                this.$message.error(res.msg || '操作失败');\n              }\n            }).catch(error => {\n              console.error(this.noteId ? '更新 Note 失败:' : '创建 Note 失败:', error);\n              this.$message.error('操作失败，请稍后再试');\n            });\n          }).catch(error => {\n            console.error(\"上传图片失败:\", error);\n          });\n        });\n      };\n      img.src = url; // 触发图像加载\n    }\n  }\n};","map":{"version":3,"names":["d3","axios","Plot","h","name","data","d3Code","$route","query","code","pictureUrl","picture","noteId","id","created","fetchNoteDetails","methods","$request","get","then","res","$message","error","msg","catch","console","runD3Code","svgContainer","$refs","d3Output","firstChild","removeChild","includes","parseCSV","csvData","delimiter","rows","trim","split","headers","map","header","slice","row","values","value","obj","forEach","index","isNaN","parseFloat","filenameMatch","match","filename","join","log","fileUrl","response","csvdata","userFunc","Function","alert","runInteractiveD3","sampleData","children","width","radius","color","scaleOrdinal","quantize","interpolateRainbow","length","hierarchy","sum","d","sort","a","b","root","partition","size","Math","PI","height","each","current","arc","startAngle","x0","endAngle","x1","padAngle","min","padRadius","innerRadius","y0","outerRadius","max","y1","svg","create","attr","style","path","append","selectAll","descendants","depth","parent","on","clicked","text","ancestors","reverse","event","p","target","t","transition","duration","attrTween","i","interpolate","appendChild","node","saveD3Output","svgElement","querySelector","svgData","XMLSerializer","serializeToString","canvas","document","createElement","ctx","getContext","img","Image","svgBlob","Blob","type","url","URL","createObjectURL","onload","drawImage","toBlob","blob","formData","FormData","post","$baseUrl","noteData","comment","method","success","src"],"sources":["src/views/manager/D3Runner.vue"],"sourcesContent":["<template>\r\n  <div class=\"d3-runner-container\">\r\n    <h3>D3.js 绘图页面</h3>\r\n    <textarea v-model=\"d3Code\" rows=\"10\" placeholder=\"输入 D3.js 代码\"></textarea>\r\n    <button @click=\"runD3Code\">运行代码</button>\r\n    <button @click=\"runInteractiveD3\">运行互动图</button>\r\n    <button @click=\"saveD3Output\">保存</button>\r\n    <div ref=\"d3Output\" class=\"d3-output\"></div>\r\n\r\n    <!-- 显示图片 -->\r\n    <div v-if=\"pictureUrl\" class=\"note-picture\">\r\n      <img :src=\"pictureUrl\" alt=\"D3 Output\" style=\"max-width: 100%; margin-top: 10px;\">\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as d3 from 'd3';\r\nimport axios from 'axios';\r\nimport * as Plot from '@observablehq/plot'; // 导入 Plot\r\nimport { h } from \"vue\";  // 确保在此处导入 h 函数\r\n\r\nexport default {\r\n  name: \"D3Runner\",\r\n  data() {\r\n    return {\r\n      d3Code: this.$route.query.code || \"\", // 存储用户输入的 D3.js 代码\r\n      pictureUrl: this.$route.query.picture || \"\", // 存储图片URL\r\n      noteId: this.$route.query.id || null, // 从路由获取 noteId，若无则为新建\r\n    };\r\n  },\r\n  created() {\r\n    if (this.noteId) {\r\n      this.fetchNoteDetails();\r\n    }\r\n  },\r\n  methods: {\r\n    fetchNoteDetails() {\r\n      // 将请求 URL 修改为路径变量形式\r\n      this.$request.get(`/notes/selectById/${this.noteId}`)\r\n        .then(res => {\r\n          if (res.code === '200' && res.data) {\r\n            this.d3Code = res.data.code || \"\"; // 将 code 放入 d3Code\r\n            this.pictureUrl = res.data.picture || \"\"; // 将图片 URL 放入 pictureUrl\r\n          } else {\r\n            this.$message.error(res.msg || '无法加载Note详情');\r\n          }\r\n        })\r\n        .catch(error => {\r\n          console.error(\"获取 Note 详情失败:\", error);\r\n          this.$message.error('获取 Note 详情失败');\r\n        });\r\n    },\r\n    runD3Code() {\r\n      const svgContainer = this.$refs.d3Output;\r\n\r\n      // 清空以前的图像\r\n      while (svgContainer.firstChild) {\r\n        svgContainer.removeChild(svgContainer.firstChild);\r\n      }\r\n\r\n      // 运行用户输入的代码\r\n      try {\r\n        if (this.d3Code.includes('Plot')) {\r\n          if (this.d3Code.includes('data')) {\r\n            function parseCSV(csvData, delimiter = ',') {\r\n              const rows = csvData.trim().split('\\n');\r\n              const headers = rows[0].split(delimiter).map(header => header.trim());\r\n\r\n              const data = rows.slice(1).map(row => {\r\n                const values = row.split(delimiter).map(value => value.trim());\r\n                const obj = {};\r\n\r\n                headers.forEach((header, index) => {\r\n                  obj[header] = isNaN(values[index]) ? values[index] : parseFloat(values[index]);\r\n                });\r\n\r\n                return obj;\r\n              });\r\n\r\n              return data;\r\n            }\r\n\r\n            const filenameMatch = this.d3Code.match(/data\\s*=\\s*\"([^\"]+)\"/);\r\n            const filename = filenameMatch ? filenameMatch[1] : null;\r\n            const code = this.d3Code.split('\\n').slice(1).join('\\n').trim();\r\n            console.log('filename:', filename); // 调试输出\r\n            console.log('code:', code); // 调试输出\r\n            // 确保在请求成功后再调用 userFunc\r\n\r\n            const fileUrl = 'http://localhost:9090' + '/files/' + filename;\r\n            console.log('fileUrl:', fileUrl); // 调试输出\r\n            axios.get(fileUrl)\r\n              .then(response => {\r\n                console.log('CSV data:', response.data); // 调试输出\r\n                const csvdata = parseCSV(response.data, ',');\r\n                console.log('CSV data:', csvdata); // 调试输出\r\n                console.log(`Generated function code: const plot = Plot.plot(${code});`);\r\n\r\n                const userFunc = new Function('Plot', 'container', 'data', `\r\n                  const plot = Plot.plot({${code}});\r\n                  container.appendChild(plot);\r\n                `);\r\n                userFunc(Plot, svgContainer, csvdata); // 在这里调用 userFunc，确保 csvdata 已赋值\r\n              })\r\n              .catch(error => {\r\n                console.error('Error fetching CSV data:', error); // 错误处理\r\n              });\r\n\r\n          } else {\r\n            // 包装用户输入的代码\r\n            const userFunc = new Function('Plot', 'container',\r\n              `const plot = Plot.plot(${this.d3Code});\r\n              container.appendChild(plot);`\r\n            );\r\n            userFunc(Plot, svgContainer);\r\n          }\r\n\r\n        } else {\r\n          const userFunc = new Function('d3', 'container', this.d3Code);\r\n          userFunc(d3, svgContainer);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"代码执行出错:\", error);\r\n        alert(\"代码执行出错，请检查代码。\");\r\n      }\r\n    },\r\n    runInteractiveD3() {\r\n  const svgContainer = this.$refs.d3Output;\r\n\r\n  // 清空以前的图像\r\n  while (svgContainer.firstChild) {\r\n    svgContainer.removeChild(svgContainer.firstChild);\r\n  }\r\n\r\n  try {\r\n    // 定义示例数据\r\n    const sampleData = {\r\n      name: \"root\",\r\n      children: [\r\n        { name: \"child1\", value: 10 },\r\n        {\r\n          name: \"child2\",\r\n          children: [\r\n            { name: \"grandchild1\", value: 5 },\r\n            { name: \"grandchild2\", value: 7 }\r\n          ]\r\n        }\r\n      ]\r\n    };\r\n\r\n    const width = 928;\r\n    const radius = width / 6;\r\n\r\n    // 配置颜色和图表结构\r\n    const color = d3.scaleOrdinal(d3.quantize(d3.interpolateRainbow, sampleData.children.length + 1));\r\n    const hierarchy = d3.hierarchy(sampleData).sum(d => d.value).sort((a, b) => b.value - a.value);\r\n    const root = d3.partition().size([2 * Math.PI, hierarchy.height + 1])(hierarchy);\r\n    root.each(d => (d.current = d));\r\n\r\n    const arc = d3.arc()\r\n      .startAngle(d => d.x0)\r\n      .endAngle(d => d.x1)\r\n      .padAngle(d => Math.min((d.x1 - d.x0) / 2, 0.005))\r\n      .padRadius(radius * 1.5)\r\n      .innerRadius(d => d.y0 * radius)\r\n      .outerRadius(d => Math.max(d.y0 * radius, d.y1 * radius - 1));\r\n\r\n    // 创建 SVG 并设置视图\r\n    const svg = d3.create(\"svg\")\r\n      .attr(\"viewBox\", [-width / 2, -width / 2, width, width])\r\n      .style(\"font\", \"10px sans-serif\");\r\n\r\n    // 绘制路径\r\n    const path = svg.append(\"g\")\r\n      .selectAll(\"path\")\r\n      .data(root.descendants().slice(1))\r\n      .join(\"path\")\r\n      .attr(\"fill\", d => {\r\n        while (d.depth > 1) d = d.parent;\r\n        return color(d.data.name);\r\n      })\r\n      .attr(\"d\", d => arc(d.current))\r\n      .on(\"click\", clicked);\r\n\r\n    path.append(\"title\")\r\n      .text(d => `${d.ancestors().map(d => d.data.name).reverse().join(\"/\")}\\n${d.value}`);\r\n\r\n    // 添加点击交互\r\n    function clicked(event, p) {\r\n      root.each(d => d.target = { x0: d.x0, x1: d.x1, y0: d.y0, y1: d.y1 });\r\n      const t = svg.transition().duration(750);\r\n      path.transition(t)\r\n        .attrTween(\"d\", d => {\r\n          const i = d3.interpolate(d.current, d.target);\r\n          return t => (d.current = i(t));\r\n        });\r\n    }\r\n\r\n    svgContainer.appendChild(svg.node());\r\n  } catch (error) {\r\n    console.error(\"代码执行出错:\", error);\r\n    alert(\"代码执行出错，请检查代码。\");\r\n  }\r\n}\r\n,\r\n    saveD3Output() {\r\n      const svgElement = this.$refs.d3Output.querySelector('svg');\r\n\r\n      if (!svgElement) {\r\n        alert(\"没有可保存的 D3.js 图形，请先运行代码。\");\r\n        return;\r\n      }\r\n\r\n      // 将 SVG 转换为 PNG 图片\r\n      const svgData = new XMLSerializer().serializeToString(svgElement);\r\n      const canvas = document.createElement('canvas');\r\n      const ctx = canvas.getContext('2d');\r\n      const img = new Image();\r\n\r\n      const svgBlob = new Blob([svgData], { type: 'image/svg+xml;charset=utf-8' });\r\n      const url = URL.createObjectURL(svgBlob);\r\n\r\n      img.onload = () => {\r\n        // 设置 canvas 大小与 SVG 一致\r\n        canvas.width = img.width;\r\n        canvas.height = img.height;\r\n\r\n        // 将 SVG 绘制到 canvas 上\r\n        ctx.drawImage(img, 0, 0);\r\n\r\n        // 将 canvas 转换为 PNG\r\n        canvas.toBlob((blob) => {\r\n          const formData = new FormData();\r\n          formData.append('file', blob, 'd3-output.png');\r\n\r\n          // 上传图片到服务器\r\n          axios.post(this.$baseUrl + '/files/upload', formData)\r\n            .then(response => {\r\n              const pictureUrl = response.data.data;\r\n              console.log('Picture URL:', pictureUrl); // 调试输出\r\n              // 保存或者更新 notes\r\n              const noteData = {\r\n                id: this.noteId,\r\n                comment: 'D3.js 图形',\r\n                code: this.d3Code,\r\n                picture: pictureUrl\r\n              };\r\n\r\n              this.$request({\r\n                method: this.noteId ? 'put' : 'post',\r\n                url: this.noteId ? '/notes/update' : '/notes/add',\r\n                data: noteData\r\n              }).then(res => {\r\n                if (res.code === '200') {\r\n                  this.$message.success(this.noteId ? 'Note 更新成功' : 'Note 创建成功');\r\n                } else {\r\n                  this.$message.error(res.msg || '操作失败');\r\n                }\r\n              }).catch(error => {\r\n                console.error(this.noteId ? '更新 Note 失败:' : '创建 Note 失败:', error);\r\n                this.$message.error('操作失败，请稍后再试');\r\n              });\r\n\r\n            })\r\n            .catch(error => {\r\n              console.error(\"上传图片失败:\", error);\r\n            });\r\n        });\r\n      };\r\n\r\n      img.src = url; // 触发图像加载\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\ntextarea {\r\n  width: 100%;\r\n  padding: 10px;\r\n  margin-bottom: 10px;\r\n  font-family: monospace;\r\n  font-size: 14px;\r\n}\r\n\r\n.d3-runner-container {\r\n  background-color: white; /* 设置背景颜色为白色 */\r\n  padding: 20px; /* 可选：添加一些内边距 */\r\n  border-radius: 8px; /* 可选：圆角 */\r\n}\r\n\r\n.d3-output {\r\n  border: 1px solid #ddd;\r\n  padding: 10px;\r\n  margin-top: 10px;\r\n  min-height: 300px;\r\n}\r\n\r\nbutton {\r\n  margin-right: 10px;\r\n}\r\n\r\n.note-picture img {\r\n  max-width: 100%;\r\n  margin-top: 10px;\r\n}\r\n</style>\r\n"],"mappings":";;;AAiBA,YAAAA,EAAA;AACA,OAAAC,KAAA;AACA,YAAAC,IAAA;AACA,SAAAC,CAAA;;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,MAAA,OAAAC,MAAA,CAAAC,KAAA,CAAAC,IAAA;MAAA;MACAC,UAAA,OAAAH,MAAA,CAAAC,KAAA,CAAAG,OAAA;MAAA;MACAC,MAAA,OAAAL,MAAA,CAAAC,KAAA,CAAAK,EAAA;IACA;EACA;;EACAC,QAAA;IACA,SAAAF,MAAA;MACA,KAAAG,gBAAA;IACA;EACA;EACAC,OAAA;IACAD,iBAAA;MACA;MACA,KAAAE,QAAA,CAAAC,GAAA,2BAAAN,MAAA,IACAO,IAAA,CAAAC,GAAA;QACA,IAAAA,GAAA,CAAAX,IAAA,cAAAW,GAAA,CAAAf,IAAA;UACA,KAAAC,MAAA,GAAAc,GAAA,CAAAf,IAAA,CAAAI,IAAA;UACA,KAAAC,UAAA,GAAAU,GAAA,CAAAf,IAAA,CAAAM,OAAA;QACA;UACA,KAAAU,QAAA,CAAAC,KAAA,CAAAF,GAAA,CAAAG,GAAA;QACA;MACA,GACAC,KAAA,CAAAF,KAAA;QACAG,OAAA,CAAAH,KAAA,kBAAAA,KAAA;QACA,KAAAD,QAAA,CAAAC,KAAA;MACA;IACA;IACAI,UAAA;MACA,MAAAC,YAAA,QAAAC,KAAA,CAAAC,QAAA;;MAEA;MACA,OAAAF,YAAA,CAAAG,UAAA;QACAH,YAAA,CAAAI,WAAA,CAAAJ,YAAA,CAAAG,UAAA;MACA;;MAEA;MACA;QACA,SAAAxB,MAAA,CAAA0B,QAAA;UACA,SAAA1B,MAAA,CAAA0B,QAAA;YACA,SAAAC,SAAAC,OAAA,EAAAC,SAAA;cACA,MAAAC,IAAA,GAAAF,OAAA,CAAAG,IAAA,GAAAC,KAAA;cACA,MAAAC,OAAA,GAAAH,IAAA,IAAAE,KAAA,CAAAH,SAAA,EAAAK,GAAA,CAAAC,MAAA,IAAAA,MAAA,CAAAJ,IAAA;cAEA,MAAAhC,IAAA,GAAA+B,IAAA,CAAAM,KAAA,IAAAF,GAAA,CAAAG,GAAA;gBACA,MAAAC,MAAA,GAAAD,GAAA,CAAAL,KAAA,CAAAH,SAAA,EAAAK,GAAA,CAAAK,KAAA,IAAAA,KAAA,CAAAR,IAAA;gBACA,MAAAS,GAAA;gBAEAP,OAAA,CAAAQ,OAAA,EAAAN,MAAA,EAAAO,KAAA;kBACAF,GAAA,CAAAL,MAAA,IAAAQ,KAAA,CAAAL,MAAA,CAAAI,KAAA,KAAAJ,MAAA,CAAAI,KAAA,IAAAE,UAAA,CAAAN,MAAA,CAAAI,KAAA;gBACA;gBAEA,OAAAF,GAAA;cACA;cAEA,OAAAzC,IAAA;YACA;YAEA,MAAA8C,aAAA,QAAA7C,MAAA,CAAA8C,KAAA;YACA,MAAAC,QAAA,GAAAF,aAAA,GAAAA,aAAA;YACA,MAAA1C,IAAA,QAAAH,MAAA,CAAAgC,KAAA,OAAAI,KAAA,IAAAY,IAAA,OAAAjB,IAAA;YACAZ,OAAA,CAAA8B,GAAA,cAAAF,QAAA;YACA5B,OAAA,CAAA8B,GAAA,UAAA9C,IAAA;YACA;;YAEA,MAAA+C,OAAA,yCAAAH,QAAA;YACA5B,OAAA,CAAA8B,GAAA,aAAAC,OAAA;YACAvD,KAAA,CAAAiB,GAAA,CAAAsC,OAAA,EACArC,IAAA,CAAAsC,QAAA;cACAhC,OAAA,CAAA8B,GAAA,cAAAE,QAAA,CAAApD,IAAA;cACA,MAAAqD,OAAA,GAAAzB,QAAA,CAAAwB,QAAA,CAAApD,IAAA;cACAoB,OAAA,CAAA8B,GAAA,cAAAG,OAAA;cACAjC,OAAA,CAAA8B,GAAA,oDAAA9C,IAAA;cAEA,MAAAkD,QAAA,OAAAC,QAAA;AACA,4CAAAnD,IAAA;AACA;AACA;cACAkD,QAAA,CAAAzD,IAAA,EAAAyB,YAAA,EAAA+B,OAAA;YACA,GACAlC,KAAA,CAAAF,KAAA;cACAG,OAAA,CAAAH,KAAA,6BAAAA,KAAA;YACA;UAEA;YACA;YACA,MAAAqC,QAAA,OAAAC,QAAA,sBACA,+BAAAtD,MAAA;AACA,2CACA;YACAqD,QAAA,CAAAzD,IAAA,EAAAyB,YAAA;UACA;QAEA;UACA,MAAAgC,QAAA,OAAAC,QAAA,yBAAAtD,MAAA;UACAqD,QAAA,CAAA3D,EAAA,EAAA2B,YAAA;QACA;MACA,SAAAL,KAAA;QACAG,OAAA,CAAAH,KAAA,YAAAA,KAAA;QACAuC,KAAA;MACA;IACA;IACAC,iBAAA;MACA,MAAAnC,YAAA,QAAAC,KAAA,CAAAC,QAAA;;MAEA;MACA,OAAAF,YAAA,CAAAG,UAAA;QACAH,YAAA,CAAAI,WAAA,CAAAJ,YAAA,CAAAG,UAAA;MACA;MAEA;QACA;QACA,MAAAiC,UAAA;UACA3D,IAAA;UACA4D,QAAA,GACA;YAAA5D,IAAA;YAAAyC,KAAA;UAAA,GACA;YACAzC,IAAA;YACA4D,QAAA,GACA;cAAA5D,IAAA;cAAAyC,KAAA;YAAA,GACA;cAAAzC,IAAA;cAAAyC,KAAA;YAAA;UAEA;QAEA;QAEA,MAAAoB,KAAA;QACA,MAAAC,MAAA,GAAAD,KAAA;;QAEA;QACA,MAAAE,KAAA,GAAAnE,EAAA,CAAAoE,YAAA,CAAApE,EAAA,CAAAqE,QAAA,CAAArE,EAAA,CAAAsE,kBAAA,EAAAP,UAAA,CAAAC,QAAA,CAAAO,MAAA;QACA,MAAAC,SAAA,GAAAxE,EAAA,CAAAwE,SAAA,CAAAT,UAAA,EAAAU,GAAA,CAAAC,CAAA,IAAAA,CAAA,CAAA7B,KAAA,EAAA8B,IAAA,EAAAC,CAAA,EAAAC,CAAA,KAAAA,CAAA,CAAAhC,KAAA,GAAA+B,CAAA,CAAA/B,KAAA;QACA,MAAAiC,IAAA,GAAA9E,EAAA,CAAA+E,SAAA,GAAAC,IAAA,MAAAC,IAAA,CAAAC,EAAA,EAAAV,SAAA,CAAAW,MAAA,OAAAX,SAAA;QACAM,IAAA,CAAAM,IAAA,CAAAV,CAAA,IAAAA,CAAA,CAAAW,OAAA,GAAAX,CAAA;QAEA,MAAAY,GAAA,GAAAtF,EAAA,CAAAsF,GAAA,GACAC,UAAA,CAAAb,CAAA,IAAAA,CAAA,CAAAc,EAAA,EACAC,QAAA,CAAAf,CAAA,IAAAA,CAAA,CAAAgB,EAAA,EACAC,QAAA,CAAAjB,CAAA,IAAAO,IAAA,CAAAW,GAAA,EAAAlB,CAAA,CAAAgB,EAAA,GAAAhB,CAAA,CAAAc,EAAA,eACAK,SAAA,CAAA3B,MAAA,QACA4B,WAAA,CAAApB,CAAA,IAAAA,CAAA,CAAAqB,EAAA,GAAA7B,MAAA,EACA8B,WAAA,CAAAtB,CAAA,IAAAO,IAAA,CAAAgB,GAAA,CAAAvB,CAAA,CAAAqB,EAAA,GAAA7B,MAAA,EAAAQ,CAAA,CAAAwB,EAAA,GAAAhC,MAAA;;QAEA;QACA,MAAAiC,GAAA,GAAAnG,EAAA,CAAAoG,MAAA,QACAC,IAAA,cAAApC,KAAA,OAAAA,KAAA,MAAAA,KAAA,EAAAA,KAAA,GACAqC,KAAA;;QAEA;QACA,MAAAC,IAAA,GAAAJ,GAAA,CAAAK,MAAA,MACAC,SAAA,SACApG,IAAA,CAAAyE,IAAA,CAAA4B,WAAA,GAAAhE,KAAA,KACAY,IAAA,SACA+C,IAAA,SAAA3B,CAAA;UACA,OAAAA,CAAA,CAAAiC,KAAA,MAAAjC,CAAA,GAAAA,CAAA,CAAAkC,MAAA;UACA,OAAAzC,KAAA,CAAAO,CAAA,CAAArE,IAAA,CAAAD,IAAA;QACA,GACAiG,IAAA,MAAA3B,CAAA,IAAAY,GAAA,CAAAZ,CAAA,CAAAW,OAAA,GACAwB,EAAA,UAAAC,OAAA;QAEAP,IAAA,CAAAC,MAAA,UACAO,IAAA,CAAArC,CAAA,OAAAA,CAAA,CAAAsC,SAAA,GAAAxE,GAAA,CAAAkC,CAAA,IAAAA,CAAA,CAAArE,IAAA,CAAAD,IAAA,EAAA6G,OAAA,GAAA3D,IAAA,UAAAoB,CAAA,CAAA7B,KAAA;;QAEA;QACA,SAAAiE,QAAAI,KAAA,EAAAC,CAAA;UACArC,IAAA,CAAAM,IAAA,CAAAV,CAAA,IAAAA,CAAA,CAAA0C,MAAA;YAAA5B,EAAA,EAAAd,CAAA,CAAAc,EAAA;YAAAE,EAAA,EAAAhB,CAAA,CAAAgB,EAAA;YAAAK,EAAA,EAAArB,CAAA,CAAAqB,EAAA;YAAAG,EAAA,EAAAxB,CAAA,CAAAwB;UAAA;UACA,MAAAmB,CAAA,GAAAlB,GAAA,CAAAmB,UAAA,GAAAC,QAAA;UACAhB,IAAA,CAAAe,UAAA,CAAAD,CAAA,EACAG,SAAA,MAAA9C,CAAA;YACA,MAAA+C,CAAA,GAAAzH,EAAA,CAAA0H,WAAA,CAAAhD,CAAA,CAAAW,OAAA,EAAAX,CAAA,CAAA0C,MAAA;YACA,OAAAC,CAAA,IAAA3C,CAAA,CAAAW,OAAA,GAAAoC,CAAA,CAAAJ,CAAA;UACA;QACA;QAEA1F,YAAA,CAAAgG,WAAA,CAAAxB,GAAA,CAAAyB,IAAA;MACA,SAAAtG,KAAA;QACAG,OAAA,CAAAH,KAAA,YAAAA,KAAA;QACAuC,KAAA;MACA;IACA;IAEAgE,aAAA;MACA,MAAAC,UAAA,QAAAlG,KAAA,CAAAC,QAAA,CAAAkG,aAAA;MAEA,KAAAD,UAAA;QACAjE,KAAA;QACA;MACA;;MAEA;MACA,MAAAmE,OAAA,OAAAC,aAAA,GAAAC,iBAAA,CAAAJ,UAAA;MACA,MAAAK,MAAA,GAAAC,QAAA,CAAAC,aAAA;MACA,MAAAC,GAAA,GAAAH,MAAA,CAAAI,UAAA;MACA,MAAAC,GAAA,OAAAC,KAAA;MAEA,MAAAC,OAAA,OAAAC,IAAA,EAAAX,OAAA;QAAAY,IAAA;MAAA;MACA,MAAAC,GAAA,GAAAC,GAAA,CAAAC,eAAA,CAAAL,OAAA;MAEAF,GAAA,CAAAQ,MAAA;QACA;QACAb,MAAA,CAAAlE,KAAA,GAAAuE,GAAA,CAAAvE,KAAA;QACAkE,MAAA,CAAAhD,MAAA,GAAAqD,GAAA,CAAArD,MAAA;;QAEA;QACAmD,GAAA,CAAAW,SAAA,CAAAT,GAAA;;QAEA;QACAL,MAAA,CAAAe,MAAA,CAAAC,IAAA;UACA,MAAAC,QAAA,OAAAC,QAAA;UACAD,QAAA,CAAA5C,MAAA,SAAA2C,IAAA;;UAEA;UACAlJ,KAAA,CAAAqJ,IAAA,MAAAC,QAAA,oBAAAH,QAAA,EACAjI,IAAA,CAAAsC,QAAA;YACA,MAAA/C,UAAA,GAAA+C,QAAA,CAAApD,IAAA,CAAAA,IAAA;YACAoB,OAAA,CAAA8B,GAAA,iBAAA7C,UAAA;YACA;YACA,MAAA8I,QAAA;cACA3I,EAAA,OAAAD,MAAA;cACA6I,OAAA;cACAhJ,IAAA,OAAAH,MAAA;cACAK,OAAA,EAAAD;YACA;YAEA,KAAAO,QAAA;cACAyI,MAAA,OAAA9I,MAAA;cACAiI,GAAA,OAAAjI,MAAA;cACAP,IAAA,EAAAmJ;YACA,GAAArI,IAAA,CAAAC,GAAA;cACA,IAAAA,GAAA,CAAAX,IAAA;gBACA,KAAAY,QAAA,CAAAsI,OAAA,MAAA/I,MAAA;cACA;gBACA,KAAAS,QAAA,CAAAC,KAAA,CAAAF,GAAA,CAAAG,GAAA;cACA;YACA,GAAAC,KAAA,CAAAF,KAAA;cACAG,OAAA,CAAAH,KAAA,MAAAV,MAAA,kCAAAU,KAAA;cACA,KAAAD,QAAA,CAAAC,KAAA;YACA;UAEA,GACAE,KAAA,CAAAF,KAAA;YACAG,OAAA,CAAAH,KAAA,YAAAA,KAAA;UACA;QACA;MACA;MAEAkH,GAAA,CAAAoB,GAAA,GAAAf,GAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}