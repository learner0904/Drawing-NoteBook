{"ast":null,"code":"import \"core-js/modules/es.regexp.flags.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport \"core-js/modules/es.array.unshift.js\";\n// FIXME profile adding a per-Tree TreeNode cache, validating it by\n// parent pointer\n/// The default maximum length of a `TreeBuffer` node (1024).\nconst DefaultBufferLength = 1024;\nlet nextPropID = 0;\nclass Range {\n  constructor(from, to) {\n    this.from = from;\n    this.to = to;\n  }\n}\n/// Each [node type](#common.NodeType) or [individual tree](#common.Tree)\n/// can have metadata associated with it in props. Instances of this\n/// class represent prop names.\nclass NodeProp {\n  /// Create a new node prop type.\n  constructor(config = {}) {\n    this.id = nextPropID++;\n    this.perNode = !!config.perNode;\n    this.deserialize = config.deserialize || (() => {\n      throw new Error(\"This node type doesn't define a deserialize function\");\n    });\n  }\n  /// This is meant to be used with\n  /// [`NodeSet.extend`](#common.NodeSet.extend) or\n  /// [`LRParser.configure`](#lr.ParserConfig.props) to compute\n  /// prop values for each node type in the set. Takes a [match\n  /// object](#common.NodeType^match) or function that returns undefined\n  /// if the node type doesn't get this prop, and the prop's value if\n  /// it does.\n  add(match) {\n    if (this.perNode) throw new RangeError(\"Can't add per-node props to node types\");\n    if (typeof match != \"function\") match = NodeType.match(match);\n    return type => {\n      let result = match(type);\n      return result === undefined ? null : [this, result];\n    };\n  }\n}\n/// Prop that is used to describe matching delimiters. For opening\n/// delimiters, this holds an array of node names (written as a\n/// space-separated string when declaring this prop in a grammar)\n/// for the node types of closing delimiters that match it.\nNodeProp.closedBy = new NodeProp({\n  deserialize: str => str.split(\" \")\n});\n/// The inverse of [`closedBy`](#common.NodeProp^closedBy). This is\n/// attached to closing delimiters, holding an array of node names\n/// of types of matching opening delimiters.\nNodeProp.openedBy = new NodeProp({\n  deserialize: str => str.split(\" \")\n});\n/// Used to assign node types to groups (for example, all node\n/// types that represent an expression could be tagged with an\n/// `\"Expression\"` group).\nNodeProp.group = new NodeProp({\n  deserialize: str => str.split(\" \")\n});\n/// The hash of the [context](#lr.ContextTracker.constructor)\n/// that the node was parsed in, if any. Used to limit reuse of\n/// contextual nodes.\nNodeProp.contextHash = new NodeProp({\n  perNode: true\n});\n/// The distance beyond the end of the node that the tokenizer\n/// looked ahead for any of the tokens inside the node. (The LR\n/// parser only stores this when it is larger than 25, for\n/// efficiency reasons.)\nNodeProp.lookAhead = new NodeProp({\n  perNode: true\n});\n/// This per-node prop is used to replace a given node, or part of a\n/// node, with another tree. This is useful to include trees from\n/// different languages.\nNodeProp.mounted = new NodeProp({\n  perNode: true\n});\n/// A mounted tree, which can be [stored](#common.NodeProp^mounted) on\n/// a tree node to indicate that parts of its content are\n/// represented by another tree.\nclass MountedTree {\n  constructor(\n  /// The inner tree.\n  tree,\n  /// If this is null, this tree replaces the entire node (it will\n  /// be included in the regular iteration instead of its host\n  /// node). If not, only the given ranges are considered to be\n  /// covered by this tree. This is used for trees that are mixed in\n  /// a way that isn't strictly hierarchical. Such mounted trees are\n  /// only entered by [`resolveInner`](#common.Tree.resolveInner)\n  /// and [`enter`](#common.SyntaxNode.enter).\n  overlay,\n  /// The parser used to create this subtree.\n  parser) {\n    this.tree = tree;\n    this.overlay = overlay;\n    this.parser = parser;\n  }\n}\nconst noProps = Object.create(null);\n/// Each node in a syntax tree has a node type associated with it.\nclass NodeType {\n  /// @internal\n  constructor(\n  /// The name of the node type. Not necessarily unique, but if the\n  /// grammar was written properly, different node types with the\n  /// same name within a node set should play the same semantic\n  /// role.\n  name,\n  /// @internal\n  props,\n  /// The id of this node in its set. Corresponds to the term ids\n  /// used in the parser.\n  id,\n  /// @internal\n  flags = 0) {\n    this.name = name;\n    this.props = props;\n    this.id = id;\n    this.flags = flags;\n  }\n  static define(spec) {\n    let props = spec.props && spec.props.length ? Object.create(null) : noProps;\n    let flags = (spec.top ? 1 /* Top */ : 0) | (spec.skipped ? 2 /* Skipped */ : 0) | (spec.error ? 4 /* Error */ : 0) | (spec.name == null ? 8 /* Anonymous */ : 0);\n    let type = new NodeType(spec.name || \"\", props, spec.id, flags);\n    if (spec.props) for (let src of spec.props) {\n      if (!Array.isArray(src)) src = src(type);\n      if (src) {\n        if (src[0].perNode) throw new RangeError(\"Can't store a per-node prop on a node type\");\n        props[src[0].id] = src[1];\n      }\n    }\n    return type;\n  }\n  /// Retrieves a node prop for this type. Will return `undefined` if\n  /// the prop isn't present on this node.\n  prop(prop) {\n    return this.props[prop.id];\n  }\n  /// True when this is the top node of a grammar.\n  get isTop() {\n    return (this.flags & 1 /* Top */) > 0;\n  }\n  /// True when this node is produced by a skip rule.\n  get isSkipped() {\n    return (this.flags & 2 /* Skipped */) > 0;\n  }\n  /// Indicates whether this is an error node.\n  get isError() {\n    return (this.flags & 4 /* Error */) > 0;\n  }\n  /// When true, this node type doesn't correspond to a user-declared\n  /// named node, for example because it is used to cache repetition.\n  get isAnonymous() {\n    return (this.flags & 8 /* Anonymous */) > 0;\n  }\n  /// Returns true when this node's name or one of its\n  /// [groups](#common.NodeProp^group) matches the given string.\n  is(name) {\n    if (typeof name == 'string') {\n      if (this.name == name) return true;\n      let group = this.prop(NodeProp.group);\n      return group ? group.indexOf(name) > -1 : false;\n    }\n    return this.id == name;\n  }\n  /// Create a function from node types to arbitrary values by\n  /// specifying an object whose property names are node or\n  /// [group](#common.NodeProp^group) names. Often useful with\n  /// [`NodeProp.add`](#common.NodeProp.add). You can put multiple\n  /// names, separated by spaces, in a single property name to map\n  /// multiple node names to a single value.\n  static match(map) {\n    let direct = Object.create(null);\n    for (let prop in map) for (let name of prop.split(\" \")) direct[name] = map[prop];\n    return node => {\n      for (let groups = node.prop(NodeProp.group), i = -1; i < (groups ? groups.length : 0); i++) {\n        let found = direct[i < 0 ? node.name : groups[i]];\n        if (found) return found;\n      }\n    };\n  }\n}\n/// An empty dummy node type to use when no actual type is available.\nNodeType.none = new NodeType(\"\", Object.create(null), 0, 8 /* Anonymous */);\n/// A node set holds a collection of node types. It is used to\n/// compactly represent trees by storing their type ids, rather than a\n/// full pointer to the type object, in a numeric array. Each parser\n/// [has](#lr.LRParser.nodeSet) a node set, and [tree\n/// buffers](#common.TreeBuffer) can only store collections of nodes\n/// from the same set. A set can have a maximum of 2**16 (65536) node\n/// types in it, so that the ids fit into 16-bit typed array slots.\nclass NodeSet {\n  /// Create a set with the given types. The `id` property of each\n  /// type should correspond to its position within the array.\n  constructor(\n  /// The node types in this set, by id.\n  types) {\n    this.types = types;\n    for (let i = 0; i < types.length; i++) if (types[i].id != i) throw new RangeError(\"Node type ids should correspond to array positions when creating a node set\");\n  }\n  /// Create a copy of this set with some node properties added. The\n  /// arguments to this method should be created with\n  /// [`NodeProp.add`](#common.NodeProp.add).\n  extend(...props) {\n    let newTypes = [];\n    for (let type of this.types) {\n      let newProps = null;\n      for (let source of props) {\n        let add = source(type);\n        if (add) {\n          if (!newProps) newProps = Object.assign({}, type.props);\n          newProps[add[0].id] = add[1];\n        }\n      }\n      newTypes.push(newProps ? new NodeType(type.name, newProps, type.id, type.flags) : type);\n    }\n    return new NodeSet(newTypes);\n  }\n}\nconst CachedNode = new WeakMap(),\n  CachedInnerNode = new WeakMap();\n/// Options that control iteration. Can be combined with the `|`\n/// operator to enable multiple ones.\nvar IterMode;\n(function (IterMode) {\n  /// When enabled, iteration will only visit [`Tree`](#common.Tree)\n  /// objects, not nodes packed into\n  /// [`TreeBuffer`](#common.TreeBuffer)s.\n  IterMode[IterMode[\"ExcludeBuffers\"] = 1] = \"ExcludeBuffers\";\n  /// Enable this to make iteration include anonymous nodes (such as\n  /// the nodes that wrap repeated grammar constructs into a balanced\n  /// tree).\n  IterMode[IterMode[\"IncludeAnonymous\"] = 2] = \"IncludeAnonymous\";\n  /// By default, regular [mounted](#common.NodeProp^mounted) nodes\n  /// replace their base node in iteration. Enable this to ignore them\n  /// instead.\n  IterMode[IterMode[\"IgnoreMounts\"] = 4] = \"IgnoreMounts\";\n  /// This option only applies in\n  /// [`enter`](#common.SyntaxNode.enter)-style methods. It tells the\n  /// library to not enter mounted overlays if one covers the given\n  /// position.\n  IterMode[IterMode[\"IgnoreOverlays\"] = 8] = \"IgnoreOverlays\";\n})(IterMode || (IterMode = {}));\n/// A piece of syntax tree. There are two ways to approach these\n/// trees: the way they are actually stored in memory, and the\n/// convenient way.\n///\n/// Syntax trees are stored as a tree of `Tree` and `TreeBuffer`\n/// objects. By packing detail information into `TreeBuffer` leaf\n/// nodes, the representation is made a lot more memory-efficient.\n///\n/// However, when you want to actually work with tree nodes, this\n/// representation is very awkward, so most client code will want to\n/// use the [`TreeCursor`](#common.TreeCursor) or\n/// [`SyntaxNode`](#common.SyntaxNode) interface instead, which provides\n/// a view on some part of this data structure, and can be used to\n/// move around to adjacent nodes.\nclass Tree {\n  /// Construct a new tree. See also [`Tree.build`](#common.Tree^build).\n  constructor(\n  /// The type of the top node.\n  type,\n  /// This node's child nodes.\n  children,\n  /// The positions (offsets relative to the start of this tree) of\n  /// the children.\n  positions,\n  /// The total length of this tree\n  length,\n  /// Per-node [node props](#common.NodeProp) to associate with this node.\n  props) {\n    this.type = type;\n    this.children = children;\n    this.positions = positions;\n    this.length = length;\n    /// @internal\n    this.props = null;\n    if (props && props.length) {\n      this.props = Object.create(null);\n      for (let [prop, value] of props) this.props[typeof prop == \"number\" ? prop : prop.id] = value;\n    }\n  }\n  /// @internal\n  toString() {\n    let mounted = this.prop(NodeProp.mounted);\n    if (mounted && !mounted.overlay) return mounted.tree.toString();\n    let children = \"\";\n    for (let ch of this.children) {\n      let str = ch.toString();\n      if (str) {\n        if (children) children += \",\";\n        children += str;\n      }\n    }\n    return !this.type.name ? children : (/\\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) + (children.length ? \"(\" + children + \")\" : \"\");\n  }\n  /// Get a [tree cursor](#common.TreeCursor) positioned at the top of\n  /// the tree. Mode can be used to [control](#common.IterMode) which\n  /// nodes the cursor visits.\n  cursor(mode = 0) {\n    return new TreeCursor(this.topNode, mode);\n  }\n  /// Get a [tree cursor](#common.TreeCursor) pointing into this tree\n  /// at the given position and side (see\n  /// [`moveTo`](#common.TreeCursor.moveTo).\n  cursorAt(pos, side = 0, mode = 0) {\n    let scope = CachedNode.get(this) || this.topNode;\n    let cursor = new TreeCursor(scope);\n    cursor.moveTo(pos, side);\n    CachedNode.set(this, cursor._tree);\n    return cursor;\n  }\n  /// Get a [syntax node](#common.SyntaxNode) object for the top of the\n  /// tree.\n  get topNode() {\n    return new TreeNode(this, 0, 0, null);\n  }\n  /// Get the [syntax node](#common.SyntaxNode) at the given position.\n  /// If `side` is -1, this will move into nodes that end at the\n  /// position. If 1, it'll move into nodes that start at the\n  /// position. With 0, it'll only enter nodes that cover the position\n  /// from both sides.\n  resolve(pos, side = 0) {\n    let node = resolveNode(CachedNode.get(this) || this.topNode, pos, side, false);\n    CachedNode.set(this, node);\n    return node;\n  }\n  /// Like [`resolve`](#common.Tree.resolve), but will enter\n  /// [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node\n  /// pointing into the innermost overlaid tree at the given position\n  /// (with parent links going through all parent structure, including\n  /// the host trees).\n  resolveInner(pos, side = 0) {\n    let node = resolveNode(CachedInnerNode.get(this) || this.topNode, pos, side, true);\n    CachedInnerNode.set(this, node);\n    return node;\n  }\n  /// Iterate over the tree and its children, calling `enter` for any\n  /// node that touches the `from`/`to` region (if given) before\n  /// running over such a node's children, and `leave` (if given) when\n  /// leaving the node. When `enter` returns `false`, that node will\n  /// not have its children iterated over (or `leave` called).\n  iterate(spec) {\n    let {\n      enter,\n      leave,\n      from = 0,\n      to = this.length\n    } = spec;\n    for (let c = this.cursor((spec.mode || 0) | IterMode.IncludeAnonymous);;) {\n      let entered = false;\n      if (c.from <= to && c.to >= from && (c.type.isAnonymous || enter(c) !== false)) {\n        if (c.firstChild()) continue;\n        entered = true;\n      }\n      for (;;) {\n        if (entered && leave && !c.type.isAnonymous) leave(c);\n        if (c.nextSibling()) break;\n        if (!c.parent()) return;\n        entered = true;\n      }\n    }\n  }\n  /// Get the value of the given [node prop](#common.NodeProp) for this\n  /// node. Works with both per-node and per-type props.\n  prop(prop) {\n    return !prop.perNode ? this.type.prop(prop) : this.props ? this.props[prop.id] : undefined;\n  }\n  /// Returns the node's [per-node props](#common.NodeProp.perNode) in a\n  /// format that can be passed to the [`Tree`](#common.Tree)\n  /// constructor.\n  get propValues() {\n    let result = [];\n    if (this.props) for (let id in this.props) result.push([+id, this.props[id]]);\n    return result;\n  }\n  /// Balance the direct children of this tree, producing a copy of\n  /// which may have children grouped into subtrees with type\n  /// [`NodeType.none`](#common.NodeType^none).\n  balance(config = {}) {\n    return this.children.length <= 8 /* BranchFactor */ ? this : balanceRange(NodeType.none, this.children, this.positions, 0, this.children.length, 0, this.length, (children, positions, length) => new Tree(this.type, children, positions, length, this.propValues), config.makeTree || ((children, positions, length) => new Tree(NodeType.none, children, positions, length)));\n  }\n  /// Build a tree from a postfix-ordered buffer of node information,\n  /// or a cursor over such a buffer.\n  static build(data) {\n    return buildTree(data);\n  }\n}\n/// The empty tree\nTree.empty = new Tree(NodeType.none, [], [], 0);\nclass FlatBufferCursor {\n  constructor(buffer, index) {\n    this.buffer = buffer;\n    this.index = index;\n  }\n  get id() {\n    return this.buffer[this.index - 4];\n  }\n  get start() {\n    return this.buffer[this.index - 3];\n  }\n  get end() {\n    return this.buffer[this.index - 2];\n  }\n  get size() {\n    return this.buffer[this.index - 1];\n  }\n  get pos() {\n    return this.index;\n  }\n  next() {\n    this.index -= 4;\n  }\n  fork() {\n    return new FlatBufferCursor(this.buffer, this.index);\n  }\n}\n/// Tree buffers contain (type, start, end, endIndex) quads for each\n/// node. In such a buffer, nodes are stored in prefix order (parents\n/// before children, with the endIndex of the parent indicating which\n/// children belong to it)\nclass TreeBuffer {\n  /// Create a tree buffer.\n  constructor(\n  /// The buffer's content.\n  buffer,\n  /// The total length of the group of nodes in the buffer.\n  length,\n  /// The node set used in this buffer.\n  set) {\n    this.buffer = buffer;\n    this.length = length;\n    this.set = set;\n  }\n  /// @internal\n  get type() {\n    return NodeType.none;\n  }\n  /// @internal\n  toString() {\n    let result = [];\n    for (let index = 0; index < this.buffer.length;) {\n      result.push(this.childString(index));\n      index = this.buffer[index + 3];\n    }\n    return result.join(\",\");\n  }\n  /// @internal\n  childString(index) {\n    let id = this.buffer[index],\n      endIndex = this.buffer[index + 3];\n    let type = this.set.types[id],\n      result = type.name;\n    if (/\\W/.test(result) && !type.isError) result = JSON.stringify(result);\n    index += 4;\n    if (endIndex == index) return result;\n    let children = [];\n    while (index < endIndex) {\n      children.push(this.childString(index));\n      index = this.buffer[index + 3];\n    }\n    return result + \"(\" + children.join(\",\") + \")\";\n  }\n  /// @internal\n  findChild(startIndex, endIndex, dir, pos, side) {\n    let {\n        buffer\n      } = this,\n      pick = -1;\n    for (let i = startIndex; i != endIndex; i = buffer[i + 3]) {\n      if (checkSide(side, pos, buffer[i + 1], buffer[i + 2])) {\n        pick = i;\n        if (dir > 0) break;\n      }\n    }\n    return pick;\n  }\n  /// @internal\n  slice(startI, endI, from, to) {\n    let b = this.buffer;\n    let copy = new Uint16Array(endI - startI);\n    for (let i = startI, j = 0; i < endI;) {\n      copy[j++] = b[i++];\n      copy[j++] = b[i++] - from;\n      copy[j++] = b[i++] - from;\n      copy[j++] = b[i++] - startI;\n    }\n    return new TreeBuffer(copy, to - from, this.set);\n  }\n}\nfunction checkSide(side, pos, from, to) {\n  switch (side) {\n    case -2 /* Before */:\n      return from < pos;\n    case -1 /* AtOrBefore */:\n      return to >= pos && from < pos;\n    case 0 /* Around */:\n      return from < pos && to > pos;\n    case 1 /* AtOrAfter */:\n      return from <= pos && to > pos;\n    case 2 /* After */:\n      return to > pos;\n    case 4 /* DontCare */:\n      return true;\n  }\n}\nfunction enterUnfinishedNodesBefore(node, pos) {\n  let scan = node.childBefore(pos);\n  while (scan) {\n    let last = scan.lastChild;\n    if (!last || last.to != scan.to) break;\n    if (last.type.isError && last.from == last.to) {\n      node = scan;\n      scan = last.prevSibling;\n    } else {\n      scan = last;\n    }\n  }\n  return node;\n}\nfunction resolveNode(node, pos, side, overlays) {\n  var _a;\n  // Move up to a node that actually holds the position, if possible\n  while (node.from == node.to || (side < 1 ? node.from >= pos : node.from > pos) || (side > -1 ? node.to <= pos : node.to < pos)) {\n    let parent = !overlays && node instanceof TreeNode && node.index < 0 ? null : node.parent;\n    if (!parent) return node;\n    node = parent;\n  }\n  let mode = overlays ? 0 : IterMode.IgnoreOverlays;\n  // Must go up out of overlays when those do not overlap with pos\n  if (overlays) for (let scan = node, parent = scan.parent; parent; scan = parent, parent = scan.parent) {\n    if (scan instanceof TreeNode && scan.index < 0 && ((_a = parent.enter(pos, side, mode)) === null || _a === void 0 ? void 0 : _a.from) != scan.from) node = parent;\n  }\n  for (;;) {\n    let inner = node.enter(pos, side, mode);\n    if (!inner) return node;\n    node = inner;\n  }\n}\nclass TreeNode {\n  constructor(_tree, from,\n  // Index in parent node, set to -1 if the node is not a direct child of _parent.node (overlay)\n  index, _parent) {\n    this._tree = _tree;\n    this.from = from;\n    this.index = index;\n    this._parent = _parent;\n  }\n  get type() {\n    return this._tree.type;\n  }\n  get name() {\n    return this._tree.type.name;\n  }\n  get to() {\n    return this.from + this._tree.length;\n  }\n  nextChild(i, dir, pos, side, mode = 0) {\n    for (let parent = this;;) {\n      for (let {\n          children,\n          positions\n        } = parent._tree, e = dir > 0 ? children.length : -1; i != e; i += dir) {\n        let next = children[i],\n          start = positions[i] + parent.from;\n        if (!checkSide(side, pos, start, start + next.length)) continue;\n        if (next instanceof TreeBuffer) {\n          if (mode & IterMode.ExcludeBuffers) continue;\n          let index = next.findChild(0, next.buffer.length, dir, pos - start, side);\n          if (index > -1) return new BufferNode(new BufferContext(parent, next, i, start), null, index);\n        } else if (mode & IterMode.IncludeAnonymous || !next.type.isAnonymous || hasChild(next)) {\n          let mounted;\n          if (!(mode & IterMode.IgnoreMounts) && next.props && (mounted = next.prop(NodeProp.mounted)) && !mounted.overlay) return new TreeNode(mounted.tree, start, i, parent);\n          let inner = new TreeNode(next, start, i, parent);\n          return mode & IterMode.IncludeAnonymous || !inner.type.isAnonymous ? inner : inner.nextChild(dir < 0 ? next.children.length - 1 : 0, dir, pos, side);\n        }\n      }\n      if (mode & IterMode.IncludeAnonymous || !parent.type.isAnonymous) return null;\n      if (parent.index >= 0) i = parent.index + dir;else i = dir < 0 ? -1 : parent._parent._tree.children.length;\n      parent = parent._parent;\n      if (!parent) return null;\n    }\n  }\n  get firstChild() {\n    return this.nextChild(0, 1, 0, 4 /* DontCare */);\n  }\n  get lastChild() {\n    return this.nextChild(this._tree.children.length - 1, -1, 0, 4 /* DontCare */);\n  }\n  childAfter(pos) {\n    return this.nextChild(0, 1, pos, 2 /* After */);\n  }\n  childBefore(pos) {\n    return this.nextChild(this._tree.children.length - 1, -1, pos, -2 /* Before */);\n  }\n  enter(pos, side, mode = 0) {\n    let mounted;\n    if (!(mode & IterMode.IgnoreOverlays) && (mounted = this._tree.prop(NodeProp.mounted)) && mounted.overlay) {\n      let rPos = pos - this.from;\n      for (let {\n        from,\n        to\n      } of mounted.overlay) {\n        if ((side > 0 ? from <= rPos : from < rPos) && (side < 0 ? to >= rPos : to > rPos)) return new TreeNode(mounted.tree, mounted.overlay[0].from + this.from, -1, this);\n      }\n    }\n    return this.nextChild(0, 1, pos, side, mode);\n  }\n  nextSignificantParent() {\n    let val = this;\n    while (val.type.isAnonymous && val._parent) val = val._parent;\n    return val;\n  }\n  get parent() {\n    return this._parent ? this._parent.nextSignificantParent() : null;\n  }\n  get nextSibling() {\n    return this._parent && this.index >= 0 ? this._parent.nextChild(this.index + 1, 1, 0, 4 /* DontCare */) : null;\n  }\n  get prevSibling() {\n    return this._parent && this.index >= 0 ? this._parent.nextChild(this.index - 1, -1, 0, 4 /* DontCare */) : null;\n  }\n  cursor(mode = 0) {\n    return new TreeCursor(this, mode);\n  }\n  get tree() {\n    return this._tree;\n  }\n  toTree() {\n    return this._tree;\n  }\n  resolve(pos, side = 0) {\n    return resolveNode(this, pos, side, false);\n  }\n  resolveInner(pos, side = 0) {\n    return resolveNode(this, pos, side, true);\n  }\n  enterUnfinishedNodesBefore(pos) {\n    return enterUnfinishedNodesBefore(this, pos);\n  }\n  getChild(type, before = null, after = null) {\n    let r = getChildren(this, type, before, after);\n    return r.length ? r[0] : null;\n  }\n  getChildren(type, before = null, after = null) {\n    return getChildren(this, type, before, after);\n  }\n  /// @internal\n  toString() {\n    return this._tree.toString();\n  }\n  get node() {\n    return this;\n  }\n  matchContext(context) {\n    return matchNodeContext(this, context);\n  }\n}\nfunction getChildren(node, type, before, after) {\n  let cur = node.cursor(),\n    result = [];\n  if (!cur.firstChild()) return result;\n  if (before != null) while (!cur.type.is(before)) if (!cur.nextSibling()) return result;\n  for (;;) {\n    if (after != null && cur.type.is(after)) return result;\n    if (cur.type.is(type)) result.push(cur.node);\n    if (!cur.nextSibling()) return after == null ? result : [];\n  }\n}\nfunction matchNodeContext(node, context, i = context.length - 1) {\n  for (let p = node.parent; i >= 0; p = p.parent) {\n    if (!p) return false;\n    if (!p.type.isAnonymous) {\n      if (context[i] && context[i] != p.name) return false;\n      i--;\n    }\n  }\n  return true;\n}\nclass BufferContext {\n  constructor(parent, buffer, index, start) {\n    this.parent = parent;\n    this.buffer = buffer;\n    this.index = index;\n    this.start = start;\n  }\n}\nclass BufferNode {\n  constructor(context, _parent, index) {\n    this.context = context;\n    this._parent = _parent;\n    this.index = index;\n    this.type = context.buffer.set.types[context.buffer.buffer[index]];\n  }\n  get name() {\n    return this.type.name;\n  }\n  get from() {\n    return this.context.start + this.context.buffer.buffer[this.index + 1];\n  }\n  get to() {\n    return this.context.start + this.context.buffer.buffer[this.index + 2];\n  }\n  child(dir, pos, side) {\n    let {\n      buffer\n    } = this.context;\n    let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.context.start, side);\n    return index < 0 ? null : new BufferNode(this.context, this, index);\n  }\n  get firstChild() {\n    return this.child(1, 0, 4 /* DontCare */);\n  }\n  get lastChild() {\n    return this.child(-1, 0, 4 /* DontCare */);\n  }\n  childAfter(pos) {\n    return this.child(1, pos, 2 /* After */);\n  }\n  childBefore(pos) {\n    return this.child(-1, pos, -2 /* Before */);\n  }\n  enter(pos, side, mode = 0) {\n    if (mode & IterMode.ExcludeBuffers) return null;\n    let {\n      buffer\n    } = this.context;\n    let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], side > 0 ? 1 : -1, pos - this.context.start, side);\n    return index < 0 ? null : new BufferNode(this.context, this, index);\n  }\n  get parent() {\n    return this._parent || this.context.parent.nextSignificantParent();\n  }\n  externalSibling(dir) {\n    return this._parent ? null : this.context.parent.nextChild(this.context.index + dir, dir, 0, 4 /* DontCare */);\n  }\n\n  get nextSibling() {\n    let {\n      buffer\n    } = this.context;\n    let after = buffer.buffer[this.index + 3];\n    if (after < (this._parent ? buffer.buffer[this._parent.index + 3] : buffer.buffer.length)) return new BufferNode(this.context, this._parent, after);\n    return this.externalSibling(1);\n  }\n  get prevSibling() {\n    let {\n      buffer\n    } = this.context;\n    let parentStart = this._parent ? this._parent.index + 4 : 0;\n    if (this.index == parentStart) return this.externalSibling(-1);\n    return new BufferNode(this.context, this._parent, buffer.findChild(parentStart, this.index, -1, 0, 4 /* DontCare */));\n  }\n\n  cursor(mode = 0) {\n    return new TreeCursor(this, mode);\n  }\n  get tree() {\n    return null;\n  }\n  toTree() {\n    let children = [],\n      positions = [];\n    let {\n      buffer\n    } = this.context;\n    let startI = this.index + 4,\n      endI = buffer.buffer[this.index + 3];\n    if (endI > startI) {\n      let from = buffer.buffer[this.index + 1],\n        to = buffer.buffer[this.index + 2];\n      children.push(buffer.slice(startI, endI, from, to));\n      positions.push(0);\n    }\n    return new Tree(this.type, children, positions, this.to - this.from);\n  }\n  resolve(pos, side = 0) {\n    return resolveNode(this, pos, side, false);\n  }\n  resolveInner(pos, side = 0) {\n    return resolveNode(this, pos, side, true);\n  }\n  enterUnfinishedNodesBefore(pos) {\n    return enterUnfinishedNodesBefore(this, pos);\n  }\n  /// @internal\n  toString() {\n    return this.context.buffer.childString(this.index);\n  }\n  getChild(type, before = null, after = null) {\n    let r = getChildren(this, type, before, after);\n    return r.length ? r[0] : null;\n  }\n  getChildren(type, before = null, after = null) {\n    return getChildren(this, type, before, after);\n  }\n  get node() {\n    return this;\n  }\n  matchContext(context) {\n    return matchNodeContext(this, context);\n  }\n}\n/// A tree cursor object focuses on a given node in a syntax tree, and\n/// allows you to move to adjacent nodes.\nclass TreeCursor {\n  /// @internal\n  constructor(node,\n  /// @internal\n  mode = 0) {\n    this.mode = mode;\n    /// @internal\n    this.buffer = null;\n    this.stack = [];\n    /// @internal\n    this.index = 0;\n    this.bufferNode = null;\n    if (node instanceof TreeNode) {\n      this.yieldNode(node);\n    } else {\n      this._tree = node.context.parent;\n      this.buffer = node.context;\n      for (let n = node._parent; n; n = n._parent) this.stack.unshift(n.index);\n      this.bufferNode = node;\n      this.yieldBuf(node.index);\n    }\n  }\n  /// Shorthand for `.type.name`.\n  get name() {\n    return this.type.name;\n  }\n  yieldNode(node) {\n    if (!node) return false;\n    this._tree = node;\n    this.type = node.type;\n    this.from = node.from;\n    this.to = node.to;\n    return true;\n  }\n  yieldBuf(index, type) {\n    this.index = index;\n    let {\n      start,\n      buffer\n    } = this.buffer;\n    this.type = type || buffer.set.types[buffer.buffer[index]];\n    this.from = start + buffer.buffer[index + 1];\n    this.to = start + buffer.buffer[index + 2];\n    return true;\n  }\n  yield(node) {\n    if (!node) return false;\n    if (node instanceof TreeNode) {\n      this.buffer = null;\n      return this.yieldNode(node);\n    }\n    this.buffer = node.context;\n    return this.yieldBuf(node.index, node.type);\n  }\n  /// @internal\n  toString() {\n    return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();\n  }\n  /// @internal\n  enterChild(dir, pos, side) {\n    if (!this.buffer) return this.yield(this._tree.nextChild(dir < 0 ? this._tree._tree.children.length - 1 : 0, dir, pos, side, this.mode));\n    let {\n      buffer\n    } = this.buffer;\n    let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.buffer.start, side);\n    if (index < 0) return false;\n    this.stack.push(this.index);\n    return this.yieldBuf(index);\n  }\n  /// Move the cursor to this node's first child. When this returns\n  /// false, the node has no child, and the cursor has not been moved.\n  firstChild() {\n    return this.enterChild(1, 0, 4 /* DontCare */);\n  }\n  /// Move the cursor to this node's last child.\n  lastChild() {\n    return this.enterChild(-1, 0, 4 /* DontCare */);\n  }\n  /// Move the cursor to the first child that ends after `pos`.\n  childAfter(pos) {\n    return this.enterChild(1, pos, 2 /* After */);\n  }\n  /// Move to the last child that starts before `pos`.\n  childBefore(pos) {\n    return this.enterChild(-1, pos, -2 /* Before */);\n  }\n  /// Move the cursor to the child around `pos`. If side is -1 the\n  /// child may end at that position, when 1 it may start there. This\n  /// will also enter [overlaid](#common.MountedTree.overlay)\n  /// [mounted](#common.NodeProp^mounted) trees unless `overlays` is\n  /// set to false.\n  enter(pos, side, mode = this.mode) {\n    if (!this.buffer) return this.yield(this._tree.enter(pos, side, mode));\n    return mode & IterMode.ExcludeBuffers ? false : this.enterChild(1, pos, side);\n  }\n  /// Move to the node's parent node, if this isn't the top node.\n  parent() {\n    if (!this.buffer) return this.yieldNode(this.mode & IterMode.IncludeAnonymous ? this._tree._parent : this._tree.parent);\n    if (this.stack.length) return this.yieldBuf(this.stack.pop());\n    let parent = this.mode & IterMode.IncludeAnonymous ? this.buffer.parent : this.buffer.parent.nextSignificantParent();\n    this.buffer = null;\n    return this.yieldNode(parent);\n  }\n  /// @internal\n  sibling(dir) {\n    if (!this.buffer) return !this._tree._parent ? false : this.yield(this._tree.index < 0 ? null : this._tree._parent.nextChild(this._tree.index + dir, dir, 0, 4 /* DontCare */, this.mode));\n    let {\n        buffer\n      } = this.buffer,\n      d = this.stack.length - 1;\n    if (dir < 0) {\n      let parentStart = d < 0 ? 0 : this.stack[d] + 4;\n      if (this.index != parentStart) return this.yieldBuf(buffer.findChild(parentStart, this.index, -1, 0, 4 /* DontCare */));\n    } else {\n      let after = buffer.buffer[this.index + 3];\n      if (after < (d < 0 ? buffer.buffer.length : buffer.buffer[this.stack[d] + 3])) return this.yieldBuf(after);\n    }\n    return d < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + dir, dir, 0, 4 /* DontCare */, this.mode)) : false;\n  }\n  /// Move to this node's next sibling, if any.\n  nextSibling() {\n    return this.sibling(1);\n  }\n  /// Move to this node's previous sibling, if any.\n  prevSibling() {\n    return this.sibling(-1);\n  }\n  atLastNode(dir) {\n    let index,\n      parent,\n      {\n        buffer\n      } = this;\n    if (buffer) {\n      if (dir > 0) {\n        if (this.index < buffer.buffer.buffer.length) return false;\n      } else {\n        for (let i = 0; i < this.index; i++) if (buffer.buffer.buffer[i + 3] < this.index) return false;\n      }\n      ({\n        index,\n        parent\n      } = buffer);\n    } else {\n      ({\n        index,\n        _parent: parent\n      } = this._tree);\n    }\n    for (; parent; ({\n      index,\n      _parent: parent\n    } = parent)) {\n      if (index > -1) for (let i = index + dir, e = dir < 0 ? -1 : parent._tree.children.length; i != e; i += dir) {\n        let child = parent._tree.children[i];\n        if (this.mode & IterMode.IncludeAnonymous || child instanceof TreeBuffer || !child.type.isAnonymous || hasChild(child)) return false;\n      }\n    }\n    return true;\n  }\n  move(dir, enter) {\n    if (enter && this.enterChild(dir, 0, 4 /* DontCare */)) return true;\n    for (;;) {\n      if (this.sibling(dir)) return true;\n      if (this.atLastNode(dir) || !this.parent()) return false;\n    }\n  }\n  /// Move to the next node in a\n  /// [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order_(NLR))\n  /// traversal, going from a node to its first child or, if the\n  /// current node is empty or `enter` is false, its next sibling or\n  /// the next sibling of the first parent node that has one.\n  next(enter = true) {\n    return this.move(1, enter);\n  }\n  /// Move to the next node in a last-to-first pre-order traveral. A\n  /// node is followed by its last child or, if it has none, its\n  /// previous sibling or the previous sibling of the first parent\n  /// node that has one.\n  prev(enter = true) {\n    return this.move(-1, enter);\n  }\n  /// Move the cursor to the innermost node that covers `pos`. If\n  /// `side` is -1, it will enter nodes that end at `pos`. If it is 1,\n  /// it will enter nodes that start at `pos`.\n  moveTo(pos, side = 0) {\n    // Move up to a node that actually holds the position, if possible\n    while (this.from == this.to || (side < 1 ? this.from >= pos : this.from > pos) || (side > -1 ? this.to <= pos : this.to < pos)) if (!this.parent()) break;\n    // Then scan down into child nodes as far as possible\n    while (this.enterChild(1, pos, side)) {}\n    return this;\n  }\n  /// Get a [syntax node](#common.SyntaxNode) at the cursor's current\n  /// position.\n  get node() {\n    if (!this.buffer) return this._tree;\n    let cache = this.bufferNode,\n      result = null,\n      depth = 0;\n    if (cache && cache.context == this.buffer) {\n      scan: for (let index = this.index, d = this.stack.length; d >= 0;) {\n        for (let c = cache; c; c = c._parent) if (c.index == index) {\n          if (index == this.index) return c;\n          result = c;\n          depth = d + 1;\n          break scan;\n        }\n        index = this.stack[--d];\n      }\n    }\n    for (let i = depth; i < this.stack.length; i++) result = new BufferNode(this.buffer, result, this.stack[i]);\n    return this.bufferNode = new BufferNode(this.buffer, result, this.index);\n  }\n  /// Get the [tree](#common.Tree) that represents the current node, if\n  /// any. Will return null when the node is in a [tree\n  /// buffer](#common.TreeBuffer).\n  get tree() {\n    return this.buffer ? null : this._tree._tree;\n  }\n  /// Iterate over the current node and all its descendants, calling\n  /// `enter` when entering a node and `leave`, if given, when leaving\n  /// one. When `enter` returns `false`, any children of that node are\n  /// skipped, and `leave` isn't called for it.\n  iterate(enter, leave) {\n    for (let depth = 0;;) {\n      let mustLeave = false;\n      if (this.type.isAnonymous || enter(this) !== false) {\n        if (this.firstChild()) {\n          depth++;\n          continue;\n        }\n        if (!this.type.isAnonymous) mustLeave = true;\n      }\n      for (;;) {\n        if (mustLeave && leave) leave(this);\n        mustLeave = this.type.isAnonymous;\n        if (this.nextSibling()) break;\n        if (!depth) return;\n        this.parent();\n        depth--;\n        mustLeave = true;\n      }\n    }\n  }\n  /// Test whether the current node matches a given context—a sequence\n  /// of direct parent node names. Empty strings in the context array\n  /// are treated as wildcards.\n  matchContext(context) {\n    if (!this.buffer) return matchNodeContext(this.node, context);\n    let {\n        buffer\n      } = this.buffer,\n      {\n        types\n      } = buffer.set;\n    for (let i = context.length - 1, d = this.stack.length - 1; i >= 0; d--) {\n      if (d < 0) return matchNodeContext(this.node, context, i);\n      let type = types[buffer.buffer[this.stack[d]]];\n      if (!type.isAnonymous) {\n        if (context[i] && context[i] != type.name) return false;\n        i--;\n      }\n    }\n    return true;\n  }\n}\nfunction hasChild(tree) {\n  return tree.children.some(ch => ch instanceof TreeBuffer || !ch.type.isAnonymous || hasChild(ch));\n}\nfunction buildTree(data) {\n  var _a;\n  let {\n    buffer,\n    nodeSet,\n    maxBufferLength = DefaultBufferLength,\n    reused = [],\n    minRepeatType = nodeSet.types.length\n  } = data;\n  let cursor = Array.isArray(buffer) ? new FlatBufferCursor(buffer, buffer.length) : buffer;\n  let types = nodeSet.types;\n  let contextHash = 0,\n    lookAhead = 0;\n  function takeNode(parentStart, minPos, children, positions, inRepeat) {\n    let {\n      id,\n      start,\n      end,\n      size\n    } = cursor;\n    let lookAheadAtStart = lookAhead;\n    while (size < 0) {\n      cursor.next();\n      if (size == -1 /* Reuse */) {\n        let node = reused[id];\n        children.push(node);\n        positions.push(start - parentStart);\n        return;\n      } else if (size == -3 /* ContextChange */) {\n        // Context change\n        contextHash = id;\n        return;\n      } else if (size == -4 /* LookAhead */) {\n        lookAhead = id;\n        return;\n      } else {\n        throw new RangeError(`Unrecognized record size: ${size}`);\n      }\n    }\n    let type = types[id],\n      node,\n      buffer;\n    let startPos = start - parentStart;\n    if (end - start <= maxBufferLength && (buffer = findBufferSize(cursor.pos - minPos, inRepeat))) {\n      // Small enough for a buffer, and no reused nodes inside\n      let data = new Uint16Array(buffer.size - buffer.skip);\n      let endPos = cursor.pos - buffer.size,\n        index = data.length;\n      while (cursor.pos > endPos) index = copyToBuffer(buffer.start, data, index);\n      node = new TreeBuffer(data, end - buffer.start, nodeSet);\n      startPos = buffer.start - parentStart;\n    } else {\n      // Make it a node\n      let endPos = cursor.pos - size;\n      cursor.next();\n      let localChildren = [],\n        localPositions = [];\n      let localInRepeat = id >= minRepeatType ? id : -1;\n      let lastGroup = 0,\n        lastEnd = end;\n      while (cursor.pos > endPos) {\n        if (localInRepeat >= 0 && cursor.id == localInRepeat && cursor.size >= 0) {\n          if (cursor.end <= lastEnd - maxBufferLength) {\n            makeRepeatLeaf(localChildren, localPositions, start, lastGroup, cursor.end, lastEnd, localInRepeat, lookAheadAtStart);\n            lastGroup = localChildren.length;\n            lastEnd = cursor.end;\n          }\n          cursor.next();\n        } else {\n          takeNode(start, endPos, localChildren, localPositions, localInRepeat);\n        }\n      }\n      if (localInRepeat >= 0 && lastGroup > 0 && lastGroup < localChildren.length) makeRepeatLeaf(localChildren, localPositions, start, lastGroup, start, lastEnd, localInRepeat, lookAheadAtStart);\n      localChildren.reverse();\n      localPositions.reverse();\n      if (localInRepeat > -1 && lastGroup > 0) {\n        let make = makeBalanced(type);\n        node = balanceRange(type, localChildren, localPositions, 0, localChildren.length, 0, end - start, make, make);\n      } else {\n        node = makeTree(type, localChildren, localPositions, end - start, lookAheadAtStart - end);\n      }\n    }\n    children.push(node);\n    positions.push(startPos);\n  }\n  function makeBalanced(type) {\n    return (children, positions, length) => {\n      let lookAhead = 0,\n        lastI = children.length - 1,\n        last,\n        lookAheadProp;\n      if (lastI >= 0 && (last = children[lastI]) instanceof Tree) {\n        if (!lastI && last.type == type && last.length == length) return last;\n        if (lookAheadProp = last.prop(NodeProp.lookAhead)) lookAhead = positions[lastI] + last.length + lookAheadProp;\n      }\n      return makeTree(type, children, positions, length, lookAhead);\n    };\n  }\n  function makeRepeatLeaf(children, positions, base, i, from, to, type, lookAhead) {\n    let localChildren = [],\n      localPositions = [];\n    while (children.length > i) {\n      localChildren.push(children.pop());\n      localPositions.push(positions.pop() + base - from);\n    }\n    children.push(makeTree(nodeSet.types[type], localChildren, localPositions, to - from, lookAhead - to));\n    positions.push(from - base);\n  }\n  function makeTree(type, children, positions, length, lookAhead = 0, props) {\n    if (contextHash) {\n      let pair = [NodeProp.contextHash, contextHash];\n      props = props ? [pair].concat(props) : [pair];\n    }\n    if (lookAhead > 25) {\n      let pair = [NodeProp.lookAhead, lookAhead];\n      props = props ? [pair].concat(props) : [pair];\n    }\n    return new Tree(type, children, positions, length, props);\n  }\n  function findBufferSize(maxSize, inRepeat) {\n    // Scan through the buffer to find previous siblings that fit\n    // together in a TreeBuffer, and don't contain any reused nodes\n    // (which can't be stored in a buffer).\n    // If `inRepeat` is > -1, ignore node boundaries of that type for\n    // nesting, but make sure the end falls either at the start\n    // (`maxSize`) or before such a node.\n    let fork = cursor.fork();\n    let size = 0,\n      start = 0,\n      skip = 0,\n      minStart = fork.end - maxBufferLength;\n    let result = {\n      size: 0,\n      start: 0,\n      skip: 0\n    };\n    scan: for (let minPos = fork.pos - maxSize; fork.pos > minPos;) {\n      let nodeSize = fork.size;\n      // Pretend nested repeat nodes of the same type don't exist\n      if (fork.id == inRepeat && nodeSize >= 0) {\n        // Except that we store the current state as a valid return\n        // value.\n        result.size = size;\n        result.start = start;\n        result.skip = skip;\n        skip += 4;\n        size += 4;\n        fork.next();\n        continue;\n      }\n      let startPos = fork.pos - nodeSize;\n      if (nodeSize < 0 || startPos < minPos || fork.start < minStart) break;\n      let localSkipped = fork.id >= minRepeatType ? 4 : 0;\n      let nodeStart = fork.start;\n      fork.next();\n      while (fork.pos > startPos) {\n        if (fork.size < 0) {\n          if (fork.size == -3 /* ContextChange */) localSkipped += 4;else break scan;\n        } else if (fork.id >= minRepeatType) {\n          localSkipped += 4;\n        }\n        fork.next();\n      }\n      start = nodeStart;\n      size += nodeSize;\n      skip += localSkipped;\n    }\n    if (inRepeat < 0 || size == maxSize) {\n      result.size = size;\n      result.start = start;\n      result.skip = skip;\n    }\n    return result.size > 4 ? result : undefined;\n  }\n  function copyToBuffer(bufferStart, buffer, index) {\n    let {\n      id,\n      start,\n      end,\n      size\n    } = cursor;\n    cursor.next();\n    if (size >= 0 && id < minRepeatType) {\n      let startIndex = index;\n      if (size > 4) {\n        let endPos = cursor.pos - (size - 4);\n        while (cursor.pos > endPos) index = copyToBuffer(bufferStart, buffer, index);\n      }\n      buffer[--index] = startIndex;\n      buffer[--index] = end - bufferStart;\n      buffer[--index] = start - bufferStart;\n      buffer[--index] = id;\n    } else if (size == -3 /* ContextChange */) {\n      contextHash = id;\n    } else if (size == -4 /* LookAhead */) {\n      lookAhead = id;\n    }\n    return index;\n  }\n  let children = [],\n    positions = [];\n  while (cursor.pos > 0) takeNode(data.start || 0, data.bufferStart || 0, children, positions, -1);\n  let length = (_a = data.length) !== null && _a !== void 0 ? _a : children.length ? positions[0] + children[0].length : 0;\n  return new Tree(types[data.topID], children.reverse(), positions.reverse(), length);\n}\nconst nodeSizeCache = new WeakMap();\nfunction nodeSize(balanceType, node) {\n  if (!balanceType.isAnonymous || node instanceof TreeBuffer || node.type != balanceType) return 1;\n  let size = nodeSizeCache.get(node);\n  if (size == null) {\n    size = 1;\n    for (let child of node.children) {\n      if (child.type != balanceType || !(child instanceof Tree)) {\n        size = 1;\n        break;\n      }\n      size += nodeSize(balanceType, child);\n    }\n    nodeSizeCache.set(node, size);\n  }\n  return size;\n}\nfunction balanceRange(\n// The type the balanced tree's inner nodes.\nbalanceType,\n// The direct children and their positions\nchildren, positions,\n// The index range in children/positions to use\nfrom, to,\n// The start position of the nodes, relative to their parent.\nstart,\n// Length of the outer node\nlength,\n// Function to build the top node of the balanced tree\nmkTop,\n// Function to build internal nodes for the balanced tree\nmkTree) {\n  let total = 0;\n  for (let i = from; i < to; i++) total += nodeSize(balanceType, children[i]);\n  let maxChild = Math.ceil(total * 1.5 / 8 /* BranchFactor */);\n  let localChildren = [],\n    localPositions = [];\n  function divide(children, positions, from, to, offset) {\n    for (let i = from; i < to;) {\n      let groupFrom = i,\n        groupStart = positions[i],\n        groupSize = nodeSize(balanceType, children[i]);\n      i++;\n      for (; i < to; i++) {\n        let nextSize = nodeSize(balanceType, children[i]);\n        if (groupSize + nextSize >= maxChild) break;\n        groupSize += nextSize;\n      }\n      if (i == groupFrom + 1) {\n        if (groupSize > maxChild) {\n          let only = children[groupFrom]; // Only trees can have a size > 1\n          divide(only.children, only.positions, 0, only.children.length, positions[groupFrom] + offset);\n          continue;\n        }\n        localChildren.push(children[groupFrom]);\n      } else {\n        let length = positions[i - 1] + children[i - 1].length - groupStart;\n        localChildren.push(balanceRange(balanceType, children, positions, groupFrom, i, groupStart, length, null, mkTree));\n      }\n      localPositions.push(groupStart + offset - start);\n    }\n  }\n  divide(children, positions, from, to, 0);\n  return (mkTop || mkTree)(localChildren, localPositions, length);\n}\n/// Provides a way to associate values with pieces of trees. As long\n/// as that part of the tree is reused, the associated values can be\n/// retrieved from an updated tree.\nclass NodeWeakMap {\n  constructor() {\n    this.map = new WeakMap();\n  }\n  setBuffer(buffer, index, value) {\n    let inner = this.map.get(buffer);\n    if (!inner) this.map.set(buffer, inner = new Map());\n    inner.set(index, value);\n  }\n  getBuffer(buffer, index) {\n    let inner = this.map.get(buffer);\n    return inner && inner.get(index);\n  }\n  /// Set the value for this syntax node.\n  set(node, value) {\n    if (node instanceof BufferNode) this.setBuffer(node.context.buffer, node.index, value);else if (node instanceof TreeNode) this.map.set(node.tree, value);\n  }\n  /// Retrieve value for this syntax node, if it exists in the map.\n  get(node) {\n    return node instanceof BufferNode ? this.getBuffer(node.context.buffer, node.index) : node instanceof TreeNode ? this.map.get(node.tree) : undefined;\n  }\n  /// Set the value for the node that a cursor currently points to.\n  cursorSet(cursor, value) {\n    if (cursor.buffer) this.setBuffer(cursor.buffer.buffer, cursor.index, value);else this.map.set(cursor.tree, value);\n  }\n  /// Retrieve the value for the node that a cursor currently points\n  /// to.\n  cursorGet(cursor) {\n    return cursor.buffer ? this.getBuffer(cursor.buffer.buffer, cursor.index) : this.map.get(cursor.tree);\n  }\n}\n\n/// Tree fragments are used during [incremental\n/// parsing](#common.Parser.startParse) to track parts of old trees\n/// that can be reused in a new parse. An array of fragments is used\n/// to track regions of an old tree whose nodes might be reused in new\n/// parses. Use the static\n/// [`applyChanges`](#common.TreeFragment^applyChanges) method to\n/// update fragments for document changes.\nclass TreeFragment {\n  /// Construct a tree fragment.\n  constructor(\n  /// The start of the unchanged range pointed to by this fragment.\n  /// This refers to an offset in the _updated_ document (as opposed\n  /// to the original tree).\n  from,\n  /// The end of the unchanged range.\n  to,\n  /// The tree that this fragment is based on.\n  tree,\n  /// The offset between the fragment's tree and the document that\n  /// this fragment can be used against. Add this when going from\n  /// document to tree positions, subtract it to go from tree to\n  /// document positions.\n  offset, openStart = false, openEnd = false) {\n    this.from = from;\n    this.to = to;\n    this.tree = tree;\n    this.offset = offset;\n    this.open = (openStart ? 1 /* Start */ : 0) | (openEnd ? 2 /* End */ : 0);\n  }\n  /// Whether the start of the fragment represents the start of a\n  /// parse, or the end of a change. (In the second case, it may not\n  /// be safe to reuse some nodes at the start, depending on the\n  /// parsing algorithm.)\n  get openStart() {\n    return (this.open & 1 /* Start */) > 0;\n  }\n  /// Whether the end of the fragment represents the end of a\n  /// full-document parse, or the start of a change.\n  get openEnd() {\n    return (this.open & 2 /* End */) > 0;\n  }\n  /// Create a set of fragments from a freshly parsed tree, or update\n  /// an existing set of fragments by replacing the ones that overlap\n  /// with a tree with content from the new tree. When `partial` is\n  /// true, the parse is treated as incomplete, and the resulting\n  /// fragment has [`openEnd`](#common.TreeFragment.openEnd) set to\n  /// true.\n  static addTree(tree, fragments = [], partial = false) {\n    let result = [new TreeFragment(0, tree.length, tree, 0, false, partial)];\n    for (let f of fragments) if (f.to > tree.length) result.push(f);\n    return result;\n  }\n  /// Apply a set of edits to an array of fragments, removing or\n  /// splitting fragments as necessary to remove edited ranges, and\n  /// adjusting offsets for fragments that moved.\n  static applyChanges(fragments, changes, minGap = 128) {\n    if (!changes.length) return fragments;\n    let result = [];\n    let fI = 1,\n      nextF = fragments.length ? fragments[0] : null;\n    for (let cI = 0, pos = 0, off = 0;; cI++) {\n      let nextC = cI < changes.length ? changes[cI] : null;\n      let nextPos = nextC ? nextC.fromA : 1e9;\n      if (nextPos - pos >= minGap) while (nextF && nextF.from < nextPos) {\n        let cut = nextF;\n        if (pos >= cut.from || nextPos <= cut.to || off) {\n          let fFrom = Math.max(cut.from, pos) - off,\n            fTo = Math.min(cut.to, nextPos) - off;\n          cut = fFrom >= fTo ? null : new TreeFragment(fFrom, fTo, cut.tree, cut.offset + off, cI > 0, !!nextC);\n        }\n        if (cut) result.push(cut);\n        if (nextF.to > nextPos) break;\n        nextF = fI < fragments.length ? fragments[fI++] : null;\n      }\n      if (!nextC) break;\n      pos = nextC.toA;\n      off = nextC.toA - nextC.toB;\n    }\n    return result;\n  }\n}\n/// A superclass that parsers should extend.\nclass Parser {\n  /// Start a parse, returning a [partial parse](#common.PartialParse)\n  /// object. [`fragments`](#common.TreeFragment) can be passed in to\n  /// make the parse incremental.\n  ///\n  /// By default, the entire input is parsed. You can pass `ranges`,\n  /// which should be a sorted array of non-empty, non-overlapping\n  /// ranges, to parse only those ranges. The tree returned in that\n  /// case will start at `ranges[0].from`.\n  startParse(input, fragments, ranges) {\n    if (typeof input == \"string\") input = new StringInput(input);\n    ranges = !ranges ? [new Range(0, input.length)] : ranges.length ? ranges.map(r => new Range(r.from, r.to)) : [new Range(0, 0)];\n    return this.createParse(input, fragments || [], ranges);\n  }\n  /// Run a full parse, returning the resulting tree.\n  parse(input, fragments, ranges) {\n    let parse = this.startParse(input, fragments, ranges);\n    for (;;) {\n      let done = parse.advance();\n      if (done) return done;\n    }\n  }\n}\nclass StringInput {\n  constructor(string) {\n    this.string = string;\n  }\n  get length() {\n    return this.string.length;\n  }\n  chunk(from) {\n    return this.string.slice(from);\n  }\n  get lineChunks() {\n    return false;\n  }\n  read(from, to) {\n    return this.string.slice(from, to);\n  }\n}\n\n/// Create a parse wrapper that, after the inner parse completes,\n/// scans its tree for mixed language regions with the `nest`\n/// function, runs the resulting [inner parses](#common.NestedParse),\n/// and then [mounts](#common.NodeProp^mounted) their results onto the\n/// tree.\n///\n/// The nesting function is passed a cursor to provide context for a\n/// node, but _should not_ move that cursor, only inspect its\n/// properties and optionally access its\n/// [node object](#common.TreeCursor.node).\nfunction parseMixed(nest) {\n  return (parse, input, fragments, ranges) => new MixedParse(parse, nest, input, fragments, ranges);\n}\nclass InnerParse {\n  constructor(parser, parse, overlay, target, ranges) {\n    this.parser = parser;\n    this.parse = parse;\n    this.overlay = overlay;\n    this.target = target;\n    this.ranges = ranges;\n  }\n}\nclass ActiveOverlay {\n  constructor(parser, predicate, mounts, index, start, target, prev) {\n    this.parser = parser;\n    this.predicate = predicate;\n    this.mounts = mounts;\n    this.index = index;\n    this.start = start;\n    this.target = target;\n    this.prev = prev;\n    this.depth = 0;\n    this.ranges = [];\n  }\n}\nconst stoppedInner = new NodeProp({\n  perNode: true\n});\nclass MixedParse {\n  constructor(base, nest, input, fragments, ranges) {\n    this.nest = nest;\n    this.input = input;\n    this.fragments = fragments;\n    this.ranges = ranges;\n    this.inner = [];\n    this.innerDone = 0;\n    this.baseTree = null;\n    this.stoppedAt = null;\n    this.baseParse = base;\n  }\n  advance() {\n    if (this.baseParse) {\n      let done = this.baseParse.advance();\n      if (!done) return null;\n      this.baseParse = null;\n      this.baseTree = done;\n      this.startInner();\n      if (this.stoppedAt != null) for (let inner of this.inner) inner.parse.stopAt(this.stoppedAt);\n    }\n    if (this.innerDone == this.inner.length) {\n      let result = this.baseTree;\n      if (this.stoppedAt != null) result = new Tree(result.type, result.children, result.positions, result.length, result.propValues.concat([[stoppedInner, this.stoppedAt]]));\n      return result;\n    }\n    let inner = this.inner[this.innerDone],\n      done = inner.parse.advance();\n    if (done) {\n      this.innerDone++;\n      // This is a somewhat dodgy but super helpful hack where we\n      // patch up nodes created by the inner parse (and thus\n      // presumably not aliased anywhere else) to hold the information\n      // about the inner parse.\n      let props = Object.assign(Object.create(null), inner.target.props);\n      props[NodeProp.mounted.id] = new MountedTree(done, inner.overlay, inner.parser);\n      inner.target.props = props;\n    }\n    return null;\n  }\n  get parsedPos() {\n    if (this.baseParse) return 0;\n    let pos = this.input.length;\n    for (let i = this.innerDone; i < this.inner.length; i++) {\n      if (this.inner[i].ranges[0].from < pos) pos = Math.min(pos, this.inner[i].parse.parsedPos);\n    }\n    return pos;\n  }\n  stopAt(pos) {\n    this.stoppedAt = pos;\n    if (this.baseParse) this.baseParse.stopAt(pos);else for (let i = this.innerDone; i < this.inner.length; i++) this.inner[i].parse.stopAt(pos);\n  }\n  startInner() {\n    let fragmentCursor = new FragmentCursor(this.fragments);\n    let overlay = null;\n    let covered = null;\n    let cursor = new TreeCursor(new TreeNode(this.baseTree, this.ranges[0].from, 0, null), IterMode.IncludeAnonymous | IterMode.IgnoreMounts);\n    scan: for (let nest, isCovered; this.stoppedAt == null || cursor.from < this.stoppedAt;) {\n      let enter = true,\n        range;\n      if (fragmentCursor.hasNode(cursor)) {\n        if (overlay) {\n          let match = overlay.mounts.find(m => m.frag.from <= cursor.from && m.frag.to >= cursor.to && m.mount.overlay);\n          if (match) for (let r of match.mount.overlay) {\n            let from = r.from + match.pos,\n              to = r.to + match.pos;\n            if (from >= cursor.from && to <= cursor.to && !overlay.ranges.some(r => r.from < to && r.to > from)) overlay.ranges.push({\n              from,\n              to\n            });\n          }\n        }\n        enter = false;\n      } else if (covered && (isCovered = checkCover(covered.ranges, cursor.from, cursor.to))) {\n        enter = isCovered != 2 /* Full */;\n      } else if (!cursor.type.isAnonymous && cursor.from < cursor.to && (nest = this.nest(cursor, this.input))) {\n        if (!cursor.tree) materialize(cursor);\n        let oldMounts = fragmentCursor.findMounts(cursor.from, nest.parser);\n        if (typeof nest.overlay == \"function\") {\n          overlay = new ActiveOverlay(nest.parser, nest.overlay, oldMounts, this.inner.length, cursor.from, cursor.tree, overlay);\n        } else {\n          let ranges = punchRanges(this.ranges, nest.overlay || [new Range(cursor.from, cursor.to)]);\n          if (ranges.length) this.inner.push(new InnerParse(nest.parser, nest.parser.startParse(this.input, enterFragments(oldMounts, ranges), ranges), nest.overlay ? nest.overlay.map(r => new Range(r.from - cursor.from, r.to - cursor.from)) : null, cursor.tree, ranges));\n          if (!nest.overlay) enter = false;else if (ranges.length) covered = {\n            ranges,\n            depth: 0,\n            prev: covered\n          };\n        }\n      } else if (overlay && (range = overlay.predicate(cursor))) {\n        if (range === true) range = new Range(cursor.from, cursor.to);\n        if (range.from < range.to) overlay.ranges.push(range);\n      }\n      if (enter && cursor.firstChild()) {\n        if (overlay) overlay.depth++;\n        if (covered) covered.depth++;\n      } else {\n        for (;;) {\n          if (cursor.nextSibling()) break;\n          if (!cursor.parent()) break scan;\n          if (overlay && ! --overlay.depth) {\n            let ranges = punchRanges(this.ranges, overlay.ranges);\n            if (ranges.length) this.inner.splice(overlay.index, 0, new InnerParse(overlay.parser, overlay.parser.startParse(this.input, enterFragments(overlay.mounts, ranges), ranges), overlay.ranges.map(r => new Range(r.from - overlay.start, r.to - overlay.start)), overlay.target, ranges));\n            overlay = overlay.prev;\n          }\n          if (covered && ! --covered.depth) covered = covered.prev;\n        }\n      }\n    }\n  }\n}\nfunction checkCover(covered, from, to) {\n  for (let range of covered) {\n    if (range.from >= to) break;\n    if (range.to > from) return range.from <= from && range.to >= to ? 2 /* Full */ : 1 /* Partial */;\n  }\n\n  return 0 /* None */;\n}\n// Take a piece of buffer and convert it into a stand-alone\n// TreeBuffer.\nfunction sliceBuf(buf, startI, endI, nodes, positions, off) {\n  if (startI < endI) {\n    let from = buf.buffer[startI + 1],\n      to = buf.buffer[endI - 2];\n    nodes.push(buf.slice(startI, endI, from, to));\n    positions.push(from - off);\n  }\n}\n// This function takes a node that's in a buffer, and converts it, and\n// its parent buffer nodes, into a Tree. This is again acting on the\n// assumption that the trees and buffers have been constructed by the\n// parse that was ran via the mix parser, and thus aren't shared with\n// any other code, making violations of the immutability safe.\nfunction materialize(cursor) {\n  let {\n      node\n    } = cursor,\n    depth = 0;\n  // Scan up to the nearest tree\n  do {\n    cursor.parent();\n    depth++;\n  } while (!cursor.tree);\n  // Find the index of the buffer in that tree\n  let i = 0,\n    base = cursor.tree,\n    off = 0;\n  for (;; i++) {\n    off = base.positions[i] + cursor.from;\n    if (off <= node.from && off + base.children[i].length >= node.to) break;\n  }\n  let buf = base.children[i],\n    b = buf.buffer;\n  // Split a level in the buffer, putting the nodes before and after\n  // the child that contains `node` into new buffers.\n  function split(startI, endI, type, innerOffset, length) {\n    let i = startI;\n    while (b[i + 2] + off <= node.from) i = b[i + 3];\n    let children = [],\n      positions = [];\n    sliceBuf(buf, startI, i, children, positions, innerOffset);\n    let from = b[i + 1],\n      to = b[i + 2];\n    let isTarget = from + off == node.from && to + off == node.to && b[i] == node.type.id;\n    children.push(isTarget ? node.toTree() : split(i + 4, b[i + 3], buf.set.types[b[i]], from, to - from));\n    positions.push(from - innerOffset);\n    sliceBuf(buf, b[i + 3], endI, children, positions, innerOffset);\n    return new Tree(type, children, positions, length);\n  }\n  base.children[i] = split(0, b.length, NodeType.none, 0, buf.length);\n  // Move the cursor back to the target node\n  for (let d = 0; d <= depth; d++) cursor.childAfter(node.from);\n}\nclass StructureCursor {\n  constructor(root, offset) {\n    this.offset = offset;\n    this.done = false;\n    this.cursor = root.cursor(IterMode.IncludeAnonymous | IterMode.IgnoreMounts);\n  }\n  // Move to the first node (in pre-order) that starts at or after `pos`.\n  moveTo(pos) {\n    let {\n        cursor\n      } = this,\n      p = pos - this.offset;\n    while (!this.done && cursor.from < p) {\n      if (cursor.to >= pos && cursor.enter(p, 1, IterMode.IgnoreOverlays | IterMode.ExcludeBuffers)) ;else if (!cursor.next(false)) this.done = true;\n    }\n  }\n  hasNode(cursor) {\n    this.moveTo(cursor.from);\n    if (!this.done && this.cursor.from + this.offset == cursor.from && this.cursor.tree) {\n      for (let tree = this.cursor.tree;;) {\n        if (tree == cursor.tree) return true;\n        if (tree.children.length && tree.positions[0] == 0 && tree.children[0] instanceof Tree) tree = tree.children[0];else break;\n      }\n    }\n    return false;\n  }\n}\nclass FragmentCursor {\n  constructor(fragments) {\n    var _a;\n    this.fragments = fragments;\n    this.curTo = 0;\n    this.fragI = 0;\n    if (fragments.length) {\n      let first = this.curFrag = fragments[0];\n      this.curTo = (_a = first.tree.prop(stoppedInner)) !== null && _a !== void 0 ? _a : first.to;\n      this.inner = new StructureCursor(first.tree, -first.offset);\n    } else {\n      this.curFrag = this.inner = null;\n    }\n  }\n  hasNode(node) {\n    while (this.curFrag && node.from >= this.curTo) this.nextFrag();\n    return this.curFrag && this.curFrag.from <= node.from && this.curTo >= node.to && this.inner.hasNode(node);\n  }\n  nextFrag() {\n    var _a;\n    this.fragI++;\n    if (this.fragI == this.fragments.length) {\n      this.curFrag = this.inner = null;\n    } else {\n      let frag = this.curFrag = this.fragments[this.fragI];\n      this.curTo = (_a = frag.tree.prop(stoppedInner)) !== null && _a !== void 0 ? _a : frag.to;\n      this.inner = new StructureCursor(frag.tree, -frag.offset);\n    }\n  }\n  findMounts(pos, parser) {\n    var _a;\n    let result = [];\n    if (this.inner) {\n      this.inner.cursor.moveTo(pos, 1);\n      for (let pos = this.inner.cursor.node; pos; pos = pos.parent) {\n        let mount = (_a = pos.tree) === null || _a === void 0 ? void 0 : _a.prop(NodeProp.mounted);\n        if (mount && mount.parser == parser) {\n          for (let i = this.fragI; i < this.fragments.length; i++) {\n            let frag = this.fragments[i];\n            if (frag.from >= pos.to) break;\n            if (frag.tree == this.curFrag.tree) result.push({\n              frag,\n              pos: pos.from - frag.offset,\n              mount\n            });\n          }\n        }\n      }\n    }\n    return result;\n  }\n}\nfunction punchRanges(outer, ranges) {\n  let copy = null,\n    current = ranges;\n  for (let i = 1, j = 0; i < outer.length; i++) {\n    let gapFrom = outer[i - 1].to,\n      gapTo = outer[i].from;\n    for (; j < current.length; j++) {\n      let r = current[j];\n      if (r.from >= gapTo) break;\n      if (r.to <= gapFrom) continue;\n      if (!copy) current = copy = ranges.slice();\n      if (r.from < gapFrom) {\n        copy[j] = new Range(r.from, gapFrom);\n        if (r.to > gapTo) copy.splice(j + 1, 0, new Range(gapTo, r.to));\n      } else if (r.to > gapTo) {\n        copy[j--] = new Range(gapTo, r.to);\n      } else {\n        copy.splice(j--, 1);\n      }\n    }\n  }\n  return current;\n}\nfunction findCoverChanges(a, b, from, to) {\n  let iA = 0,\n    iB = 0,\n    inA = false,\n    inB = false,\n    pos = -1e9;\n  let result = [];\n  for (;;) {\n    let nextA = iA == a.length ? 1e9 : inA ? a[iA].to : a[iA].from;\n    let nextB = iB == b.length ? 1e9 : inB ? b[iB].to : b[iB].from;\n    if (inA != inB) {\n      let start = Math.max(pos, from),\n        end = Math.min(nextA, nextB, to);\n      if (start < end) result.push(new Range(start, end));\n    }\n    pos = Math.min(nextA, nextB);\n    if (pos == 1e9) break;\n    if (nextA == pos) {\n      if (!inA) inA = true;else {\n        inA = false;\n        iA++;\n      }\n    }\n    if (nextB == pos) {\n      if (!inB) inB = true;else {\n        inB = false;\n        iB++;\n      }\n    }\n  }\n  return result;\n}\n// Given a number of fragments for the outer tree, and a set of ranges\n// to parse, find fragments for inner trees mounted around those\n// ranges, if any.\nfunction enterFragments(mounts, ranges) {\n  let result = [];\n  for (let {\n    pos,\n    mount,\n    frag\n  } of mounts) {\n    let startPos = pos + (mount.overlay ? mount.overlay[0].from : 0),\n      endPos = startPos + mount.tree.length;\n    let from = Math.max(frag.from, startPos),\n      to = Math.min(frag.to, endPos);\n    if (mount.overlay) {\n      let overlay = mount.overlay.map(r => new Range(r.from + pos, r.to + pos));\n      let changes = findCoverChanges(ranges, overlay, from, to);\n      for (let i = 0, pos = from;; i++) {\n        let last = i == changes.length,\n          end = last ? to : changes[i].from;\n        if (end > pos) result.push(new TreeFragment(pos, end, mount.tree, -startPos, frag.from >= pos, frag.to <= end));\n        if (last) break;\n        pos = changes[i].to;\n      }\n    } else {\n      result.push(new TreeFragment(from, to, mount.tree, -startPos, frag.from >= startPos, frag.to <= endPos));\n    }\n  }\n  return result;\n}\nexport { DefaultBufferLength, IterMode, MountedTree, NodeProp, NodeSet, NodeType, NodeWeakMap, Parser, Tree, TreeBuffer, TreeCursor, TreeFragment, parseMixed };","map":{"version":3,"names":["DefaultBufferLength","nextPropID","Range","constructor","from","to","NodeProp","config","id","perNode","deserialize","Error","add","match","RangeError","NodeType","type","result","undefined","closedBy","str","split","openedBy","group","contextHash","lookAhead","mounted","MountedTree","tree","overlay","parser","noProps","Object","create","name","props","flags","define","spec","length","top","skipped","error","src","Array","isArray","prop","isTop","isSkipped","isError","isAnonymous","is","indexOf","map","direct","node","groups","i","found","none","NodeSet","types","extend","newTypes","newProps","source","assign","push","CachedNode","WeakMap","CachedInnerNode","IterMode","Tree","children","positions","value","toString","ch","test","JSON","stringify","cursor","mode","TreeCursor","topNode","cursorAt","pos","side","scope","get","moveTo","set","_tree","TreeNode","resolve","resolveNode","resolveInner","iterate","enter","leave","c","IncludeAnonymous","entered","firstChild","nextSibling","parent","propValues","balance","balanceRange","makeTree","build","data","buildTree","empty","FlatBufferCursor","buffer","index","start","end","size","next","fork","TreeBuffer","childString","join","endIndex","findChild","startIndex","dir","pick","checkSide","slice","startI","endI","b","copy","Uint16Array","j","enterUnfinishedNodesBefore","scan","childBefore","last","lastChild","prevSibling","overlays","_a","IgnoreOverlays","inner","_parent","nextChild","e","ExcludeBuffers","BufferNode","BufferContext","hasChild","IgnoreMounts","childAfter","rPos","nextSignificantParent","val","toTree","getChild","before","after","r","getChildren","matchContext","context","matchNodeContext","cur","p","child","externalSibling","parentStart","stack","bufferNode","yieldNode","n","unshift","yieldBuf","yield","enterChild","pop","sibling","d","atLastNode","move","prev","cache","depth","mustLeave","some","nodeSet","maxBufferLength","reused","minRepeatType","takeNode","minPos","inRepeat","lookAheadAtStart","startPos","findBufferSize","skip","endPos","copyToBuffer","localChildren","localPositions","localInRepeat","lastGroup","lastEnd","makeRepeatLeaf","reverse","make","makeBalanced","lastI","lookAheadProp","base","pair","concat","maxSize","minStart","nodeSize","localSkipped","nodeStart","bufferStart","topID","nodeSizeCache","balanceType","mkTop","mkTree","total","maxChild","Math","ceil","divide","offset","groupFrom","groupStart","groupSize","nextSize","only","NodeWeakMap","setBuffer","Map","getBuffer","cursorSet","cursorGet","TreeFragment","openStart","openEnd","open","addTree","fragments","partial","f","applyChanges","changes","minGap","fI","nextF","cI","off","nextC","nextPos","fromA","cut","fFrom","max","fTo","min","toA","toB","Parser","startParse","input","ranges","StringInput","createParse","parse","done","advance","string","chunk","lineChunks","read","parseMixed","nest","MixedParse","InnerParse","target","ActiveOverlay","predicate","mounts","stoppedInner","innerDone","baseTree","stoppedAt","baseParse","startInner","stopAt","parsedPos","fragmentCursor","FragmentCursor","covered","isCovered","range","hasNode","find","m","frag","mount","checkCover","materialize","oldMounts","findMounts","punchRanges","enterFragments","splice","sliceBuf","buf","nodes","innerOffset","isTarget","StructureCursor","root","curTo","fragI","first","curFrag","nextFrag","outer","current","gapFrom","gapTo","findCoverChanges","a","iA","iB","inA","inB","nextA","nextB"],"sources":["D:/Notebooks/notebooks-web/vue/node_modules/@codemirror/commands/node_modules/@lezer/common/dist/index.js"],"sourcesContent":["// FIXME profile adding a per-Tree TreeNode cache, validating it by\n// parent pointer\n/// The default maximum length of a `TreeBuffer` node (1024).\nconst DefaultBufferLength = 1024;\nlet nextPropID = 0;\nclass Range {\n    constructor(from, to) {\n        this.from = from;\n        this.to = to;\n    }\n}\n/// Each [node type](#common.NodeType) or [individual tree](#common.Tree)\n/// can have metadata associated with it in props. Instances of this\n/// class represent prop names.\nclass NodeProp {\n    /// Create a new node prop type.\n    constructor(config = {}) {\n        this.id = nextPropID++;\n        this.perNode = !!config.perNode;\n        this.deserialize = config.deserialize || (() => {\n            throw new Error(\"This node type doesn't define a deserialize function\");\n        });\n    }\n    /// This is meant to be used with\n    /// [`NodeSet.extend`](#common.NodeSet.extend) or\n    /// [`LRParser.configure`](#lr.ParserConfig.props) to compute\n    /// prop values for each node type in the set. Takes a [match\n    /// object](#common.NodeType^match) or function that returns undefined\n    /// if the node type doesn't get this prop, and the prop's value if\n    /// it does.\n    add(match) {\n        if (this.perNode)\n            throw new RangeError(\"Can't add per-node props to node types\");\n        if (typeof match != \"function\")\n            match = NodeType.match(match);\n        return (type) => {\n            let result = match(type);\n            return result === undefined ? null : [this, result];\n        };\n    }\n}\n/// Prop that is used to describe matching delimiters. For opening\n/// delimiters, this holds an array of node names (written as a\n/// space-separated string when declaring this prop in a grammar)\n/// for the node types of closing delimiters that match it.\nNodeProp.closedBy = new NodeProp({ deserialize: str => str.split(\" \") });\n/// The inverse of [`closedBy`](#common.NodeProp^closedBy). This is\n/// attached to closing delimiters, holding an array of node names\n/// of types of matching opening delimiters.\nNodeProp.openedBy = new NodeProp({ deserialize: str => str.split(\" \") });\n/// Used to assign node types to groups (for example, all node\n/// types that represent an expression could be tagged with an\n/// `\"Expression\"` group).\nNodeProp.group = new NodeProp({ deserialize: str => str.split(\" \") });\n/// The hash of the [context](#lr.ContextTracker.constructor)\n/// that the node was parsed in, if any. Used to limit reuse of\n/// contextual nodes.\nNodeProp.contextHash = new NodeProp({ perNode: true });\n/// The distance beyond the end of the node that the tokenizer\n/// looked ahead for any of the tokens inside the node. (The LR\n/// parser only stores this when it is larger than 25, for\n/// efficiency reasons.)\nNodeProp.lookAhead = new NodeProp({ perNode: true });\n/// This per-node prop is used to replace a given node, or part of a\n/// node, with another tree. This is useful to include trees from\n/// different languages.\nNodeProp.mounted = new NodeProp({ perNode: true });\n/// A mounted tree, which can be [stored](#common.NodeProp^mounted) on\n/// a tree node to indicate that parts of its content are\n/// represented by another tree.\nclass MountedTree {\n    constructor(\n    /// The inner tree.\n    tree, \n    /// If this is null, this tree replaces the entire node (it will\n    /// be included in the regular iteration instead of its host\n    /// node). If not, only the given ranges are considered to be\n    /// covered by this tree. This is used for trees that are mixed in\n    /// a way that isn't strictly hierarchical. Such mounted trees are\n    /// only entered by [`resolveInner`](#common.Tree.resolveInner)\n    /// and [`enter`](#common.SyntaxNode.enter).\n    overlay, \n    /// The parser used to create this subtree.\n    parser) {\n        this.tree = tree;\n        this.overlay = overlay;\n        this.parser = parser;\n    }\n}\nconst noProps = Object.create(null);\n/// Each node in a syntax tree has a node type associated with it.\nclass NodeType {\n    /// @internal\n    constructor(\n    /// The name of the node type. Not necessarily unique, but if the\n    /// grammar was written properly, different node types with the\n    /// same name within a node set should play the same semantic\n    /// role.\n    name, \n    /// @internal\n    props, \n    /// The id of this node in its set. Corresponds to the term ids\n    /// used in the parser.\n    id, \n    /// @internal\n    flags = 0) {\n        this.name = name;\n        this.props = props;\n        this.id = id;\n        this.flags = flags;\n    }\n    static define(spec) {\n        let props = spec.props && spec.props.length ? Object.create(null) : noProps;\n        let flags = (spec.top ? 1 /* Top */ : 0) | (spec.skipped ? 2 /* Skipped */ : 0) |\n            (spec.error ? 4 /* Error */ : 0) | (spec.name == null ? 8 /* Anonymous */ : 0);\n        let type = new NodeType(spec.name || \"\", props, spec.id, flags);\n        if (spec.props)\n            for (let src of spec.props) {\n                if (!Array.isArray(src))\n                    src = src(type);\n                if (src) {\n                    if (src[0].perNode)\n                        throw new RangeError(\"Can't store a per-node prop on a node type\");\n                    props[src[0].id] = src[1];\n                }\n            }\n        return type;\n    }\n    /// Retrieves a node prop for this type. Will return `undefined` if\n    /// the prop isn't present on this node.\n    prop(prop) { return this.props[prop.id]; }\n    /// True when this is the top node of a grammar.\n    get isTop() { return (this.flags & 1 /* Top */) > 0; }\n    /// True when this node is produced by a skip rule.\n    get isSkipped() { return (this.flags & 2 /* Skipped */) > 0; }\n    /// Indicates whether this is an error node.\n    get isError() { return (this.flags & 4 /* Error */) > 0; }\n    /// When true, this node type doesn't correspond to a user-declared\n    /// named node, for example because it is used to cache repetition.\n    get isAnonymous() { return (this.flags & 8 /* Anonymous */) > 0; }\n    /// Returns true when this node's name or one of its\n    /// [groups](#common.NodeProp^group) matches the given string.\n    is(name) {\n        if (typeof name == 'string') {\n            if (this.name == name)\n                return true;\n            let group = this.prop(NodeProp.group);\n            return group ? group.indexOf(name) > -1 : false;\n        }\n        return this.id == name;\n    }\n    /// Create a function from node types to arbitrary values by\n    /// specifying an object whose property names are node or\n    /// [group](#common.NodeProp^group) names. Often useful with\n    /// [`NodeProp.add`](#common.NodeProp.add). You can put multiple\n    /// names, separated by spaces, in a single property name to map\n    /// multiple node names to a single value.\n    static match(map) {\n        let direct = Object.create(null);\n        for (let prop in map)\n            for (let name of prop.split(\" \"))\n                direct[name] = map[prop];\n        return (node) => {\n            for (let groups = node.prop(NodeProp.group), i = -1; i < (groups ? groups.length : 0); i++) {\n                let found = direct[i < 0 ? node.name : groups[i]];\n                if (found)\n                    return found;\n            }\n        };\n    }\n}\n/// An empty dummy node type to use when no actual type is available.\nNodeType.none = new NodeType(\"\", Object.create(null), 0, 8 /* Anonymous */);\n/// A node set holds a collection of node types. It is used to\n/// compactly represent trees by storing their type ids, rather than a\n/// full pointer to the type object, in a numeric array. Each parser\n/// [has](#lr.LRParser.nodeSet) a node set, and [tree\n/// buffers](#common.TreeBuffer) can only store collections of nodes\n/// from the same set. A set can have a maximum of 2**16 (65536) node\n/// types in it, so that the ids fit into 16-bit typed array slots.\nclass NodeSet {\n    /// Create a set with the given types. The `id` property of each\n    /// type should correspond to its position within the array.\n    constructor(\n    /// The node types in this set, by id.\n    types) {\n        this.types = types;\n        for (let i = 0; i < types.length; i++)\n            if (types[i].id != i)\n                throw new RangeError(\"Node type ids should correspond to array positions when creating a node set\");\n    }\n    /// Create a copy of this set with some node properties added. The\n    /// arguments to this method should be created with\n    /// [`NodeProp.add`](#common.NodeProp.add).\n    extend(...props) {\n        let newTypes = [];\n        for (let type of this.types) {\n            let newProps = null;\n            for (let source of props) {\n                let add = source(type);\n                if (add) {\n                    if (!newProps)\n                        newProps = Object.assign({}, type.props);\n                    newProps[add[0].id] = add[1];\n                }\n            }\n            newTypes.push(newProps ? new NodeType(type.name, newProps, type.id, type.flags) : type);\n        }\n        return new NodeSet(newTypes);\n    }\n}\nconst CachedNode = new WeakMap(), CachedInnerNode = new WeakMap();\n/// Options that control iteration. Can be combined with the `|`\n/// operator to enable multiple ones.\nvar IterMode;\n(function (IterMode) {\n    /// When enabled, iteration will only visit [`Tree`](#common.Tree)\n    /// objects, not nodes packed into\n    /// [`TreeBuffer`](#common.TreeBuffer)s.\n    IterMode[IterMode[\"ExcludeBuffers\"] = 1] = \"ExcludeBuffers\";\n    /// Enable this to make iteration include anonymous nodes (such as\n    /// the nodes that wrap repeated grammar constructs into a balanced\n    /// tree).\n    IterMode[IterMode[\"IncludeAnonymous\"] = 2] = \"IncludeAnonymous\";\n    /// By default, regular [mounted](#common.NodeProp^mounted) nodes\n    /// replace their base node in iteration. Enable this to ignore them\n    /// instead.\n    IterMode[IterMode[\"IgnoreMounts\"] = 4] = \"IgnoreMounts\";\n    /// This option only applies in\n    /// [`enter`](#common.SyntaxNode.enter)-style methods. It tells the\n    /// library to not enter mounted overlays if one covers the given\n    /// position.\n    IterMode[IterMode[\"IgnoreOverlays\"] = 8] = \"IgnoreOverlays\";\n})(IterMode || (IterMode = {}));\n/// A piece of syntax tree. There are two ways to approach these\n/// trees: the way they are actually stored in memory, and the\n/// convenient way.\n///\n/// Syntax trees are stored as a tree of `Tree` and `TreeBuffer`\n/// objects. By packing detail information into `TreeBuffer` leaf\n/// nodes, the representation is made a lot more memory-efficient.\n///\n/// However, when you want to actually work with tree nodes, this\n/// representation is very awkward, so most client code will want to\n/// use the [`TreeCursor`](#common.TreeCursor) or\n/// [`SyntaxNode`](#common.SyntaxNode) interface instead, which provides\n/// a view on some part of this data structure, and can be used to\n/// move around to adjacent nodes.\nclass Tree {\n    /// Construct a new tree. See also [`Tree.build`](#common.Tree^build).\n    constructor(\n    /// The type of the top node.\n    type, \n    /// This node's child nodes.\n    children, \n    /// The positions (offsets relative to the start of this tree) of\n    /// the children.\n    positions, \n    /// The total length of this tree\n    length, \n    /// Per-node [node props](#common.NodeProp) to associate with this node.\n    props) {\n        this.type = type;\n        this.children = children;\n        this.positions = positions;\n        this.length = length;\n        /// @internal\n        this.props = null;\n        if (props && props.length) {\n            this.props = Object.create(null);\n            for (let [prop, value] of props)\n                this.props[typeof prop == \"number\" ? prop : prop.id] = value;\n        }\n    }\n    /// @internal\n    toString() {\n        let mounted = this.prop(NodeProp.mounted);\n        if (mounted && !mounted.overlay)\n            return mounted.tree.toString();\n        let children = \"\";\n        for (let ch of this.children) {\n            let str = ch.toString();\n            if (str) {\n                if (children)\n                    children += \",\";\n                children += str;\n            }\n        }\n        return !this.type.name ? children :\n            (/\\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) +\n                (children.length ? \"(\" + children + \")\" : \"\");\n    }\n    /// Get a [tree cursor](#common.TreeCursor) positioned at the top of\n    /// the tree. Mode can be used to [control](#common.IterMode) which\n    /// nodes the cursor visits.\n    cursor(mode = 0) {\n        return new TreeCursor(this.topNode, mode);\n    }\n    /// Get a [tree cursor](#common.TreeCursor) pointing into this tree\n    /// at the given position and side (see\n    /// [`moveTo`](#common.TreeCursor.moveTo).\n    cursorAt(pos, side = 0, mode = 0) {\n        let scope = CachedNode.get(this) || this.topNode;\n        let cursor = new TreeCursor(scope);\n        cursor.moveTo(pos, side);\n        CachedNode.set(this, cursor._tree);\n        return cursor;\n    }\n    /// Get a [syntax node](#common.SyntaxNode) object for the top of the\n    /// tree.\n    get topNode() {\n        return new TreeNode(this, 0, 0, null);\n    }\n    /// Get the [syntax node](#common.SyntaxNode) at the given position.\n    /// If `side` is -1, this will move into nodes that end at the\n    /// position. If 1, it'll move into nodes that start at the\n    /// position. With 0, it'll only enter nodes that cover the position\n    /// from both sides.\n    resolve(pos, side = 0) {\n        let node = resolveNode(CachedNode.get(this) || this.topNode, pos, side, false);\n        CachedNode.set(this, node);\n        return node;\n    }\n    /// Like [`resolve`](#common.Tree.resolve), but will enter\n    /// [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node\n    /// pointing into the innermost overlaid tree at the given position\n    /// (with parent links going through all parent structure, including\n    /// the host trees).\n    resolveInner(pos, side = 0) {\n        let node = resolveNode(CachedInnerNode.get(this) || this.topNode, pos, side, true);\n        CachedInnerNode.set(this, node);\n        return node;\n    }\n    /// Iterate over the tree and its children, calling `enter` for any\n    /// node that touches the `from`/`to` region (if given) before\n    /// running over such a node's children, and `leave` (if given) when\n    /// leaving the node. When `enter` returns `false`, that node will\n    /// not have its children iterated over (or `leave` called).\n    iterate(spec) {\n        let { enter, leave, from = 0, to = this.length } = spec;\n        for (let c = this.cursor((spec.mode || 0) | IterMode.IncludeAnonymous);;) {\n            let entered = false;\n            if (c.from <= to && c.to >= from && (c.type.isAnonymous || enter(c) !== false)) {\n                if (c.firstChild())\n                    continue;\n                entered = true;\n            }\n            for (;;) {\n                if (entered && leave && !c.type.isAnonymous)\n                    leave(c);\n                if (c.nextSibling())\n                    break;\n                if (!c.parent())\n                    return;\n                entered = true;\n            }\n        }\n    }\n    /// Get the value of the given [node prop](#common.NodeProp) for this\n    /// node. Works with both per-node and per-type props.\n    prop(prop) {\n        return !prop.perNode ? this.type.prop(prop) : this.props ? this.props[prop.id] : undefined;\n    }\n    /// Returns the node's [per-node props](#common.NodeProp.perNode) in a\n    /// format that can be passed to the [`Tree`](#common.Tree)\n    /// constructor.\n    get propValues() {\n        let result = [];\n        if (this.props)\n            for (let id in this.props)\n                result.push([+id, this.props[id]]);\n        return result;\n    }\n    /// Balance the direct children of this tree, producing a copy of\n    /// which may have children grouped into subtrees with type\n    /// [`NodeType.none`](#common.NodeType^none).\n    balance(config = {}) {\n        return this.children.length <= 8 /* BranchFactor */ ? this :\n            balanceRange(NodeType.none, this.children, this.positions, 0, this.children.length, 0, this.length, (children, positions, length) => new Tree(this.type, children, positions, length, this.propValues), config.makeTree || ((children, positions, length) => new Tree(NodeType.none, children, positions, length)));\n    }\n    /// Build a tree from a postfix-ordered buffer of node information,\n    /// or a cursor over such a buffer.\n    static build(data) { return buildTree(data); }\n}\n/// The empty tree\nTree.empty = new Tree(NodeType.none, [], [], 0);\nclass FlatBufferCursor {\n    constructor(buffer, index) {\n        this.buffer = buffer;\n        this.index = index;\n    }\n    get id() { return this.buffer[this.index - 4]; }\n    get start() { return this.buffer[this.index - 3]; }\n    get end() { return this.buffer[this.index - 2]; }\n    get size() { return this.buffer[this.index - 1]; }\n    get pos() { return this.index; }\n    next() { this.index -= 4; }\n    fork() { return new FlatBufferCursor(this.buffer, this.index); }\n}\n/// Tree buffers contain (type, start, end, endIndex) quads for each\n/// node. In such a buffer, nodes are stored in prefix order (parents\n/// before children, with the endIndex of the parent indicating which\n/// children belong to it)\nclass TreeBuffer {\n    /// Create a tree buffer.\n    constructor(\n    /// The buffer's content.\n    buffer, \n    /// The total length of the group of nodes in the buffer.\n    length, \n    /// The node set used in this buffer.\n    set) {\n        this.buffer = buffer;\n        this.length = length;\n        this.set = set;\n    }\n    /// @internal\n    get type() { return NodeType.none; }\n    /// @internal\n    toString() {\n        let result = [];\n        for (let index = 0; index < this.buffer.length;) {\n            result.push(this.childString(index));\n            index = this.buffer[index + 3];\n        }\n        return result.join(\",\");\n    }\n    /// @internal\n    childString(index) {\n        let id = this.buffer[index], endIndex = this.buffer[index + 3];\n        let type = this.set.types[id], result = type.name;\n        if (/\\W/.test(result) && !type.isError)\n            result = JSON.stringify(result);\n        index += 4;\n        if (endIndex == index)\n            return result;\n        let children = [];\n        while (index < endIndex) {\n            children.push(this.childString(index));\n            index = this.buffer[index + 3];\n        }\n        return result + \"(\" + children.join(\",\") + \")\";\n    }\n    /// @internal\n    findChild(startIndex, endIndex, dir, pos, side) {\n        let { buffer } = this, pick = -1;\n        for (let i = startIndex; i != endIndex; i = buffer[i + 3]) {\n            if (checkSide(side, pos, buffer[i + 1], buffer[i + 2])) {\n                pick = i;\n                if (dir > 0)\n                    break;\n            }\n        }\n        return pick;\n    }\n    /// @internal\n    slice(startI, endI, from, to) {\n        let b = this.buffer;\n        let copy = new Uint16Array(endI - startI);\n        for (let i = startI, j = 0; i < endI;) {\n            copy[j++] = b[i++];\n            copy[j++] = b[i++] - from;\n            copy[j++] = b[i++] - from;\n            copy[j++] = b[i++] - startI;\n        }\n        return new TreeBuffer(copy, to - from, this.set);\n    }\n}\nfunction checkSide(side, pos, from, to) {\n    switch (side) {\n        case -2 /* Before */: return from < pos;\n        case -1 /* AtOrBefore */: return to >= pos && from < pos;\n        case 0 /* Around */: return from < pos && to > pos;\n        case 1 /* AtOrAfter */: return from <= pos && to > pos;\n        case 2 /* After */: return to > pos;\n        case 4 /* DontCare */: return true;\n    }\n}\nfunction enterUnfinishedNodesBefore(node, pos) {\n    let scan = node.childBefore(pos);\n    while (scan) {\n        let last = scan.lastChild;\n        if (!last || last.to != scan.to)\n            break;\n        if (last.type.isError && last.from == last.to) {\n            node = scan;\n            scan = last.prevSibling;\n        }\n        else {\n            scan = last;\n        }\n    }\n    return node;\n}\nfunction resolveNode(node, pos, side, overlays) {\n    var _a;\n    // Move up to a node that actually holds the position, if possible\n    while (node.from == node.to ||\n        (side < 1 ? node.from >= pos : node.from > pos) ||\n        (side > -1 ? node.to <= pos : node.to < pos)) {\n        let parent = !overlays && node instanceof TreeNode && node.index < 0 ? null : node.parent;\n        if (!parent)\n            return node;\n        node = parent;\n    }\n    let mode = overlays ? 0 : IterMode.IgnoreOverlays;\n    // Must go up out of overlays when those do not overlap with pos\n    if (overlays)\n        for (let scan = node, parent = scan.parent; parent; scan = parent, parent = scan.parent) {\n            if (scan instanceof TreeNode && scan.index < 0 && ((_a = parent.enter(pos, side, mode)) === null || _a === void 0 ? void 0 : _a.from) != scan.from)\n                node = parent;\n        }\n    for (;;) {\n        let inner = node.enter(pos, side, mode);\n        if (!inner)\n            return node;\n        node = inner;\n    }\n}\nclass TreeNode {\n    constructor(_tree, from, \n    // Index in parent node, set to -1 if the node is not a direct child of _parent.node (overlay)\n    index, _parent) {\n        this._tree = _tree;\n        this.from = from;\n        this.index = index;\n        this._parent = _parent;\n    }\n    get type() { return this._tree.type; }\n    get name() { return this._tree.type.name; }\n    get to() { return this.from + this._tree.length; }\n    nextChild(i, dir, pos, side, mode = 0) {\n        for (let parent = this;;) {\n            for (let { children, positions } = parent._tree, e = dir > 0 ? children.length : -1; i != e; i += dir) {\n                let next = children[i], start = positions[i] + parent.from;\n                if (!checkSide(side, pos, start, start + next.length))\n                    continue;\n                if (next instanceof TreeBuffer) {\n                    if (mode & IterMode.ExcludeBuffers)\n                        continue;\n                    let index = next.findChild(0, next.buffer.length, dir, pos - start, side);\n                    if (index > -1)\n                        return new BufferNode(new BufferContext(parent, next, i, start), null, index);\n                }\n                else if ((mode & IterMode.IncludeAnonymous) || (!next.type.isAnonymous || hasChild(next))) {\n                    let mounted;\n                    if (!(mode & IterMode.IgnoreMounts) &&\n                        next.props && (mounted = next.prop(NodeProp.mounted)) && !mounted.overlay)\n                        return new TreeNode(mounted.tree, start, i, parent);\n                    let inner = new TreeNode(next, start, i, parent);\n                    return (mode & IterMode.IncludeAnonymous) || !inner.type.isAnonymous ? inner\n                        : inner.nextChild(dir < 0 ? next.children.length - 1 : 0, dir, pos, side);\n                }\n            }\n            if ((mode & IterMode.IncludeAnonymous) || !parent.type.isAnonymous)\n                return null;\n            if (parent.index >= 0)\n                i = parent.index + dir;\n            else\n                i = dir < 0 ? -1 : parent._parent._tree.children.length;\n            parent = parent._parent;\n            if (!parent)\n                return null;\n        }\n    }\n    get firstChild() { return this.nextChild(0, 1, 0, 4 /* DontCare */); }\n    get lastChild() { return this.nextChild(this._tree.children.length - 1, -1, 0, 4 /* DontCare */); }\n    childAfter(pos) { return this.nextChild(0, 1, pos, 2 /* After */); }\n    childBefore(pos) { return this.nextChild(this._tree.children.length - 1, -1, pos, -2 /* Before */); }\n    enter(pos, side, mode = 0) {\n        let mounted;\n        if (!(mode & IterMode.IgnoreOverlays) && (mounted = this._tree.prop(NodeProp.mounted)) && mounted.overlay) {\n            let rPos = pos - this.from;\n            for (let { from, to } of mounted.overlay) {\n                if ((side > 0 ? from <= rPos : from < rPos) &&\n                    (side < 0 ? to >= rPos : to > rPos))\n                    return new TreeNode(mounted.tree, mounted.overlay[0].from + this.from, -1, this);\n            }\n        }\n        return this.nextChild(0, 1, pos, side, mode);\n    }\n    nextSignificantParent() {\n        let val = this;\n        while (val.type.isAnonymous && val._parent)\n            val = val._parent;\n        return val;\n    }\n    get parent() {\n        return this._parent ? this._parent.nextSignificantParent() : null;\n    }\n    get nextSibling() {\n        return this._parent && this.index >= 0 ? this._parent.nextChild(this.index + 1, 1, 0, 4 /* DontCare */) : null;\n    }\n    get prevSibling() {\n        return this._parent && this.index >= 0 ? this._parent.nextChild(this.index - 1, -1, 0, 4 /* DontCare */) : null;\n    }\n    cursor(mode = 0) { return new TreeCursor(this, mode); }\n    get tree() { return this._tree; }\n    toTree() { return this._tree; }\n    resolve(pos, side = 0) {\n        return resolveNode(this, pos, side, false);\n    }\n    resolveInner(pos, side = 0) {\n        return resolveNode(this, pos, side, true);\n    }\n    enterUnfinishedNodesBefore(pos) { return enterUnfinishedNodesBefore(this, pos); }\n    getChild(type, before = null, after = null) {\n        let r = getChildren(this, type, before, after);\n        return r.length ? r[0] : null;\n    }\n    getChildren(type, before = null, after = null) {\n        return getChildren(this, type, before, after);\n    }\n    /// @internal\n    toString() { return this._tree.toString(); }\n    get node() { return this; }\n    matchContext(context) { return matchNodeContext(this, context); }\n}\nfunction getChildren(node, type, before, after) {\n    let cur = node.cursor(), result = [];\n    if (!cur.firstChild())\n        return result;\n    if (before != null)\n        while (!cur.type.is(before))\n            if (!cur.nextSibling())\n                return result;\n    for (;;) {\n        if (after != null && cur.type.is(after))\n            return result;\n        if (cur.type.is(type))\n            result.push(cur.node);\n        if (!cur.nextSibling())\n            return after == null ? result : [];\n    }\n}\nfunction matchNodeContext(node, context, i = context.length - 1) {\n    for (let p = node.parent; i >= 0; p = p.parent) {\n        if (!p)\n            return false;\n        if (!p.type.isAnonymous) {\n            if (context[i] && context[i] != p.name)\n                return false;\n            i--;\n        }\n    }\n    return true;\n}\nclass BufferContext {\n    constructor(parent, buffer, index, start) {\n        this.parent = parent;\n        this.buffer = buffer;\n        this.index = index;\n        this.start = start;\n    }\n}\nclass BufferNode {\n    constructor(context, _parent, index) {\n        this.context = context;\n        this._parent = _parent;\n        this.index = index;\n        this.type = context.buffer.set.types[context.buffer.buffer[index]];\n    }\n    get name() { return this.type.name; }\n    get from() { return this.context.start + this.context.buffer.buffer[this.index + 1]; }\n    get to() { return this.context.start + this.context.buffer.buffer[this.index + 2]; }\n    child(dir, pos, side) {\n        let { buffer } = this.context;\n        let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.context.start, side);\n        return index < 0 ? null : new BufferNode(this.context, this, index);\n    }\n    get firstChild() { return this.child(1, 0, 4 /* DontCare */); }\n    get lastChild() { return this.child(-1, 0, 4 /* DontCare */); }\n    childAfter(pos) { return this.child(1, pos, 2 /* After */); }\n    childBefore(pos) { return this.child(-1, pos, -2 /* Before */); }\n    enter(pos, side, mode = 0) {\n        if (mode & IterMode.ExcludeBuffers)\n            return null;\n        let { buffer } = this.context;\n        let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], side > 0 ? 1 : -1, pos - this.context.start, side);\n        return index < 0 ? null : new BufferNode(this.context, this, index);\n    }\n    get parent() {\n        return this._parent || this.context.parent.nextSignificantParent();\n    }\n    externalSibling(dir) {\n        return this._parent ? null : this.context.parent.nextChild(this.context.index + dir, dir, 0, 4 /* DontCare */);\n    }\n    get nextSibling() {\n        let { buffer } = this.context;\n        let after = buffer.buffer[this.index + 3];\n        if (after < (this._parent ? buffer.buffer[this._parent.index + 3] : buffer.buffer.length))\n            return new BufferNode(this.context, this._parent, after);\n        return this.externalSibling(1);\n    }\n    get prevSibling() {\n        let { buffer } = this.context;\n        let parentStart = this._parent ? this._parent.index + 4 : 0;\n        if (this.index == parentStart)\n            return this.externalSibling(-1);\n        return new BufferNode(this.context, this._parent, buffer.findChild(parentStart, this.index, -1, 0, 4 /* DontCare */));\n    }\n    cursor(mode = 0) { return new TreeCursor(this, mode); }\n    get tree() { return null; }\n    toTree() {\n        let children = [], positions = [];\n        let { buffer } = this.context;\n        let startI = this.index + 4, endI = buffer.buffer[this.index + 3];\n        if (endI > startI) {\n            let from = buffer.buffer[this.index + 1], to = buffer.buffer[this.index + 2];\n            children.push(buffer.slice(startI, endI, from, to));\n            positions.push(0);\n        }\n        return new Tree(this.type, children, positions, this.to - this.from);\n    }\n    resolve(pos, side = 0) {\n        return resolveNode(this, pos, side, false);\n    }\n    resolveInner(pos, side = 0) {\n        return resolveNode(this, pos, side, true);\n    }\n    enterUnfinishedNodesBefore(pos) { return enterUnfinishedNodesBefore(this, pos); }\n    /// @internal\n    toString() { return this.context.buffer.childString(this.index); }\n    getChild(type, before = null, after = null) {\n        let r = getChildren(this, type, before, after);\n        return r.length ? r[0] : null;\n    }\n    getChildren(type, before = null, after = null) {\n        return getChildren(this, type, before, after);\n    }\n    get node() { return this; }\n    matchContext(context) { return matchNodeContext(this, context); }\n}\n/// A tree cursor object focuses on a given node in a syntax tree, and\n/// allows you to move to adjacent nodes.\nclass TreeCursor {\n    /// @internal\n    constructor(node, \n    /// @internal\n    mode = 0) {\n        this.mode = mode;\n        /// @internal\n        this.buffer = null;\n        this.stack = [];\n        /// @internal\n        this.index = 0;\n        this.bufferNode = null;\n        if (node instanceof TreeNode) {\n            this.yieldNode(node);\n        }\n        else {\n            this._tree = node.context.parent;\n            this.buffer = node.context;\n            for (let n = node._parent; n; n = n._parent)\n                this.stack.unshift(n.index);\n            this.bufferNode = node;\n            this.yieldBuf(node.index);\n        }\n    }\n    /// Shorthand for `.type.name`.\n    get name() { return this.type.name; }\n    yieldNode(node) {\n        if (!node)\n            return false;\n        this._tree = node;\n        this.type = node.type;\n        this.from = node.from;\n        this.to = node.to;\n        return true;\n    }\n    yieldBuf(index, type) {\n        this.index = index;\n        let { start, buffer } = this.buffer;\n        this.type = type || buffer.set.types[buffer.buffer[index]];\n        this.from = start + buffer.buffer[index + 1];\n        this.to = start + buffer.buffer[index + 2];\n        return true;\n    }\n    yield(node) {\n        if (!node)\n            return false;\n        if (node instanceof TreeNode) {\n            this.buffer = null;\n            return this.yieldNode(node);\n        }\n        this.buffer = node.context;\n        return this.yieldBuf(node.index, node.type);\n    }\n    /// @internal\n    toString() {\n        return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();\n    }\n    /// @internal\n    enterChild(dir, pos, side) {\n        if (!this.buffer)\n            return this.yield(this._tree.nextChild(dir < 0 ? this._tree._tree.children.length - 1 : 0, dir, pos, side, this.mode));\n        let { buffer } = this.buffer;\n        let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.buffer.start, side);\n        if (index < 0)\n            return false;\n        this.stack.push(this.index);\n        return this.yieldBuf(index);\n    }\n    /// Move the cursor to this node's first child. When this returns\n    /// false, the node has no child, and the cursor has not been moved.\n    firstChild() { return this.enterChild(1, 0, 4 /* DontCare */); }\n    /// Move the cursor to this node's last child.\n    lastChild() { return this.enterChild(-1, 0, 4 /* DontCare */); }\n    /// Move the cursor to the first child that ends after `pos`.\n    childAfter(pos) { return this.enterChild(1, pos, 2 /* After */); }\n    /// Move to the last child that starts before `pos`.\n    childBefore(pos) { return this.enterChild(-1, pos, -2 /* Before */); }\n    /// Move the cursor to the child around `pos`. If side is -1 the\n    /// child may end at that position, when 1 it may start there. This\n    /// will also enter [overlaid](#common.MountedTree.overlay)\n    /// [mounted](#common.NodeProp^mounted) trees unless `overlays` is\n    /// set to false.\n    enter(pos, side, mode = this.mode) {\n        if (!this.buffer)\n            return this.yield(this._tree.enter(pos, side, mode));\n        return mode & IterMode.ExcludeBuffers ? false : this.enterChild(1, pos, side);\n    }\n    /// Move to the node's parent node, if this isn't the top node.\n    parent() {\n        if (!this.buffer)\n            return this.yieldNode((this.mode & IterMode.IncludeAnonymous) ? this._tree._parent : this._tree.parent);\n        if (this.stack.length)\n            return this.yieldBuf(this.stack.pop());\n        let parent = (this.mode & IterMode.IncludeAnonymous) ? this.buffer.parent : this.buffer.parent.nextSignificantParent();\n        this.buffer = null;\n        return this.yieldNode(parent);\n    }\n    /// @internal\n    sibling(dir) {\n        if (!this.buffer)\n            return !this._tree._parent ? false\n                : this.yield(this._tree.index < 0 ? null\n                    : this._tree._parent.nextChild(this._tree.index + dir, dir, 0, 4 /* DontCare */, this.mode));\n        let { buffer } = this.buffer, d = this.stack.length - 1;\n        if (dir < 0) {\n            let parentStart = d < 0 ? 0 : this.stack[d] + 4;\n            if (this.index != parentStart)\n                return this.yieldBuf(buffer.findChild(parentStart, this.index, -1, 0, 4 /* DontCare */));\n        }\n        else {\n            let after = buffer.buffer[this.index + 3];\n            if (after < (d < 0 ? buffer.buffer.length : buffer.buffer[this.stack[d] + 3]))\n                return this.yieldBuf(after);\n        }\n        return d < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + dir, dir, 0, 4 /* DontCare */, this.mode)) : false;\n    }\n    /// Move to this node's next sibling, if any.\n    nextSibling() { return this.sibling(1); }\n    /// Move to this node's previous sibling, if any.\n    prevSibling() { return this.sibling(-1); }\n    atLastNode(dir) {\n        let index, parent, { buffer } = this;\n        if (buffer) {\n            if (dir > 0) {\n                if (this.index < buffer.buffer.buffer.length)\n                    return false;\n            }\n            else {\n                for (let i = 0; i < this.index; i++)\n                    if (buffer.buffer.buffer[i + 3] < this.index)\n                        return false;\n            }\n            ({ index, parent } = buffer);\n        }\n        else {\n            ({ index, _parent: parent } = this._tree);\n        }\n        for (; parent; { index, _parent: parent } = parent) {\n            if (index > -1)\n                for (let i = index + dir, e = dir < 0 ? -1 : parent._tree.children.length; i != e; i += dir) {\n                    let child = parent._tree.children[i];\n                    if ((this.mode & IterMode.IncludeAnonymous) ||\n                        child instanceof TreeBuffer ||\n                        !child.type.isAnonymous ||\n                        hasChild(child))\n                        return false;\n                }\n        }\n        return true;\n    }\n    move(dir, enter) {\n        if (enter && this.enterChild(dir, 0, 4 /* DontCare */))\n            return true;\n        for (;;) {\n            if (this.sibling(dir))\n                return true;\n            if (this.atLastNode(dir) || !this.parent())\n                return false;\n        }\n    }\n    /// Move to the next node in a\n    /// [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order_(NLR))\n    /// traversal, going from a node to its first child or, if the\n    /// current node is empty or `enter` is false, its next sibling or\n    /// the next sibling of the first parent node that has one.\n    next(enter = true) { return this.move(1, enter); }\n    /// Move to the next node in a last-to-first pre-order traveral. A\n    /// node is followed by its last child or, if it has none, its\n    /// previous sibling or the previous sibling of the first parent\n    /// node that has one.\n    prev(enter = true) { return this.move(-1, enter); }\n    /// Move the cursor to the innermost node that covers `pos`. If\n    /// `side` is -1, it will enter nodes that end at `pos`. If it is 1,\n    /// it will enter nodes that start at `pos`.\n    moveTo(pos, side = 0) {\n        // Move up to a node that actually holds the position, if possible\n        while (this.from == this.to ||\n            (side < 1 ? this.from >= pos : this.from > pos) ||\n            (side > -1 ? this.to <= pos : this.to < pos))\n            if (!this.parent())\n                break;\n        // Then scan down into child nodes as far as possible\n        while (this.enterChild(1, pos, side)) { }\n        return this;\n    }\n    /// Get a [syntax node](#common.SyntaxNode) at the cursor's current\n    /// position.\n    get node() {\n        if (!this.buffer)\n            return this._tree;\n        let cache = this.bufferNode, result = null, depth = 0;\n        if (cache && cache.context == this.buffer) {\n            scan: for (let index = this.index, d = this.stack.length; d >= 0;) {\n                for (let c = cache; c; c = c._parent)\n                    if (c.index == index) {\n                        if (index == this.index)\n                            return c;\n                        result = c;\n                        depth = d + 1;\n                        break scan;\n                    }\n                index = this.stack[--d];\n            }\n        }\n        for (let i = depth; i < this.stack.length; i++)\n            result = new BufferNode(this.buffer, result, this.stack[i]);\n        return this.bufferNode = new BufferNode(this.buffer, result, this.index);\n    }\n    /// Get the [tree](#common.Tree) that represents the current node, if\n    /// any. Will return null when the node is in a [tree\n    /// buffer](#common.TreeBuffer).\n    get tree() {\n        return this.buffer ? null : this._tree._tree;\n    }\n    /// Iterate over the current node and all its descendants, calling\n    /// `enter` when entering a node and `leave`, if given, when leaving\n    /// one. When `enter` returns `false`, any children of that node are\n    /// skipped, and `leave` isn't called for it.\n    iterate(enter, leave) {\n        for (let depth = 0;;) {\n            let mustLeave = false;\n            if (this.type.isAnonymous || enter(this) !== false) {\n                if (this.firstChild()) {\n                    depth++;\n                    continue;\n                }\n                if (!this.type.isAnonymous)\n                    mustLeave = true;\n            }\n            for (;;) {\n                if (mustLeave && leave)\n                    leave(this);\n                mustLeave = this.type.isAnonymous;\n                if (this.nextSibling())\n                    break;\n                if (!depth)\n                    return;\n                this.parent();\n                depth--;\n                mustLeave = true;\n            }\n        }\n    }\n    /// Test whether the current node matches a given context—a sequence\n    /// of direct parent node names. Empty strings in the context array\n    /// are treated as wildcards.\n    matchContext(context) {\n        if (!this.buffer)\n            return matchNodeContext(this.node, context);\n        let { buffer } = this.buffer, { types } = buffer.set;\n        for (let i = context.length - 1, d = this.stack.length - 1; i >= 0; d--) {\n            if (d < 0)\n                return matchNodeContext(this.node, context, i);\n            let type = types[buffer.buffer[this.stack[d]]];\n            if (!type.isAnonymous) {\n                if (context[i] && context[i] != type.name)\n                    return false;\n                i--;\n            }\n        }\n        return true;\n    }\n}\nfunction hasChild(tree) {\n    return tree.children.some(ch => ch instanceof TreeBuffer || !ch.type.isAnonymous || hasChild(ch));\n}\nfunction buildTree(data) {\n    var _a;\n    let { buffer, nodeSet, maxBufferLength = DefaultBufferLength, reused = [], minRepeatType = nodeSet.types.length } = data;\n    let cursor = Array.isArray(buffer) ? new FlatBufferCursor(buffer, buffer.length) : buffer;\n    let types = nodeSet.types;\n    let contextHash = 0, lookAhead = 0;\n    function takeNode(parentStart, minPos, children, positions, inRepeat) {\n        let { id, start, end, size } = cursor;\n        let lookAheadAtStart = lookAhead;\n        while (size < 0) {\n            cursor.next();\n            if (size == -1 /* Reuse */) {\n                let node = reused[id];\n                children.push(node);\n                positions.push(start - parentStart);\n                return;\n            }\n            else if (size == -3 /* ContextChange */) { // Context change\n                contextHash = id;\n                return;\n            }\n            else if (size == -4 /* LookAhead */) {\n                lookAhead = id;\n                return;\n            }\n            else {\n                throw new RangeError(`Unrecognized record size: ${size}`);\n            }\n        }\n        let type = types[id], node, buffer;\n        let startPos = start - parentStart;\n        if (end - start <= maxBufferLength && (buffer = findBufferSize(cursor.pos - minPos, inRepeat))) {\n            // Small enough for a buffer, and no reused nodes inside\n            let data = new Uint16Array(buffer.size - buffer.skip);\n            let endPos = cursor.pos - buffer.size, index = data.length;\n            while (cursor.pos > endPos)\n                index = copyToBuffer(buffer.start, data, index);\n            node = new TreeBuffer(data, end - buffer.start, nodeSet);\n            startPos = buffer.start - parentStart;\n        }\n        else { // Make it a node\n            let endPos = cursor.pos - size;\n            cursor.next();\n            let localChildren = [], localPositions = [];\n            let localInRepeat = id >= minRepeatType ? id : -1;\n            let lastGroup = 0, lastEnd = end;\n            while (cursor.pos > endPos) {\n                if (localInRepeat >= 0 && cursor.id == localInRepeat && cursor.size >= 0) {\n                    if (cursor.end <= lastEnd - maxBufferLength) {\n                        makeRepeatLeaf(localChildren, localPositions, start, lastGroup, cursor.end, lastEnd, localInRepeat, lookAheadAtStart);\n                        lastGroup = localChildren.length;\n                        lastEnd = cursor.end;\n                    }\n                    cursor.next();\n                }\n                else {\n                    takeNode(start, endPos, localChildren, localPositions, localInRepeat);\n                }\n            }\n            if (localInRepeat >= 0 && lastGroup > 0 && lastGroup < localChildren.length)\n                makeRepeatLeaf(localChildren, localPositions, start, lastGroup, start, lastEnd, localInRepeat, lookAheadAtStart);\n            localChildren.reverse();\n            localPositions.reverse();\n            if (localInRepeat > -1 && lastGroup > 0) {\n                let make = makeBalanced(type);\n                node = balanceRange(type, localChildren, localPositions, 0, localChildren.length, 0, end - start, make, make);\n            }\n            else {\n                node = makeTree(type, localChildren, localPositions, end - start, lookAheadAtStart - end);\n            }\n        }\n        children.push(node);\n        positions.push(startPos);\n    }\n    function makeBalanced(type) {\n        return (children, positions, length) => {\n            let lookAhead = 0, lastI = children.length - 1, last, lookAheadProp;\n            if (lastI >= 0 && (last = children[lastI]) instanceof Tree) {\n                if (!lastI && last.type == type && last.length == length)\n                    return last;\n                if (lookAheadProp = last.prop(NodeProp.lookAhead))\n                    lookAhead = positions[lastI] + last.length + lookAheadProp;\n            }\n            return makeTree(type, children, positions, length, lookAhead);\n        };\n    }\n    function makeRepeatLeaf(children, positions, base, i, from, to, type, lookAhead) {\n        let localChildren = [], localPositions = [];\n        while (children.length > i) {\n            localChildren.push(children.pop());\n            localPositions.push(positions.pop() + base - from);\n        }\n        children.push(makeTree(nodeSet.types[type], localChildren, localPositions, to - from, lookAhead - to));\n        positions.push(from - base);\n    }\n    function makeTree(type, children, positions, length, lookAhead = 0, props) {\n        if (contextHash) {\n            let pair = [NodeProp.contextHash, contextHash];\n            props = props ? [pair].concat(props) : [pair];\n        }\n        if (lookAhead > 25) {\n            let pair = [NodeProp.lookAhead, lookAhead];\n            props = props ? [pair].concat(props) : [pair];\n        }\n        return new Tree(type, children, positions, length, props);\n    }\n    function findBufferSize(maxSize, inRepeat) {\n        // Scan through the buffer to find previous siblings that fit\n        // together in a TreeBuffer, and don't contain any reused nodes\n        // (which can't be stored in a buffer).\n        // If `inRepeat` is > -1, ignore node boundaries of that type for\n        // nesting, but make sure the end falls either at the start\n        // (`maxSize`) or before such a node.\n        let fork = cursor.fork();\n        let size = 0, start = 0, skip = 0, minStart = fork.end - maxBufferLength;\n        let result = { size: 0, start: 0, skip: 0 };\n        scan: for (let minPos = fork.pos - maxSize; fork.pos > minPos;) {\n            let nodeSize = fork.size;\n            // Pretend nested repeat nodes of the same type don't exist\n            if (fork.id == inRepeat && nodeSize >= 0) {\n                // Except that we store the current state as a valid return\n                // value.\n                result.size = size;\n                result.start = start;\n                result.skip = skip;\n                skip += 4;\n                size += 4;\n                fork.next();\n                continue;\n            }\n            let startPos = fork.pos - nodeSize;\n            if (nodeSize < 0 || startPos < minPos || fork.start < minStart)\n                break;\n            let localSkipped = fork.id >= minRepeatType ? 4 : 0;\n            let nodeStart = fork.start;\n            fork.next();\n            while (fork.pos > startPos) {\n                if (fork.size < 0) {\n                    if (fork.size == -3 /* ContextChange */)\n                        localSkipped += 4;\n                    else\n                        break scan;\n                }\n                else if (fork.id >= minRepeatType) {\n                    localSkipped += 4;\n                }\n                fork.next();\n            }\n            start = nodeStart;\n            size += nodeSize;\n            skip += localSkipped;\n        }\n        if (inRepeat < 0 || size == maxSize) {\n            result.size = size;\n            result.start = start;\n            result.skip = skip;\n        }\n        return result.size > 4 ? result : undefined;\n    }\n    function copyToBuffer(bufferStart, buffer, index) {\n        let { id, start, end, size } = cursor;\n        cursor.next();\n        if (size >= 0 && id < minRepeatType) {\n            let startIndex = index;\n            if (size > 4) {\n                let endPos = cursor.pos - (size - 4);\n                while (cursor.pos > endPos)\n                    index = copyToBuffer(bufferStart, buffer, index);\n            }\n            buffer[--index] = startIndex;\n            buffer[--index] = end - bufferStart;\n            buffer[--index] = start - bufferStart;\n            buffer[--index] = id;\n        }\n        else if (size == -3 /* ContextChange */) {\n            contextHash = id;\n        }\n        else if (size == -4 /* LookAhead */) {\n            lookAhead = id;\n        }\n        return index;\n    }\n    let children = [], positions = [];\n    while (cursor.pos > 0)\n        takeNode(data.start || 0, data.bufferStart || 0, children, positions, -1);\n    let length = (_a = data.length) !== null && _a !== void 0 ? _a : (children.length ? positions[0] + children[0].length : 0);\n    return new Tree(types[data.topID], children.reverse(), positions.reverse(), length);\n}\nconst nodeSizeCache = new WeakMap;\nfunction nodeSize(balanceType, node) {\n    if (!balanceType.isAnonymous || node instanceof TreeBuffer || node.type != balanceType)\n        return 1;\n    let size = nodeSizeCache.get(node);\n    if (size == null) {\n        size = 1;\n        for (let child of node.children) {\n            if (child.type != balanceType || !(child instanceof Tree)) {\n                size = 1;\n                break;\n            }\n            size += nodeSize(balanceType, child);\n        }\n        nodeSizeCache.set(node, size);\n    }\n    return size;\n}\nfunction balanceRange(\n// The type the balanced tree's inner nodes.\nbalanceType, \n// The direct children and their positions\nchildren, positions, \n// The index range in children/positions to use\nfrom, to, \n// The start position of the nodes, relative to their parent.\nstart, \n// Length of the outer node\nlength, \n// Function to build the top node of the balanced tree\nmkTop, \n// Function to build internal nodes for the balanced tree\nmkTree) {\n    let total = 0;\n    for (let i = from; i < to; i++)\n        total += nodeSize(balanceType, children[i]);\n    let maxChild = Math.ceil((total * 1.5) / 8 /* BranchFactor */);\n    let localChildren = [], localPositions = [];\n    function divide(children, positions, from, to, offset) {\n        for (let i = from; i < to;) {\n            let groupFrom = i, groupStart = positions[i], groupSize = nodeSize(balanceType, children[i]);\n            i++;\n            for (; i < to; i++) {\n                let nextSize = nodeSize(balanceType, children[i]);\n                if (groupSize + nextSize >= maxChild)\n                    break;\n                groupSize += nextSize;\n            }\n            if (i == groupFrom + 1) {\n                if (groupSize > maxChild) {\n                    let only = children[groupFrom]; // Only trees can have a size > 1\n                    divide(only.children, only.positions, 0, only.children.length, positions[groupFrom] + offset);\n                    continue;\n                }\n                localChildren.push(children[groupFrom]);\n            }\n            else {\n                let length = positions[i - 1] + children[i - 1].length - groupStart;\n                localChildren.push(balanceRange(balanceType, children, positions, groupFrom, i, groupStart, length, null, mkTree));\n            }\n            localPositions.push(groupStart + offset - start);\n        }\n    }\n    divide(children, positions, from, to, 0);\n    return (mkTop || mkTree)(localChildren, localPositions, length);\n}\n/// Provides a way to associate values with pieces of trees. As long\n/// as that part of the tree is reused, the associated values can be\n/// retrieved from an updated tree.\nclass NodeWeakMap {\n    constructor() {\n        this.map = new WeakMap();\n    }\n    setBuffer(buffer, index, value) {\n        let inner = this.map.get(buffer);\n        if (!inner)\n            this.map.set(buffer, inner = new Map);\n        inner.set(index, value);\n    }\n    getBuffer(buffer, index) {\n        let inner = this.map.get(buffer);\n        return inner && inner.get(index);\n    }\n    /// Set the value for this syntax node.\n    set(node, value) {\n        if (node instanceof BufferNode)\n            this.setBuffer(node.context.buffer, node.index, value);\n        else if (node instanceof TreeNode)\n            this.map.set(node.tree, value);\n    }\n    /// Retrieve value for this syntax node, if it exists in the map.\n    get(node) {\n        return node instanceof BufferNode ? this.getBuffer(node.context.buffer, node.index)\n            : node instanceof TreeNode ? this.map.get(node.tree) : undefined;\n    }\n    /// Set the value for the node that a cursor currently points to.\n    cursorSet(cursor, value) {\n        if (cursor.buffer)\n            this.setBuffer(cursor.buffer.buffer, cursor.index, value);\n        else\n            this.map.set(cursor.tree, value);\n    }\n    /// Retrieve the value for the node that a cursor currently points\n    /// to.\n    cursorGet(cursor) {\n        return cursor.buffer ? this.getBuffer(cursor.buffer.buffer, cursor.index) : this.map.get(cursor.tree);\n    }\n}\n\n/// Tree fragments are used during [incremental\n/// parsing](#common.Parser.startParse) to track parts of old trees\n/// that can be reused in a new parse. An array of fragments is used\n/// to track regions of an old tree whose nodes might be reused in new\n/// parses. Use the static\n/// [`applyChanges`](#common.TreeFragment^applyChanges) method to\n/// update fragments for document changes.\nclass TreeFragment {\n    /// Construct a tree fragment.\n    constructor(\n    /// The start of the unchanged range pointed to by this fragment.\n    /// This refers to an offset in the _updated_ document (as opposed\n    /// to the original tree).\n    from, \n    /// The end of the unchanged range.\n    to, \n    /// The tree that this fragment is based on.\n    tree, \n    /// The offset between the fragment's tree and the document that\n    /// this fragment can be used against. Add this when going from\n    /// document to tree positions, subtract it to go from tree to\n    /// document positions.\n    offset, openStart = false, openEnd = false) {\n        this.from = from;\n        this.to = to;\n        this.tree = tree;\n        this.offset = offset;\n        this.open = (openStart ? 1 /* Start */ : 0) | (openEnd ? 2 /* End */ : 0);\n    }\n    /// Whether the start of the fragment represents the start of a\n    /// parse, or the end of a change. (In the second case, it may not\n    /// be safe to reuse some nodes at the start, depending on the\n    /// parsing algorithm.)\n    get openStart() { return (this.open & 1 /* Start */) > 0; }\n    /// Whether the end of the fragment represents the end of a\n    /// full-document parse, or the start of a change.\n    get openEnd() { return (this.open & 2 /* End */) > 0; }\n    /// Create a set of fragments from a freshly parsed tree, or update\n    /// an existing set of fragments by replacing the ones that overlap\n    /// with a tree with content from the new tree. When `partial` is\n    /// true, the parse is treated as incomplete, and the resulting\n    /// fragment has [`openEnd`](#common.TreeFragment.openEnd) set to\n    /// true.\n    static addTree(tree, fragments = [], partial = false) {\n        let result = [new TreeFragment(0, tree.length, tree, 0, false, partial)];\n        for (let f of fragments)\n            if (f.to > tree.length)\n                result.push(f);\n        return result;\n    }\n    /// Apply a set of edits to an array of fragments, removing or\n    /// splitting fragments as necessary to remove edited ranges, and\n    /// adjusting offsets for fragments that moved.\n    static applyChanges(fragments, changes, minGap = 128) {\n        if (!changes.length)\n            return fragments;\n        let result = [];\n        let fI = 1, nextF = fragments.length ? fragments[0] : null;\n        for (let cI = 0, pos = 0, off = 0;; cI++) {\n            let nextC = cI < changes.length ? changes[cI] : null;\n            let nextPos = nextC ? nextC.fromA : 1e9;\n            if (nextPos - pos >= minGap)\n                while (nextF && nextF.from < nextPos) {\n                    let cut = nextF;\n                    if (pos >= cut.from || nextPos <= cut.to || off) {\n                        let fFrom = Math.max(cut.from, pos) - off, fTo = Math.min(cut.to, nextPos) - off;\n                        cut = fFrom >= fTo ? null : new TreeFragment(fFrom, fTo, cut.tree, cut.offset + off, cI > 0, !!nextC);\n                    }\n                    if (cut)\n                        result.push(cut);\n                    if (nextF.to > nextPos)\n                        break;\n                    nextF = fI < fragments.length ? fragments[fI++] : null;\n                }\n            if (!nextC)\n                break;\n            pos = nextC.toA;\n            off = nextC.toA - nextC.toB;\n        }\n        return result;\n    }\n}\n/// A superclass that parsers should extend.\nclass Parser {\n    /// Start a parse, returning a [partial parse](#common.PartialParse)\n    /// object. [`fragments`](#common.TreeFragment) can be passed in to\n    /// make the parse incremental.\n    ///\n    /// By default, the entire input is parsed. You can pass `ranges`,\n    /// which should be a sorted array of non-empty, non-overlapping\n    /// ranges, to parse only those ranges. The tree returned in that\n    /// case will start at `ranges[0].from`.\n    startParse(input, fragments, ranges) {\n        if (typeof input == \"string\")\n            input = new StringInput(input);\n        ranges = !ranges ? [new Range(0, input.length)] : ranges.length ? ranges.map(r => new Range(r.from, r.to)) : [new Range(0, 0)];\n        return this.createParse(input, fragments || [], ranges);\n    }\n    /// Run a full parse, returning the resulting tree.\n    parse(input, fragments, ranges) {\n        let parse = this.startParse(input, fragments, ranges);\n        for (;;) {\n            let done = parse.advance();\n            if (done)\n                return done;\n        }\n    }\n}\nclass StringInput {\n    constructor(string) {\n        this.string = string;\n    }\n    get length() { return this.string.length; }\n    chunk(from) { return this.string.slice(from); }\n    get lineChunks() { return false; }\n    read(from, to) { return this.string.slice(from, to); }\n}\n\n/// Create a parse wrapper that, after the inner parse completes,\n/// scans its tree for mixed language regions with the `nest`\n/// function, runs the resulting [inner parses](#common.NestedParse),\n/// and then [mounts](#common.NodeProp^mounted) their results onto the\n/// tree.\n///\n/// The nesting function is passed a cursor to provide context for a\n/// node, but _should not_ move that cursor, only inspect its\n/// properties and optionally access its\n/// [node object](#common.TreeCursor.node).\nfunction parseMixed(nest) {\n    return (parse, input, fragments, ranges) => new MixedParse(parse, nest, input, fragments, ranges);\n}\nclass InnerParse {\n    constructor(parser, parse, overlay, target, ranges) {\n        this.parser = parser;\n        this.parse = parse;\n        this.overlay = overlay;\n        this.target = target;\n        this.ranges = ranges;\n    }\n}\nclass ActiveOverlay {\n    constructor(parser, predicate, mounts, index, start, target, prev) {\n        this.parser = parser;\n        this.predicate = predicate;\n        this.mounts = mounts;\n        this.index = index;\n        this.start = start;\n        this.target = target;\n        this.prev = prev;\n        this.depth = 0;\n        this.ranges = [];\n    }\n}\nconst stoppedInner = new NodeProp({ perNode: true });\nclass MixedParse {\n    constructor(base, nest, input, fragments, ranges) {\n        this.nest = nest;\n        this.input = input;\n        this.fragments = fragments;\n        this.ranges = ranges;\n        this.inner = [];\n        this.innerDone = 0;\n        this.baseTree = null;\n        this.stoppedAt = null;\n        this.baseParse = base;\n    }\n    advance() {\n        if (this.baseParse) {\n            let done = this.baseParse.advance();\n            if (!done)\n                return null;\n            this.baseParse = null;\n            this.baseTree = done;\n            this.startInner();\n            if (this.stoppedAt != null)\n                for (let inner of this.inner)\n                    inner.parse.stopAt(this.stoppedAt);\n        }\n        if (this.innerDone == this.inner.length) {\n            let result = this.baseTree;\n            if (this.stoppedAt != null)\n                result = new Tree(result.type, result.children, result.positions, result.length, result.propValues.concat([[stoppedInner, this.stoppedAt]]));\n            return result;\n        }\n        let inner = this.inner[this.innerDone], done = inner.parse.advance();\n        if (done) {\n            this.innerDone++;\n            // This is a somewhat dodgy but super helpful hack where we\n            // patch up nodes created by the inner parse (and thus\n            // presumably not aliased anywhere else) to hold the information\n            // about the inner parse.\n            let props = Object.assign(Object.create(null), inner.target.props);\n            props[NodeProp.mounted.id] = new MountedTree(done, inner.overlay, inner.parser);\n            inner.target.props = props;\n        }\n        return null;\n    }\n    get parsedPos() {\n        if (this.baseParse)\n            return 0;\n        let pos = this.input.length;\n        for (let i = this.innerDone; i < this.inner.length; i++) {\n            if (this.inner[i].ranges[0].from < pos)\n                pos = Math.min(pos, this.inner[i].parse.parsedPos);\n        }\n        return pos;\n    }\n    stopAt(pos) {\n        this.stoppedAt = pos;\n        if (this.baseParse)\n            this.baseParse.stopAt(pos);\n        else\n            for (let i = this.innerDone; i < this.inner.length; i++)\n                this.inner[i].parse.stopAt(pos);\n    }\n    startInner() {\n        let fragmentCursor = new FragmentCursor(this.fragments);\n        let overlay = null;\n        let covered = null;\n        let cursor = new TreeCursor(new TreeNode(this.baseTree, this.ranges[0].from, 0, null), IterMode.IncludeAnonymous | IterMode.IgnoreMounts);\n        scan: for (let nest, isCovered; this.stoppedAt == null || cursor.from < this.stoppedAt;) {\n            let enter = true, range;\n            if (fragmentCursor.hasNode(cursor)) {\n                if (overlay) {\n                    let match = overlay.mounts.find(m => m.frag.from <= cursor.from && m.frag.to >= cursor.to && m.mount.overlay);\n                    if (match)\n                        for (let r of match.mount.overlay) {\n                            let from = r.from + match.pos, to = r.to + match.pos;\n                            if (from >= cursor.from && to <= cursor.to && !overlay.ranges.some(r => r.from < to && r.to > from))\n                                overlay.ranges.push({ from, to });\n                        }\n                }\n                enter = false;\n            }\n            else if (covered && (isCovered = checkCover(covered.ranges, cursor.from, cursor.to))) {\n                enter = isCovered != 2 /* Full */;\n            }\n            else if (!cursor.type.isAnonymous && cursor.from < cursor.to && (nest = this.nest(cursor, this.input))) {\n                if (!cursor.tree)\n                    materialize(cursor);\n                let oldMounts = fragmentCursor.findMounts(cursor.from, nest.parser);\n                if (typeof nest.overlay == \"function\") {\n                    overlay = new ActiveOverlay(nest.parser, nest.overlay, oldMounts, this.inner.length, cursor.from, cursor.tree, overlay);\n                }\n                else {\n                    let ranges = punchRanges(this.ranges, nest.overlay || [new Range(cursor.from, cursor.to)]);\n                    if (ranges.length)\n                        this.inner.push(new InnerParse(nest.parser, nest.parser.startParse(this.input, enterFragments(oldMounts, ranges), ranges), nest.overlay ? nest.overlay.map(r => new Range(r.from - cursor.from, r.to - cursor.from)) : null, cursor.tree, ranges));\n                    if (!nest.overlay)\n                        enter = false;\n                    else if (ranges.length)\n                        covered = { ranges, depth: 0, prev: covered };\n                }\n            }\n            else if (overlay && (range = overlay.predicate(cursor))) {\n                if (range === true)\n                    range = new Range(cursor.from, cursor.to);\n                if (range.from < range.to)\n                    overlay.ranges.push(range);\n            }\n            if (enter && cursor.firstChild()) {\n                if (overlay)\n                    overlay.depth++;\n                if (covered)\n                    covered.depth++;\n            }\n            else {\n                for (;;) {\n                    if (cursor.nextSibling())\n                        break;\n                    if (!cursor.parent())\n                        break scan;\n                    if (overlay && !--overlay.depth) {\n                        let ranges = punchRanges(this.ranges, overlay.ranges);\n                        if (ranges.length)\n                            this.inner.splice(overlay.index, 0, new InnerParse(overlay.parser, overlay.parser.startParse(this.input, enterFragments(overlay.mounts, ranges), ranges), overlay.ranges.map(r => new Range(r.from - overlay.start, r.to - overlay.start)), overlay.target, ranges));\n                        overlay = overlay.prev;\n                    }\n                    if (covered && !--covered.depth)\n                        covered = covered.prev;\n                }\n            }\n        }\n    }\n}\nfunction checkCover(covered, from, to) {\n    for (let range of covered) {\n        if (range.from >= to)\n            break;\n        if (range.to > from)\n            return range.from <= from && range.to >= to ? 2 /* Full */ : 1 /* Partial */;\n    }\n    return 0 /* None */;\n}\n// Take a piece of buffer and convert it into a stand-alone\n// TreeBuffer.\nfunction sliceBuf(buf, startI, endI, nodes, positions, off) {\n    if (startI < endI) {\n        let from = buf.buffer[startI + 1], to = buf.buffer[endI - 2];\n        nodes.push(buf.slice(startI, endI, from, to));\n        positions.push(from - off);\n    }\n}\n// This function takes a node that's in a buffer, and converts it, and\n// its parent buffer nodes, into a Tree. This is again acting on the\n// assumption that the trees and buffers have been constructed by the\n// parse that was ran via the mix parser, and thus aren't shared with\n// any other code, making violations of the immutability safe.\nfunction materialize(cursor) {\n    let { node } = cursor, depth = 0;\n    // Scan up to the nearest tree\n    do {\n        cursor.parent();\n        depth++;\n    } while (!cursor.tree);\n    // Find the index of the buffer in that tree\n    let i = 0, base = cursor.tree, off = 0;\n    for (;; i++) {\n        off = base.positions[i] + cursor.from;\n        if (off <= node.from && off + base.children[i].length >= node.to)\n            break;\n    }\n    let buf = base.children[i], b = buf.buffer;\n    // Split a level in the buffer, putting the nodes before and after\n    // the child that contains `node` into new buffers.\n    function split(startI, endI, type, innerOffset, length) {\n        let i = startI;\n        while (b[i + 2] + off <= node.from)\n            i = b[i + 3];\n        let children = [], positions = [];\n        sliceBuf(buf, startI, i, children, positions, innerOffset);\n        let from = b[i + 1], to = b[i + 2];\n        let isTarget = from + off == node.from && to + off == node.to && b[i] == node.type.id;\n        children.push(isTarget ? node.toTree() : split(i + 4, b[i + 3], buf.set.types[b[i]], from, to - from));\n        positions.push(from - innerOffset);\n        sliceBuf(buf, b[i + 3], endI, children, positions, innerOffset);\n        return new Tree(type, children, positions, length);\n    }\n    base.children[i] = split(0, b.length, NodeType.none, 0, buf.length);\n    // Move the cursor back to the target node\n    for (let d = 0; d <= depth; d++)\n        cursor.childAfter(node.from);\n}\nclass StructureCursor {\n    constructor(root, offset) {\n        this.offset = offset;\n        this.done = false;\n        this.cursor = root.cursor(IterMode.IncludeAnonymous | IterMode.IgnoreMounts);\n    }\n    // Move to the first node (in pre-order) that starts at or after `pos`.\n    moveTo(pos) {\n        let { cursor } = this, p = pos - this.offset;\n        while (!this.done && cursor.from < p) {\n            if (cursor.to >= pos && cursor.enter(p, 1, IterMode.IgnoreOverlays | IterMode.ExcludeBuffers)) ;\n            else if (!cursor.next(false))\n                this.done = true;\n        }\n    }\n    hasNode(cursor) {\n        this.moveTo(cursor.from);\n        if (!this.done && this.cursor.from + this.offset == cursor.from && this.cursor.tree) {\n            for (let tree = this.cursor.tree;;) {\n                if (tree == cursor.tree)\n                    return true;\n                if (tree.children.length && tree.positions[0] == 0 && tree.children[0] instanceof Tree)\n                    tree = tree.children[0];\n                else\n                    break;\n            }\n        }\n        return false;\n    }\n}\nclass FragmentCursor {\n    constructor(fragments) {\n        var _a;\n        this.fragments = fragments;\n        this.curTo = 0;\n        this.fragI = 0;\n        if (fragments.length) {\n            let first = this.curFrag = fragments[0];\n            this.curTo = (_a = first.tree.prop(stoppedInner)) !== null && _a !== void 0 ? _a : first.to;\n            this.inner = new StructureCursor(first.tree, -first.offset);\n        }\n        else {\n            this.curFrag = this.inner = null;\n        }\n    }\n    hasNode(node) {\n        while (this.curFrag && node.from >= this.curTo)\n            this.nextFrag();\n        return this.curFrag && this.curFrag.from <= node.from && this.curTo >= node.to && this.inner.hasNode(node);\n    }\n    nextFrag() {\n        var _a;\n        this.fragI++;\n        if (this.fragI == this.fragments.length) {\n            this.curFrag = this.inner = null;\n        }\n        else {\n            let frag = this.curFrag = this.fragments[this.fragI];\n            this.curTo = (_a = frag.tree.prop(stoppedInner)) !== null && _a !== void 0 ? _a : frag.to;\n            this.inner = new StructureCursor(frag.tree, -frag.offset);\n        }\n    }\n    findMounts(pos, parser) {\n        var _a;\n        let result = [];\n        if (this.inner) {\n            this.inner.cursor.moveTo(pos, 1);\n            for (let pos = this.inner.cursor.node; pos; pos = pos.parent) {\n                let mount = (_a = pos.tree) === null || _a === void 0 ? void 0 : _a.prop(NodeProp.mounted);\n                if (mount && mount.parser == parser) {\n                    for (let i = this.fragI; i < this.fragments.length; i++) {\n                        let frag = this.fragments[i];\n                        if (frag.from >= pos.to)\n                            break;\n                        if (frag.tree == this.curFrag.tree)\n                            result.push({\n                                frag,\n                                pos: pos.from - frag.offset,\n                                mount\n                            });\n                    }\n                }\n            }\n        }\n        return result;\n    }\n}\nfunction punchRanges(outer, ranges) {\n    let copy = null, current = ranges;\n    for (let i = 1, j = 0; i < outer.length; i++) {\n        let gapFrom = outer[i - 1].to, gapTo = outer[i].from;\n        for (; j < current.length; j++) {\n            let r = current[j];\n            if (r.from >= gapTo)\n                break;\n            if (r.to <= gapFrom)\n                continue;\n            if (!copy)\n                current = copy = ranges.slice();\n            if (r.from < gapFrom) {\n                copy[j] = new Range(r.from, gapFrom);\n                if (r.to > gapTo)\n                    copy.splice(j + 1, 0, new Range(gapTo, r.to));\n            }\n            else if (r.to > gapTo) {\n                copy[j--] = new Range(gapTo, r.to);\n            }\n            else {\n                copy.splice(j--, 1);\n            }\n        }\n    }\n    return current;\n}\nfunction findCoverChanges(a, b, from, to) {\n    let iA = 0, iB = 0, inA = false, inB = false, pos = -1e9;\n    let result = [];\n    for (;;) {\n        let nextA = iA == a.length ? 1e9 : inA ? a[iA].to : a[iA].from;\n        let nextB = iB == b.length ? 1e9 : inB ? b[iB].to : b[iB].from;\n        if (inA != inB) {\n            let start = Math.max(pos, from), end = Math.min(nextA, nextB, to);\n            if (start < end)\n                result.push(new Range(start, end));\n        }\n        pos = Math.min(nextA, nextB);\n        if (pos == 1e9)\n            break;\n        if (nextA == pos) {\n            if (!inA)\n                inA = true;\n            else {\n                inA = false;\n                iA++;\n            }\n        }\n        if (nextB == pos) {\n            if (!inB)\n                inB = true;\n            else {\n                inB = false;\n                iB++;\n            }\n        }\n    }\n    return result;\n}\n// Given a number of fragments for the outer tree, and a set of ranges\n// to parse, find fragments for inner trees mounted around those\n// ranges, if any.\nfunction enterFragments(mounts, ranges) {\n    let result = [];\n    for (let { pos, mount, frag } of mounts) {\n        let startPos = pos + (mount.overlay ? mount.overlay[0].from : 0), endPos = startPos + mount.tree.length;\n        let from = Math.max(frag.from, startPos), to = Math.min(frag.to, endPos);\n        if (mount.overlay) {\n            let overlay = mount.overlay.map(r => new Range(r.from + pos, r.to + pos));\n            let changes = findCoverChanges(ranges, overlay, from, to);\n            for (let i = 0, pos = from;; i++) {\n                let last = i == changes.length, end = last ? to : changes[i].from;\n                if (end > pos)\n                    result.push(new TreeFragment(pos, end, mount.tree, -startPos, frag.from >= pos, frag.to <= end));\n                if (last)\n                    break;\n                pos = changes[i].to;\n            }\n        }\n        else {\n            result.push(new TreeFragment(from, to, mount.tree, -startPos, frag.from >= startPos, frag.to <= endPos));\n        }\n    }\n    return result;\n}\n\nexport { DefaultBufferLength, IterMode, MountedTree, NodeProp, NodeSet, NodeType, NodeWeakMap, Parser, Tree, TreeBuffer, TreeCursor, TreeFragment, parseMixed };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}