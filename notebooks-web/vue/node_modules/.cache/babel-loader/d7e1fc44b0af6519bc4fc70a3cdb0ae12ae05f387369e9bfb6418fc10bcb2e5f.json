{"ast":null,"code":"import { extent } from \"d3\";\nimport { projectionAspectRatio } from \"./projection.js\";\nimport { isOrdinalScale } from \"./scales.js\";\nimport { offset } from \"./style.js\";\nexport function createDimensions(scales, marks, options = {}) {\n  // Compute the default margins: the maximum of the marks’ margins. While not\n  // always used, they may be needed to compute the default height of the plot.\n  let marginTopDefault = 0.5 - offset,\n    marginRightDefault = 0.5 + offset,\n    marginBottomDefault = 0.5 + offset,\n    marginLeftDefault = 0.5 - offset;\n  for (const {\n    marginTop,\n    marginRight,\n    marginBottom,\n    marginLeft\n  } of marks) {\n    if (marginTop > marginTopDefault) marginTopDefault = marginTop;\n    if (marginRight > marginRightDefault) marginRightDefault = marginRight;\n    if (marginBottom > marginBottomDefault) marginBottomDefault = marginBottom;\n    if (marginLeft > marginLeftDefault) marginLeftDefault = marginLeft;\n  }\n\n  // Compute the actual margins. The order of precedence is: the side-specific\n  // margin options, then the global margin option, then the defaults.\n  let {\n    margin,\n    marginTop = margin !== undefined ? margin : marginTopDefault,\n    marginRight = margin !== undefined ? margin : marginRightDefault,\n    marginBottom = margin !== undefined ? margin : marginBottomDefault,\n    marginLeft = margin !== undefined ? margin : marginLeftDefault\n  } = options;\n\n  // Coerce the margin options to numbers.\n  marginTop = +marginTop;\n  marginRight = +marginRight;\n  marginBottom = +marginBottom;\n  marginLeft = +marginLeft;\n\n  // Compute the outer dimensions of the plot. If the top and bottom margins are\n  // specified explicitly, adjust the automatic height accordingly.\n  let {\n    width = 640,\n    height = autoHeight(scales, options, {\n      width,\n      marginTopDefault,\n      marginRightDefault,\n      marginBottomDefault,\n      marginLeftDefault\n    }) + Math.max(0, marginTop - marginTopDefault + marginBottom - marginBottomDefault)\n  } = options;\n\n  // Coerce the width and height.\n  width = +width;\n  height = +height;\n  const dimensions = {\n    width,\n    height,\n    marginTop,\n    marginRight,\n    marginBottom,\n    marginLeft\n  };\n\n  // Compute the facet margins.\n  if (scales.fx || scales.fy) {\n    let {\n      margin: facetMargin,\n      marginTop: facetMarginTop = facetMargin !== undefined ? facetMargin : marginTop,\n      marginRight: facetMarginRight = facetMargin !== undefined ? facetMargin : marginRight,\n      marginBottom: facetMarginBottom = facetMargin !== undefined ? facetMargin : marginBottom,\n      marginLeft: facetMarginLeft = facetMargin !== undefined ? facetMargin : marginLeft\n    } = options.facet ?? {};\n\n    // Coerce the facet margin options to numbers.\n    facetMarginTop = +facetMarginTop;\n    facetMarginRight = +facetMarginRight;\n    facetMarginBottom = +facetMarginBottom;\n    facetMarginLeft = +facetMarginLeft;\n    dimensions.facet = {\n      marginTop: facetMarginTop,\n      marginRight: facetMarginRight,\n      marginBottom: facetMarginBottom,\n      marginLeft: facetMarginLeft\n    };\n  }\n  return dimensions;\n}\nfunction autoHeight({\n  x,\n  y,\n  fy,\n  fx\n}, {\n  projection,\n  aspectRatio\n}, {\n  width,\n  marginTopDefault,\n  marginRightDefault,\n  marginBottomDefault,\n  marginLeftDefault\n}) {\n  const nfy = fy ? fy.scale.domain().length || 1 : 1;\n\n  // If a projection is specified, compute an aspect ratio based on the domain,\n  // defaulting to the projection’s natural aspect ratio (if known).\n  const ar = projectionAspectRatio(projection);\n  if (ar) {\n    const nfx = fx ? fx.scale.domain().length : 1;\n    const far = (1.1 * nfy - 0.1) / (1.1 * nfx - 0.1) * ar; // 0.1 is default facet padding\n    const lar = Math.max(0.1, Math.min(10, far)); // clamp the aspect ratio to a “reasonable” value\n    return Math.round((width - marginLeftDefault - marginRightDefault) * lar + marginTopDefault + marginBottomDefault);\n  }\n  const ny = y ? isOrdinalScale(y) ? y.scale.domain().length || 1 : Math.max(7, 17 / nfy) : 1;\n\n  // If a desired aspect ratio is given, compute a default height to match.\n  if (aspectRatio != null) {\n    aspectRatio = +aspectRatio;\n    if (!(isFinite(aspectRatio) && aspectRatio > 0)) throw new Error(`invalid aspectRatio: ${aspectRatio}`);\n    const ratio = aspectRatioLength(\"y\", y) / (aspectRatioLength(\"x\", x) * aspectRatio);\n    const fxb = fx ? fx.scale.bandwidth() : 1;\n    const fyb = fy ? fy.scale.bandwidth() : 1;\n    const w = fxb * (width - marginLeftDefault - marginRightDefault) - x.insetLeft - x.insetRight;\n    return (ratio * w + y.insetTop + y.insetBottom) / fyb + marginTopDefault + marginBottomDefault;\n  }\n  return !!(y || fy) * Math.max(1, Math.min(60, ny * nfy)) * 20 + !!fx * 30 + 60;\n}\nfunction aspectRatioLength(k, scale) {\n  if (!scale) throw new Error(`aspectRatio requires ${k} scale`);\n  const {\n    type,\n    domain\n  } = scale;\n  let transform;\n  switch (type) {\n    case \"linear\":\n    case \"utc\":\n    case \"time\":\n      transform = Number;\n      break;\n    case \"pow\":\n      {\n        const exponent = scale.scale.exponent();\n        transform = x => Math.pow(x, exponent);\n        break;\n      }\n    case \"log\":\n      transform = Math.log;\n      break;\n    case \"point\":\n    case \"band\":\n      return domain.length;\n    default:\n      throw new Error(`unsupported ${k} scale for aspectRatio: ${type}`);\n  }\n  const [min, max] = extent(domain);\n  return Math.abs(transform(max) - transform(min));\n}","map":{"version":3,"names":["extent","projectionAspectRatio","isOrdinalScale","offset","createDimensions","scales","marks","options","marginTopDefault","marginRightDefault","marginBottomDefault","marginLeftDefault","marginTop","marginRight","marginBottom","marginLeft","margin","undefined","width","height","autoHeight","Math","max","dimensions","fx","fy","facetMargin","facetMarginTop","facetMarginRight","facetMarginBottom","facetMarginLeft","facet","x","y","projection","aspectRatio","nfy","scale","domain","length","ar","nfx","far","lar","min","round","ny","isFinite","Error","ratio","aspectRatioLength","fxb","bandwidth","fyb","w","insetLeft","insetRight","insetTop","insetBottom","k","type","transform","Number","exponent","pow","log","abs"],"sources":["D:/Notebooks/notebooks-web/vue/node_modules/@observablehq/plot/src/dimensions.js"],"sourcesContent":["import {extent} from \"d3\";\nimport {projectionAspectRatio} from \"./projection.js\";\nimport {isOrdinalScale} from \"./scales.js\";\nimport {offset} from \"./style.js\";\n\nexport function createDimensions(scales, marks, options = {}) {\n  // Compute the default margins: the maximum of the marks’ margins. While not\n  // always used, they may be needed to compute the default height of the plot.\n  let marginTopDefault = 0.5 - offset,\n    marginRightDefault = 0.5 + offset,\n    marginBottomDefault = 0.5 + offset,\n    marginLeftDefault = 0.5 - offset;\n\n  for (const {marginTop, marginRight, marginBottom, marginLeft} of marks) {\n    if (marginTop > marginTopDefault) marginTopDefault = marginTop;\n    if (marginRight > marginRightDefault) marginRightDefault = marginRight;\n    if (marginBottom > marginBottomDefault) marginBottomDefault = marginBottom;\n    if (marginLeft > marginLeftDefault) marginLeftDefault = marginLeft;\n  }\n\n  // Compute the actual margins. The order of precedence is: the side-specific\n  // margin options, then the global margin option, then the defaults.\n  let {\n    margin,\n    marginTop = margin !== undefined ? margin : marginTopDefault,\n    marginRight = margin !== undefined ? margin : marginRightDefault,\n    marginBottom = margin !== undefined ? margin : marginBottomDefault,\n    marginLeft = margin !== undefined ? margin : marginLeftDefault\n  } = options;\n\n  // Coerce the margin options to numbers.\n  marginTop = +marginTop;\n  marginRight = +marginRight;\n  marginBottom = +marginBottom;\n  marginLeft = +marginLeft;\n\n  // Compute the outer dimensions of the plot. If the top and bottom margins are\n  // specified explicitly, adjust the automatic height accordingly.\n  let {\n    width = 640,\n    height = autoHeight(scales, options, {\n      width,\n      marginTopDefault,\n      marginRightDefault,\n      marginBottomDefault,\n      marginLeftDefault\n    }) + Math.max(0, marginTop - marginTopDefault + marginBottom - marginBottomDefault)\n  } = options;\n\n  // Coerce the width and height.\n  width = +width;\n  height = +height;\n\n  const dimensions = {\n    width,\n    height,\n    marginTop,\n    marginRight,\n    marginBottom,\n    marginLeft\n  };\n\n  // Compute the facet margins.\n  if (scales.fx || scales.fy) {\n    let {\n      margin: facetMargin,\n      marginTop: facetMarginTop = facetMargin !== undefined ? facetMargin : marginTop,\n      marginRight: facetMarginRight = facetMargin !== undefined ? facetMargin : marginRight,\n      marginBottom: facetMarginBottom = facetMargin !== undefined ? facetMargin : marginBottom,\n      marginLeft: facetMarginLeft = facetMargin !== undefined ? facetMargin : marginLeft\n    } = options.facet ?? {};\n\n    // Coerce the facet margin options to numbers.\n    facetMarginTop = +facetMarginTop;\n    facetMarginRight = +facetMarginRight;\n    facetMarginBottom = +facetMarginBottom;\n    facetMarginLeft = +facetMarginLeft;\n\n    dimensions.facet = {\n      marginTop: facetMarginTop,\n      marginRight: facetMarginRight,\n      marginBottom: facetMarginBottom,\n      marginLeft: facetMarginLeft\n    };\n  }\n\n  return dimensions;\n}\n\nfunction autoHeight(\n  {x, y, fy, fx},\n  {projection, aspectRatio},\n  {width, marginTopDefault, marginRightDefault, marginBottomDefault, marginLeftDefault}\n) {\n  const nfy = fy ? fy.scale.domain().length || 1 : 1;\n\n  // If a projection is specified, compute an aspect ratio based on the domain,\n  // defaulting to the projection’s natural aspect ratio (if known).\n  const ar = projectionAspectRatio(projection);\n  if (ar) {\n    const nfx = fx ? fx.scale.domain().length : 1;\n    const far = ((1.1 * nfy - 0.1) / (1.1 * nfx - 0.1)) * ar; // 0.1 is default facet padding\n    const lar = Math.max(0.1, Math.min(10, far)); // clamp the aspect ratio to a “reasonable” value\n    return Math.round((width - marginLeftDefault - marginRightDefault) * lar + marginTopDefault + marginBottomDefault);\n  }\n  const ny = y ? (isOrdinalScale(y) ? y.scale.domain().length || 1 : Math.max(7, 17 / nfy)) : 1;\n\n  // If a desired aspect ratio is given, compute a default height to match.\n  if (aspectRatio != null) {\n    aspectRatio = +aspectRatio;\n    if (!(isFinite(aspectRatio) && aspectRatio > 0)) throw new Error(`invalid aspectRatio: ${aspectRatio}`);\n    const ratio = aspectRatioLength(\"y\", y) / (aspectRatioLength(\"x\", x) * aspectRatio);\n    const fxb = fx ? fx.scale.bandwidth() : 1;\n    const fyb = fy ? fy.scale.bandwidth() : 1;\n    const w = fxb * (width - marginLeftDefault - marginRightDefault) - x.insetLeft - x.insetRight;\n    return (ratio * w + y.insetTop + y.insetBottom) / fyb + marginTopDefault + marginBottomDefault;\n  }\n\n  return !!(y || fy) * Math.max(1, Math.min(60, ny * nfy)) * 20 + !!fx * 30 + 60;\n}\n\nfunction aspectRatioLength(k, scale) {\n  if (!scale) throw new Error(`aspectRatio requires ${k} scale`);\n  const {type, domain} = scale;\n  let transform;\n  switch (type) {\n    case \"linear\":\n    case \"utc\":\n    case \"time\":\n      transform = Number;\n      break;\n    case \"pow\": {\n      const exponent = scale.scale.exponent();\n      transform = (x) => Math.pow(x, exponent);\n      break;\n    }\n    case \"log\":\n      transform = Math.log;\n      break;\n    case \"point\":\n    case \"band\":\n      return domain.length;\n    default:\n      throw new Error(`unsupported ${k} scale for aspectRatio: ${type}`);\n  }\n  const [min, max] = extent(domain);\n  return Math.abs(transform(max) - transform(min));\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}